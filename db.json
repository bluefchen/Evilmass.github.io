{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"b51eef66d2734d27c94ab93c86c7ad7140bd5f34","modified":1486391605723},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1486401164425},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1486401164428},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1486401164426},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1486401164428},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1486401164427},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1486401164429},{"_id":"themes/next/README.en.md","hash":"3b0c7998cf17f9cf9e1a5bfcd65679a43a00c817","modified":1486401164429},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1486401164429},{"_id":"themes/next/_config.yml","hash":"788bdfa51d61dac8b36c01e7a8a195945494e4d5","modified":1486384600637},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1486401164430},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1486401164430},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1486401164463},{"_id":"source/_posts/Funny-QR-Code.md","hash":"2f987a6dc558ad46a16ed6054432edf6ff0b8162","modified":1485856638114},{"_id":"source/_posts/GSM-Sniffer小测试.md","hash":"dc6d82bc1c75ca0153846e35a12147c6494b5a9b","modified":1485860450271},{"_id":"source/_posts/MHP-Tunnel服务器的另类搭建方式.md","hash":"a7f4ca90cc36cd23ed4b57eb9b666cbbdbca9c26","modified":1485017054922},{"_id":"source/_posts/MHP3-大神島【出雲】-月下の渓流に、双雷は轟く.md","hash":"4bde662abd1b032d27c221b928fc75819da1573a","modified":1485074635426},{"_id":"source/_posts/OpenBTS环境配置.md","hash":"ce49b625d9977f4a97d2e7b0071cfa0ca96e88e5","modified":1485860649862},{"_id":"source/_posts/RFID小测试.md","hash":"61974f43de4c319cff32de33736f47e42d11f3b5","modified":1485860609139},{"_id":"source/_posts/SQLite简明教程.md","hash":"bce46285f7016a1e639c9652055e2a5ac21e24f7","modified":1484734388488},{"_id":"source/_posts/WordPress博客添加返回顶部按钮.md","hash":"54836a387a57f833261c5a94e99cb611b5ec23b7","modified":1485271828224},{"_id":"source/_posts/从Wordpress迁移到Hexo.md","hash":"d2fbea2782c26954d3c4c4e64c4a67d2b436ec56","modified":1486449256945},{"_id":"source/_posts/Selenium-Python-Windows-Automated-Test-Environment.md","hash":"da0618302014445cb1429b7055a73c808c3fddcd","modified":1485858764477},{"_id":"source/_posts/Wordpress全站切换到HTTPS.md","hash":"e7802f8e971fe305c561c61f81698a8222b55e99","modified":1485864712856},{"_id":"source/_posts/关于Python入门以及爬虫的一些想法.md","hash":"39ad38849461de7f04b7e6e493f10147c7d7df86","modified":1484774089295},{"_id":"source/_posts/在CentOS下配置ngrok.md","hash":"593f380f60a17802782a1e317790aed5e3075589","modified":1486365083839},{"_id":"source/_posts/利用proxychains在终端使用socks5代理.md","hash":"4520354ae29bd5fde09de593a8ffb024ba0b1082","modified":1486323926742},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1486401164405},{"_id":"source/_posts/视频下载神器-You-Get.md","hash":"6b738667855e65898a330786ba7b5f0859b887f2","modified":1485857899660},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1486401164413},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1486401146103},{"_id":"themes/next/.git/index","hash":"3fbf1dd382970b9469367a38db6b3916baffe540","modified":1486448779032},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1486401164427},{"_id":"themes/next/.git/packed-refs","hash":"12ca02d8374d9a441a6c8a6c9ed061432cb0a8c9","modified":1486401164399},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1486401164427},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1486401164431},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1486401164431},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1486401164432},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1486401164432},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1486401164432},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1486401164433},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1486401164433},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1486401164434},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1486401164434},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1486401164435},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1486401164435},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1486401164434},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1486401164435},{"_id":"themes/next/layout/_layout.swig","hash":"2fa3c74066843a859fac77803324a1de51044da9","modified":1486401164437},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1486401164461},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1486401164460},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1486401164461},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1486401164462},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1486401164462},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1486401164461},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1486401164462},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1486401164463},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1486401164549},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1486401164550},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1486401164549},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486401164505},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1486401146105},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1486401146106},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1486401146107},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1486401146104},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1486401146107},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1486401146109},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1486401146110},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1486401146111},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1486401146112},{"_id":"themes/next/.git/logs/HEAD","hash":"c3c9bdc8d56eff95a03245dec25133d5de7cbe84","modified":1486401164409},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1486401146114},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1486401146113},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1486401164437},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1486401164437},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1486401164438},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1486401164439},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1486401164441},{"_id":"themes/next/layout/_partials/comments.swig","hash":"78ccfc1dc915247c1fec3c86d742e0f4c2f6d99c","modified":1486401164441},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1486401164440},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1486401164442},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1486401164440},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1486401164444},{"_id":"themes/next/layout/_macro/post.swig","hash":"e6016def9b512188f4c2725399c9adc7bc41cdae","modified":1486401164438},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1486401164442},{"_id":"themes/next/layout/_partials/header.swig","hash":"adab5c3f7b173f1b45454787f39dde07aea03483","modified":1486401164444},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1486401164444},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1486401164445},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1486401164448},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1486401164448},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1486401164449},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1486401164460},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1486401164464},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1486401164465},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1486401164464},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1486401164465},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1486401164466},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1486401164505},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1486401164505},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1486401164506},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1486401164507},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1486401164506},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1486401164507},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1486401164508},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1486401164508},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1486401164509},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1486401164509},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1486401164509},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1486401164510},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1486401164510},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1486401164510},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1486401164511},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486401164450},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486401164450},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486401164493},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486401164493},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486401164494},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486401164503},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486401164504},{"_id":"themes/next/.git/refs/heads/master","hash":"2311b7302155cc3ec46e40ad16dc5c94e36328b4","modified":1486401164408},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1486401164436},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1486401164436},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1486401164443},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1486401164443},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1486401164445},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1486401164445},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1486401164447},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1486401164446},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1486401164446},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1486401164447},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1486401164447},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1486401164449},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1486401164450},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1486401164451},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1486401164458},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"4abc01bc870e1d7a783cdbd26166edc782a6a4f4","modified":1486401164455},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1486401164459},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1486401164458},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1486401164460},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1486401164459},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1486401164492},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1486401164494},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1486401164493},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1486401164503},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c459aa6d607d8bcb747544e74f6ad0b8374aa3b1","modified":1486401164504},{"_id":"themes/next/source/css/_variables/base.styl","hash":"fc185c6cec79593775d1c2440dbe2a71cfbe2e99","modified":1486401164504},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1486401164511},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1486401164513},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1486401164514},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1486401164513},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1486401164512},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1486401164512},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1486401164515},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1486401164515},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1486401164518},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1486401164513},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1486401164518},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1486401164518},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1486401164530},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1486401164531},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1486401164529},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1486401164530},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1486401164531},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1486401164540},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1486401164526},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1486401164526},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1486401164526},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1486401164528},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1486401164541},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1486401164541},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1486401164542},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1486401164542},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1486401164545},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1486401164543},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1486401164543},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1486401164545},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1486401164548},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1486401164547},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1486401164548},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1486401164540},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"c3c9bdc8d56eff95a03245dec25133d5de7cbe84","modified":1486401164410},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1486401164404},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1486401164451},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1486401164452},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1486401164453},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1486401164453},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1486401164452},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1486401164455},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1486401164456},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1486401164453},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1486401164457},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1486401164454},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1486401164457},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"ea8078fa9e10be2bb042749d8b6a97adc38f914c","modified":1486401164458},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1486401164467},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1486401164467},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1486401164468},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1486401164468},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1486401164474},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1486401164484},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1486401164490},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1486401164490},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1486401164489},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1486401164491},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1486401164491},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1486401164495},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1486401164492},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1486401164495},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1486401164495},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1486401164496},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1486401164496},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1486401164496},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1486401164498},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1486401164498},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1486401164497},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1486401164499},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1486401164499},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1486401164499},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1408209dfb9a22a0982a30bdbd14842c2b53f264","modified":1486401164501},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1486401164500},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1486401164501},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1486401164502},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1486401164502},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1486401164514},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1486401164502},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1486401164519},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1486401164519},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1486401164519},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1486401164520},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1486401164520},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1486401164521},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1486401164524},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1486401164524},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1486401164525},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1486401164532},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1486401164531},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1486401164533},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1486401164528},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1486401164529},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1486401164544},{"_id":"themes/next/.git/objects/pack/pack-b12a0e7fb1f93be4353277412b223c495989e313.idx","hash":"4ea2b7de79f1f41a895e476d2f4532bcb7cd0270","modified":1486401164119},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1486401164544},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1486401164535},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1486401164534},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1486401164539},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1486401164539},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1486401164547},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"c3c9bdc8d56eff95a03245dec25133d5de7cbe84","modified":1486401164403},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1486401164468},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1486401164469},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1486401164470},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1486401164471},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1486401164469},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1486401164470},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1486401164473},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1486401164472},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1486401164474},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1486401164473},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1486401164474},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1486401164471},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1486401164472},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1486401164472},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1486401164476},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"fdfadbb4483043c7e0afd541ee9712389e633517","modified":1486401164475},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1486401164475},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1486401164477},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1486401164478},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1486401164478},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1486401164477},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1486401164479},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1486401164477},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1486401164479},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1486401164480},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1486401164480},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1486401164479},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1486401164482},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1486401164482},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1486401164481},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1486401164482},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1486401164483},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1486401164483},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1486401164483},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1486401164484},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1486401164484},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1486401164486},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1486401164485},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1486401164487},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1486401164488},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1486401164486},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1486401164485},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1486401164488},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1486401164486},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1486401164487},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1486401164488},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1486401164488},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1486401164497},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1486401164498},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1486401164489},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1486401164500},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1486401164521},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1486401164521},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1486401164522},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1486401164522},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1486401164523},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1486401164538},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1486401164523},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1486401164537},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1486401164517},{"_id":"themes/next/.git/objects/pack/pack-b12a0e7fb1f93be4353277412b223c495989e313.pack","hash":"ed73ecb3db3bf78f5e01ca5007c68de73f17d1ac","modified":1486401164233},{"_id":"public/2017/01/24/WordPress博客添加返回顶部按钮/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486451163641},{"_id":"public/2017/01/18/利用proxychains在终端使用socks5代理/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486451163642},{"_id":"public/2017/01/16/视频下载神器-You-Get/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486451163642},{"_id":"public/2017/01/15/Selenium-Python-Windows-Automated-Test-Environment/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486451163642},{"_id":"public/2016/10/19/MHP3-大神島【出雲】-月下の渓流に、双雷は轟く/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486451163642},{"_id":"public/tags/杂/index.html","hash":"717fa4d3073fd9169827f1a9ff7c061b366b2189","modified":1486449573383},{"_id":"public/tags/Hack/index.html","hash":"f20135dabedd870889570a43aeaf72a5463d56f3","modified":1486449573383},{"_id":"public/tags/Video-Game/index.html","hash":"473f78131f15b84ed6f85ef9cdb993fb07ed4f46","modified":1486449573384},{"_id":"public/tags/爬虫/index.html","hash":"0e86cf5f0d64962ce4bf27107c4f585bc857ed11","modified":1486449573384},{"_id":"public/tags/Linux/index.html","hash":"49f19a31a5386cd0142694d0ff2b8913092292fa","modified":1486449573384},{"_id":"public/archives/index.html","hash":"edb28e4a5bff9319bb9206505a2589c5893f5613","modified":1486449573383},{"_id":"public/archives/page/2/index.html","hash":"985d95963b91e41216e12e889860ab91a76bc572","modified":1486449573383},{"_id":"public/archives/2016/index.html","hash":"64e27350a4364a52df4c19bf3c99a10c5f706c73","modified":1486449573383},{"_id":"public/archives/2016/10/index.html","hash":"4c81b9985f87ebd3c1becbd755c8c0b4eda68a69","modified":1486449573383},{"_id":"public/archives/2017/index.html","hash":"703ce15e1a015d33387adc90bf1b6a70895297c7","modified":1486449573383},{"_id":"public/archives/2017/page/2/index.html","hash":"4fa0fd585e1281d91c9e18d875b00303833140e2","modified":1486449573383},{"_id":"public/archives/2017/01/index.html","hash":"06f018daaadff89cf019d96cb645e344a0651750","modified":1486449573383},{"_id":"public/archives/2017/02/index.html","hash":"aa43a13eb5c44a6269d3c8e3facf6281ba00251c","modified":1486449573383},{"_id":"public/categories/Hack/index.html","hash":"40879e4a50ea7a1032f0e9da3291112000ed967f","modified":1486449573383},{"_id":"public/2017/02/06/从Wordpress迁移到Hexo/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486451163641},{"_id":"public/2017/01/31/Wordpress全站切换到HTTPS/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486451163641},{"_id":"public/2017/01/25/在CentOS下配置ngrok/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486451163641},{"_id":"public/2017/01/22/MHP-Tunnel服务器的另类搭建方式/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486451163641},{"_id":"public/2017/01/18/关于Python入门以及爬虫的一些想法/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486451163641},{"_id":"public/2017/01/16/Funny-QR-Code/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486451163642},{"_id":"public/2017/01/14/SQLite简明教程/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486451163642},{"_id":"public/2016/10/19/GSM-Sniffer小测试/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486451163642},{"_id":"public/2016/10/19/RFID小测试/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486451163642},{"_id":"public/2016/10/02/OpenBTS环境配置/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486451163642},{"_id":"public/index.html","hash":"3d327df193988b5f673cda64b5740960f43d7399","modified":1486449573386},{"_id":"public/page/2/index.html","hash":"ce5d037ecb9b1246e252a4b4baba4e1fc9e28e5c","modified":1486449573383},{"_id":"public/CNAME","hash":"b51eef66d2734d27c94ab93c86c7ad7140bd5f34","modified":1486451163644},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1486449055296},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1486449055296},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1486449055296},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1486449055296},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1486449055297},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1486449055297},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1486449055297},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1486449055297},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1486449055297},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1486449055297},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1486449055297},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1486449055297},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1486449055297},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1486449055297},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1486449055297},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1486449055297},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1486449055297},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1486449055297},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1486449055297},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1486449055297},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1486449055297},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1486449055297},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1486449055297},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1486449055297},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1486449056273},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1486449056277},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1486449056281},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1486449056281},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1486449056287},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1486449056287},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1486449056287},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1486449056287},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1486449056287},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1486449056287},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1486449056287},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1486449056287},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1486449056287},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1486449056287},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1486449056287},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1486449056287},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1486449056287},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1486449056287},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1486449056287},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1486449056287},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1486449056287},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1486449056287},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1486449056287},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1486449056287},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1486449056287},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1486449056287},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1486449056287},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1486449056288},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1486449056288},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1486449056288},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1486449056288},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1486449056288},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1486449056288},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1486449056288},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1486449056288},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1486449056288},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1486449056288},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1486449056288},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1486449056288},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1486449056288},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1486449056288},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1486449056288},{"_id":"public/css/main.css","hash":"1b129762b44a0483d517e2a681bae6788baa5bd3","modified":1486449056288},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1486449056288},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1486449056288},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1486449056288},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1486449056298},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1486401514905},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1486401514906},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1486401514906},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1486401514907},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1486401514908},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1486401514926},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1486401514908},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1486401514909},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1486401514910},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1486401514910},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1486401514915},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1486401514911},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1486401514915},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1486401514924},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1486401514924},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1486401514924},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1486401514925},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1486401514925},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1486401514926},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1486401514926},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1486401514927},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1486401514916},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1486401514917},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1486401514917},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1486401514917},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1486401514918},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1486401514919},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1486401514918},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1486401514919},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1486401514919},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1486401514922},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1486401514922},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1486401514923},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1486401514923},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1486401514923},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1486401514923},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1486401514928},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1486401514933},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1486401514940},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1486401514940},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1486401514940},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1486401514941},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1486401514947},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1486401514942},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1486401514941},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1486401514942},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1486401514945},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1486401514946},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1486401514946},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1486401514920},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1486401514920},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1486401514921},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1486401514921},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1486401514921},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1486401514922},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1486401514928},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1486401514928},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1486401514929},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1486401514929},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1486401514931},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1486401514930},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1486401514930},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1486401514930},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1486401514931},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1486401514932},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1486401514932},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1486401514932},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1486401514934},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1486401514935},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1486401514937},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1486401514943},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1486401514943},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1486401514944},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1486401514944},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1486401514944},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1486401514945},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1486401514937},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1486401514936},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1486401514939},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1486449573392},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1486449573392},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1486449573393},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1486449573393},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1486449573393},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1486449573393},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1486449573393},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1486449573393},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1486449573393},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1486449573393},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1486449574216},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1486449574222},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1486449574222},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1486449574222},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1486449574222},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1486449574222},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1486449574222},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1486449574222},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1486449574222},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1486449574222},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1486449574222},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1486449574224},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1486449574224}],"Category":[{"name":"Hack","_id":"ciyv5dxzx0009pooga7lwapw5"}],"Data":[],"Page":[],"Post":[{"title":"Funny QR Code","date":"2017-01-16T13:18:19.000Z","_content":"\n### 效果\n![alipay.gif][1]\n\n<!--more-->\n\n![patapon_wechat][2]\n![20][20]\n<br><br>\n\n\n\n### Require\n    1. Visual QR Codes Generator \n    2. VirtualDub\n    3. Format Factory\n    4. PhotoShop CS6\n[百度盘提取码8jjc][3] \n**吐槽1: 百度云没Vip叫*爸爸*都没用** \n\n下载大文件速度慢的请自行下载: \n> [Format Factory][4]\n  [PhotoShop CS6下载&破解][5]\n\n<br><br>\n\n\n### Let's Do It\n\n#### 首先, 获得个人支付宝或者微信转账的二维码并[转换成url][6] \n![7][7]\n<br><br>\n\n#### 找一张你喜欢的Gif\n![8][8]\n<br><br>\n\n#### 用PhotoShop转换成mp4格式\n **请用独显开Photoshop!**\n **请用独显开Photoshop!**\n **请用独显开Photoshop!**\n重要的事情说三次\n![9][9]\n<br><br>\n\n#### 用格式工厂将mp4转化为avi格式, **输出选项 -> 视频编码 -> MJPEG**\n![10][10]\n<br>\n如果你直接把 avi 扔进 Visual QR Codes Generator里, 生成的时候它就会报错, 因为这坑爹货用的是 **opencv**\n<br><br>\n\n#### 打开 VirtualDub.exe， 导入那个 avi 视频（open-open video file）: **Video->Filters->Add->Convert format**，选择 **32-Bit RGB**，点击 ok，最后点击 file-save av AVI 保存处理后的视频文件, 这样我们就得到了导出的视频文件\n![11][11]\n<br><br>\n\n#### 将改好的avi文件与二维码合并\n\n在空白栏填上第一步得到的url\nVersion可修改二维码样式\nEC Level默认H即可\n![22][22]\n<br>\n接下来我们在视频压缩对话框的压缩程序选项选上**全帧**，然后点确认，导出视频：\n![12][12]\n<br>\n彩色勾选上, 速度可根据个人喜好调整(鬼畜什么的), 融合过程需要等待一段时间\n![13][13]\n<br><br>\n\n\n#### 二维码->Gif\n再次用到PhotoShop, 选择文件 -> 导入 -> 视频帧到图层\n![14][14]\n<br>\n存储为Web所用格式\n![23][23]\n<br>\n![21][21]\n<br>\ngif速度过快可选中所有帧, 适当调整延迟时间\n![24][24]\n<br>\n可适当调大像素, 保存为Gif\n![15][15]\n<br>\n\n> 赶紧拿手机扫一扫试试吧~\n [这里有一个失败的例子: 太大了][29]\n\n\n**吐槽2: 这过程好繁琐啊，哪天能写个脚本自动化什么的，毕竟你是学Python的人啊(*雾***\n<br>\n\n**Update：看来不用重复造轮子了** \n>[Python 艺术二维码生成器 (GIF动态二维码、图片二维码)][25]\n\n> [在线生成网页版][26]\n\n> [Windows版(不需要Python环境)][28]\n\n貌似还在更新, 有人反馈不支持微信和支付宝的二维码, 我找到了个解决办法并提交了issue: [在MyQR中使用微信和支付宝二维码链接][27]\n\n给出windos的info.txt示例(注释仅作说明, info.txt文件内不能出现中文):\n\n    ```python\n    # an example for info.txt:\n    words=http://t.cn/xxx  # 缩短后的URL\n    p=117.gif  # 原始文件\n    n=new.gif  # 生成的文件名\n    v=10   # -v 控制边长, 范围是1至40, 数字越大边长越大, 对应生成的时间也越长, 别手贱调成40, 不知道要跑多久    \n    l=H  # -l 控制纠错水平，范围是L、M、Q、H，从左到右依次升高\n    c  # 加上参数 -c 可以使产生的图片由黑白变为彩色的\n    con=1.5  #参数-con 用以调节图片的对比度，1.0 表示原始图片，更小的值表示更低对比度，更大反之。默认为1.0。\n    bri=1.3  # 参数 -bri 用来调节图片的亮度，其余用法和取值与 -con 相同\n    # 还有d参数可以控制文件输出位置, 遗憾的是没有自定义二维码样式的参数\n    # 重要: 一个参数一行, 等号左右不要空格, 如果不使用某个参数, 则将其删去(words是必要的)\n    # 注意1: 该程序只是一个简单的打包, 测试时,有的电脑快, 有的电脑慢(原因不明)\n    # 注意2: 第一次使用可能会自动下载一些库文件,原因是程序依赖的库 imageio\n    ```\n<br>\n\n### Reference\n1. [QR code(Quick Response Code)][17]\n\n2. [如何优雅地让人给你打钱][18]\n\n3. [如何制作自定义背景的二维码？（包括动态）][19]\n<br><br>\n\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%8B%8D%E6%A1%8C_ailipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\n  [1]: https://of4jd0bcc.qnssl.com/QR/alipay2.gif?imageView2/2/w/300\n  [2]: https://of4jd0bcc.qnssl.com/QR/patapon_wechat.gif?imageView2/2/w/300\n  [3]: http://pan.baidu.com/s/1eSmjWrS\n  [4]: http://www.pcgeshi.com/\n  [5]: http://rj.baidu.com/soft/detail/23675.html\n  [6]: http://tool.oschina.net/qr?type=2\n  [7]: https://of4jd0bcc.qnssl.com/QR/%E5%BE%AE%E4%BF%A1%E6%89%93%E8%B5%8F.jpg?imageView2/2/w/400\n  [8]: https://of4jd0bcc.qnssl.com/QR/%E7%86%8A%E6%9C%AC%E7%86%8A%E6%B3%BC%E6%B0%B4.gif\n  [9]: https://of4jd0bcc.qnssl.com/QR/gif_mp4.png\n  [10]: https://of4jd0bcc.qnssl.com/QR/mp4_avi.png\n  [11]: https://of4jd0bcc.qnssl.com/QR/opencv.png\n  [20]: https://of4jd0bcc.qnssl.com/QR/wechat.gif?imageView2/2/w/200\n  [12]: https://of4jd0bcc.qnssl.com/QR/quan.png\n  [13]: https://of4jd0bcc.qnssl.com/QR/modify_gif2.png\n  [14]: https://of4jd0bcc.qnssl.com/QR/finish.png\n  [15]: https://of4jd0bcc.qnssl.com/QR/finish4.png\n  [21]: https://of4jd0bcc.qnssl.com/QR/finish2.png\n  [17]: https://en.wikipedia.org/wiki/QR_code\n  [18]: http://spacekid.me/qart-code/\n  [19]: https://www.chenxublog.com/2016/05/22/pic-qrcode-colorful.html\n  [20]: https://of4jd0bcc.qnssl.com/QR/wechat.gif?imageView2/2/w/200\n  [22]: https://of4jd0bcc.qnssl.com/QR/modify_gif.png\n  [23]: https://of4jd0bcc.qnssl.com/QR/finish3.png\n  [24]: https://of4jd0bcc.qnssl.com/QR/finish5.png\n  [25]: https://github.com/sylnsfar/qrcode\n  [26]: http://www.amazing-qrcode.com/\n  [27]: https://github.com/sylnsfar/qrcode/issues/19\n  [28]: https://github.com/sylnsfar/qrcode_win\n  [29]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_ailipay.gif\n\n  ","source":"_posts/Funny-QR-Code.md","raw":"---\ntitle: Funny QR Code\ndate: 2017-01-16 21:18:19\ntags: 杂\n---\n\n### 效果\n![alipay.gif][1]\n\n<!--more-->\n\n![patapon_wechat][2]\n![20][20]\n<br><br>\n\n\n\n### Require\n    1. Visual QR Codes Generator \n    2. VirtualDub\n    3. Format Factory\n    4. PhotoShop CS6\n[百度盘提取码8jjc][3] \n**吐槽1: 百度云没Vip叫*爸爸*都没用** \n\n下载大文件速度慢的请自行下载: \n> [Format Factory][4]\n  [PhotoShop CS6下载&破解][5]\n\n<br><br>\n\n\n### Let's Do It\n\n#### 首先, 获得个人支付宝或者微信转账的二维码并[转换成url][6] \n![7][7]\n<br><br>\n\n#### 找一张你喜欢的Gif\n![8][8]\n<br><br>\n\n#### 用PhotoShop转换成mp4格式\n **请用独显开Photoshop!**\n **请用独显开Photoshop!**\n **请用独显开Photoshop!**\n重要的事情说三次\n![9][9]\n<br><br>\n\n#### 用格式工厂将mp4转化为avi格式, **输出选项 -> 视频编码 -> MJPEG**\n![10][10]\n<br>\n如果你直接把 avi 扔进 Visual QR Codes Generator里, 生成的时候它就会报错, 因为这坑爹货用的是 **opencv**\n<br><br>\n\n#### 打开 VirtualDub.exe， 导入那个 avi 视频（open-open video file）: **Video->Filters->Add->Convert format**，选择 **32-Bit RGB**，点击 ok，最后点击 file-save av AVI 保存处理后的视频文件, 这样我们就得到了导出的视频文件\n![11][11]\n<br><br>\n\n#### 将改好的avi文件与二维码合并\n\n在空白栏填上第一步得到的url\nVersion可修改二维码样式\nEC Level默认H即可\n![22][22]\n<br>\n接下来我们在视频压缩对话框的压缩程序选项选上**全帧**，然后点确认，导出视频：\n![12][12]\n<br>\n彩色勾选上, 速度可根据个人喜好调整(鬼畜什么的), 融合过程需要等待一段时间\n![13][13]\n<br><br>\n\n\n#### 二维码->Gif\n再次用到PhotoShop, 选择文件 -> 导入 -> 视频帧到图层\n![14][14]\n<br>\n存储为Web所用格式\n![23][23]\n<br>\n![21][21]\n<br>\ngif速度过快可选中所有帧, 适当调整延迟时间\n![24][24]\n<br>\n可适当调大像素, 保存为Gif\n![15][15]\n<br>\n\n> 赶紧拿手机扫一扫试试吧~\n [这里有一个失败的例子: 太大了][29]\n\n\n**吐槽2: 这过程好繁琐啊，哪天能写个脚本自动化什么的，毕竟你是学Python的人啊(*雾***\n<br>\n\n**Update：看来不用重复造轮子了** \n>[Python 艺术二维码生成器 (GIF动态二维码、图片二维码)][25]\n\n> [在线生成网页版][26]\n\n> [Windows版(不需要Python环境)][28]\n\n貌似还在更新, 有人反馈不支持微信和支付宝的二维码, 我找到了个解决办法并提交了issue: [在MyQR中使用微信和支付宝二维码链接][27]\n\n给出windos的info.txt示例(注释仅作说明, info.txt文件内不能出现中文):\n\n    ```python\n    # an example for info.txt:\n    words=http://t.cn/xxx  # 缩短后的URL\n    p=117.gif  # 原始文件\n    n=new.gif  # 生成的文件名\n    v=10   # -v 控制边长, 范围是1至40, 数字越大边长越大, 对应生成的时间也越长, 别手贱调成40, 不知道要跑多久    \n    l=H  # -l 控制纠错水平，范围是L、M、Q、H，从左到右依次升高\n    c  # 加上参数 -c 可以使产生的图片由黑白变为彩色的\n    con=1.5  #参数-con 用以调节图片的对比度，1.0 表示原始图片，更小的值表示更低对比度，更大反之。默认为1.0。\n    bri=1.3  # 参数 -bri 用来调节图片的亮度，其余用法和取值与 -con 相同\n    # 还有d参数可以控制文件输出位置, 遗憾的是没有自定义二维码样式的参数\n    # 重要: 一个参数一行, 等号左右不要空格, 如果不使用某个参数, 则将其删去(words是必要的)\n    # 注意1: 该程序只是一个简单的打包, 测试时,有的电脑快, 有的电脑慢(原因不明)\n    # 注意2: 第一次使用可能会自动下载一些库文件,原因是程序依赖的库 imageio\n    ```\n<br>\n\n### Reference\n1. [QR code(Quick Response Code)][17]\n\n2. [如何优雅地让人给你打钱][18]\n\n3. [如何制作自定义背景的二维码？（包括动态）][19]\n<br><br>\n\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%8B%8D%E6%A1%8C_ailipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\n  [1]: https://of4jd0bcc.qnssl.com/QR/alipay2.gif?imageView2/2/w/300\n  [2]: https://of4jd0bcc.qnssl.com/QR/patapon_wechat.gif?imageView2/2/w/300\n  [3]: http://pan.baidu.com/s/1eSmjWrS\n  [4]: http://www.pcgeshi.com/\n  [5]: http://rj.baidu.com/soft/detail/23675.html\n  [6]: http://tool.oschina.net/qr?type=2\n  [7]: https://of4jd0bcc.qnssl.com/QR/%E5%BE%AE%E4%BF%A1%E6%89%93%E8%B5%8F.jpg?imageView2/2/w/400\n  [8]: https://of4jd0bcc.qnssl.com/QR/%E7%86%8A%E6%9C%AC%E7%86%8A%E6%B3%BC%E6%B0%B4.gif\n  [9]: https://of4jd0bcc.qnssl.com/QR/gif_mp4.png\n  [10]: https://of4jd0bcc.qnssl.com/QR/mp4_avi.png\n  [11]: https://of4jd0bcc.qnssl.com/QR/opencv.png\n  [20]: https://of4jd0bcc.qnssl.com/QR/wechat.gif?imageView2/2/w/200\n  [12]: https://of4jd0bcc.qnssl.com/QR/quan.png\n  [13]: https://of4jd0bcc.qnssl.com/QR/modify_gif2.png\n  [14]: https://of4jd0bcc.qnssl.com/QR/finish.png\n  [15]: https://of4jd0bcc.qnssl.com/QR/finish4.png\n  [21]: https://of4jd0bcc.qnssl.com/QR/finish2.png\n  [17]: https://en.wikipedia.org/wiki/QR_code\n  [18]: http://spacekid.me/qart-code/\n  [19]: https://www.chenxublog.com/2016/05/22/pic-qrcode-colorful.html\n  [20]: https://of4jd0bcc.qnssl.com/QR/wechat.gif?imageView2/2/w/200\n  [22]: https://of4jd0bcc.qnssl.com/QR/modify_gif.png\n  [23]: https://of4jd0bcc.qnssl.com/QR/finish3.png\n  [24]: https://of4jd0bcc.qnssl.com/QR/finish5.png\n  [25]: https://github.com/sylnsfar/qrcode\n  [26]: http://www.amazing-qrcode.com/\n  [27]: https://github.com/sylnsfar/qrcode/issues/19\n  [28]: https://github.com/sylnsfar/qrcode_win\n  [29]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_ailipay.gif\n\n  ","slug":"Funny-QR-Code","published":1,"updated":"2017-01-31T09:57:18.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv5dxzd0000poogcse77tj6","content":"<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"https://of4jd0bcc.qnssl.com/QR/alipay2.gif?imageView2/2/w/300\" alt=\"alipay.gif\"></p>\n<a id=\"more\"></a>\n<p><img src=\"https://of4jd0bcc.qnssl.com/QR/patapon_wechat.gif?imageView2/2/w/300\" alt=\"patapon_wechat\"><br><img src=\"https://of4jd0bcc.qnssl.com/QR/wechat.gif?imageView2/2/w/200\" alt=\"20\"><br><br><br></p>\n<h3 id=\"Require\"><a href=\"#Require\" class=\"headerlink\" title=\"Require\"></a>Require</h3><pre><code>1. Visual QR Codes Generator \n2. VirtualDub\n3. Format Factory\n4. PhotoShop CS6\n</code></pre><p><a href=\"http://pan.baidu.com/s/1eSmjWrS\" target=\"_blank\" rel=\"external\">百度盘提取码8jjc</a><br><strong>吐槽1: 百度云没Vip叫<em>爸爸</em>都没用</strong> </p>\n<p>下载大文件速度慢的请自行下载: </p>\n<blockquote>\n<p><a href=\"http://www.pcgeshi.com/\" target=\"_blank\" rel=\"external\">Format Factory</a><br>  <a href=\"http://rj.baidu.com/soft/detail/23675.html\" target=\"_blank\" rel=\"external\">PhotoShop CS6下载&amp;破解</a></p>\n</blockquote>\n<p><br><br></p>\n<h3 id=\"Let’s-Do-It\"><a href=\"#Let’s-Do-It\" class=\"headerlink\" title=\"Let’s Do It\"></a>Let’s Do It</h3><h4 id=\"首先-获得个人支付宝或者微信转账的二维码并转换成url\"><a href=\"#首先-获得个人支付宝或者微信转账的二维码并转换成url\" class=\"headerlink\" title=\"首先, 获得个人支付宝或者微信转账的二维码并转换成url\"></a>首先, 获得个人支付宝或者微信转账的二维码并<a href=\"http://tool.oschina.net/qr?type=2\" target=\"_blank\" rel=\"external\">转换成url</a></h4><p><img src=\"https://of4jd0bcc.qnssl.com/QR/%E5%BE%AE%E4%BF%A1%E6%89%93%E8%B5%8F.jpg?imageView2/2/w/400\" alt=\"7\"><br><br><br></p>\n<h4 id=\"找一张你喜欢的Gif\"><a href=\"#找一张你喜欢的Gif\" class=\"headerlink\" title=\"找一张你喜欢的Gif\"></a>找一张你喜欢的Gif</h4><p><img src=\"https://of4jd0bcc.qnssl.com/QR/%E7%86%8A%E6%9C%AC%E7%86%8A%E6%B3%BC%E6%B0%B4.gif\" alt=\"8\"><br><br><br></p>\n<h4 id=\"用PhotoShop转换成mp4格式\"><a href=\"#用PhotoShop转换成mp4格式\" class=\"headerlink\" title=\"用PhotoShop转换成mp4格式\"></a>用PhotoShop转换成mp4格式</h4><p> <strong>请用独显开Photoshop!</strong><br> <strong>请用独显开Photoshop!</strong><br> <strong>请用独显开Photoshop!</strong><br>重要的事情说三次<br><img src=\"https://of4jd0bcc.qnssl.com/QR/gif_mp4.png\" alt=\"9\"><br><br><br></p>\n<h4 id=\"用格式工厂将mp4转化为avi格式-输出选项-gt-视频编码-gt-MJPEG\"><a href=\"#用格式工厂将mp4转化为avi格式-输出选项-gt-视频编码-gt-MJPEG\" class=\"headerlink\" title=\"用格式工厂将mp4转化为avi格式, 输出选项 -&gt; 视频编码 -&gt; MJPEG\"></a>用格式工厂将mp4转化为avi格式, <strong>输出选项 -&gt; 视频编码 -&gt; MJPEG</strong></h4><p><img src=\"https://of4jd0bcc.qnssl.com/QR/mp4_avi.png\" alt=\"10\"><br><br><br>如果你直接把 avi 扔进 Visual QR Codes Generator里, 生成的时候它就会报错, 因为这坑爹货用的是 <strong>opencv</strong><br><br><br></p>\n<h4 id=\"打开-VirtualDub-exe，-导入那个-avi-视频（open-open-video-file）-Video-gt-Filters-gt-Add-gt-Convert-format，选择-32-Bit-RGB，点击-ok，最后点击-file-save-av-AVI-保存处理后的视频文件-这样我们就得到了导出的视频文件\"><a href=\"#打开-VirtualDub-exe，-导入那个-avi-视频（open-open-video-file）-Video-gt-Filters-gt-Add-gt-Convert-format，选择-32-Bit-RGB，点击-ok，最后点击-file-save-av-AVI-保存处理后的视频文件-这样我们就得到了导出的视频文件\" class=\"headerlink\" title=\"打开 VirtualDub.exe， 导入那个 avi 视频（open-open video file）: Video-&gt;Filters-&gt;Add-&gt;Convert format，选择 32-Bit RGB，点击 ok，最后点击 file-save av AVI 保存处理后的视频文件, 这样我们就得到了导出的视频文件\"></a>打开 VirtualDub.exe， 导入那个 avi 视频（open-open video file）: <strong>Video-&gt;Filters-&gt;Add-&gt;Convert format</strong>，选择 <strong>32-Bit RGB</strong>，点击 ok，最后点击 file-save av AVI 保存处理后的视频文件, 这样我们就得到了导出的视频文件</h4><p><img src=\"https://of4jd0bcc.qnssl.com/QR/opencv.png\" alt=\"11\"><br><br><br></p>\n<h4 id=\"将改好的avi文件与二维码合并\"><a href=\"#将改好的avi文件与二维码合并\" class=\"headerlink\" title=\"将改好的avi文件与二维码合并\"></a>将改好的avi文件与二维码合并</h4><p>在空白栏填上第一步得到的url<br>Version可修改二维码样式<br>EC Level默认H即可<br><img src=\"https://of4jd0bcc.qnssl.com/QR/modify_gif.png\" alt=\"22\"><br><br><br>接下来我们在视频压缩对话框的压缩程序选项选上<strong>全帧</strong>，然后点确认，导出视频：<br><img src=\"https://of4jd0bcc.qnssl.com/QR/quan.png\" alt=\"12\"><br><br><br>彩色勾选上, 速度可根据个人喜好调整(鬼畜什么的), 融合过程需要等待一段时间<br><img src=\"https://of4jd0bcc.qnssl.com/QR/modify_gif2.png\" alt=\"13\"><br><br><br></p>\n<h4 id=\"二维码-gt-Gif\"><a href=\"#二维码-gt-Gif\" class=\"headerlink\" title=\"二维码-&gt;Gif\"></a>二维码-&gt;Gif</h4><p>再次用到PhotoShop, 选择文件 -&gt; 导入 -&gt; 视频帧到图层<br><img src=\"https://of4jd0bcc.qnssl.com/QR/finish.png\" alt=\"14\"><br><br><br>存储为Web所用格式<br><img src=\"https://of4jd0bcc.qnssl.com/QR/finish3.png\" alt=\"23\"><br><br><br><img src=\"https://of4jd0bcc.qnssl.com/QR/finish2.png\" alt=\"21\"><br><br><br>gif速度过快可选中所有帧, 适当调整延迟时间<br><img src=\"https://of4jd0bcc.qnssl.com/QR/finish5.png\" alt=\"24\"><br><br><br>可适当调大像素, 保存为Gif<br><img src=\"https://of4jd0bcc.qnssl.com/QR/finish4.png\" alt=\"15\"><br><br></p>\n<blockquote>\n<p>赶紧拿手机扫一扫试试吧~<br> <a href=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_ailipay.gif\" target=\"_blank\" rel=\"external\">这里有一个失败的例子: 太大了</a></p>\n</blockquote>\n<p><strong>吐槽2: 这过程好繁琐啊，哪天能写个脚本自动化什么的，毕竟你是学Python的人啊(<em>雾</em></strong><br><br></p>\n<p><strong>Update：看来不用重复造轮子了</strong> </p>\n<blockquote>\n<p><a href=\"https://github.com/sylnsfar/qrcode\" target=\"_blank\" rel=\"external\">Python 艺术二维码生成器 (GIF动态二维码、图片二维码)</a></p>\n<p><a href=\"http://www.amazing-qrcode.com/\" target=\"_blank\" rel=\"external\">在线生成网页版</a></p>\n<p><a href=\"https://github.com/sylnsfar/qrcode_win\" target=\"_blank\" rel=\"external\">Windows版(不需要Python环境)</a></p>\n</blockquote>\n<p>貌似还在更新, 有人反馈不支持微信和支付宝的二维码, 我找到了个解决办法并提交了issue: <a href=\"https://github.com/sylnsfar/qrcode/issues/19\" target=\"_blank\" rel=\"external\">在MyQR中使用微信和支付宝二维码链接</a></p>\n<p>给出windos的info.txt示例(注释仅作说明, info.txt文件内不能出现中文):</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># an example for info.txt:</span></div><div class=\"line\">words=http://t.cn/xxx  <span class=\"comment\"># 缩短后的URL</span></div><div class=\"line\">p=<span class=\"number\">117.</span>gif  <span class=\"comment\"># 原始文件</span></div><div class=\"line\">n=new.gif  <span class=\"comment\"># 生成的文件名</span></div><div class=\"line\">v=<span class=\"number\">10</span>   <span class=\"comment\"># -v 控制边长, 范围是1至40, 数字越大边长越大, 对应生成的时间也越长, 别手贱调成40, 不知道要跑多久    </span></div><div class=\"line\">l=H  <span class=\"comment\"># -l 控制纠错水平，范围是L、M、Q、H，从左到右依次升高</span></div><div class=\"line\">c  <span class=\"comment\"># 加上参数 -c 可以使产生的图片由黑白变为彩色的</span></div><div class=\"line\">con=<span class=\"number\">1.5</span>  <span class=\"comment\">#参数-con 用以调节图片的对比度，1.0 表示原始图片，更小的值表示更低对比度，更大反之。默认为1.0。</span></div><div class=\"line\">bri=<span class=\"number\">1.3</span>  <span class=\"comment\"># 参数 -bri 用来调节图片的亮度，其余用法和取值与 -con 相同</span></div><div class=\"line\"><span class=\"comment\"># 还有d参数可以控制文件输出位置, 遗憾的是没有自定义二维码样式的参数</span></div><div class=\"line\"><span class=\"comment\"># 重要: 一个参数一行, 等号左右不要空格, 如果不使用某个参数, 则将其删去(words是必要的)</span></div><div class=\"line\"><span class=\"comment\"># 注意1: 该程序只是一个简单的打包, 测试时,有的电脑快, 有的电脑慢(原因不明)</span></div><div class=\"line\"><span class=\"comment\"># 注意2: 第一次使用可能会自动下载一些库文件,原因是程序依赖的库 imageio</span></div></pre></td></tr></table></figure>\n</code></pre><p><br></p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><p><a href=\"https://en.wikipedia.org/wiki/QR_code\" target=\"_blank\" rel=\"external\">QR code(Quick Response Code)</a></p>\n</li>\n<li><p><a href=\"http://spacekid.me/qart-code/\" target=\"_blank\" rel=\"external\">如何优雅地让人给你打钱</a></p>\n</li>\n<li><p><a href=\"https://www.chenxublog.com/2016/05/22/pic-qrcode-colorful.html\" target=\"_blank\" rel=\"external\">如何制作自定义背景的二维码？（包括动态）</a><br><br><br></p>\n</li>\n</ol>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%8B%8D%E6%A1%8C_ailipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>\n","excerpt":"<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"https://of4jd0bcc.qnssl.com/QR/alipay2.gif?imageView2/2/w/300\" alt=\"alipay.gif\"></p>","more":"<p><img src=\"https://of4jd0bcc.qnssl.com/QR/patapon_wechat.gif?imageView2/2/w/300\" alt=\"patapon_wechat\"><br><img src=\"https://of4jd0bcc.qnssl.com/QR/wechat.gif?imageView2/2/w/200\" alt=\"20\"><br><br><br></p>\n<h3 id=\"Require\"><a href=\"#Require\" class=\"headerlink\" title=\"Require\"></a>Require</h3><pre><code>1. Visual QR Codes Generator \n2. VirtualDub\n3. Format Factory\n4. PhotoShop CS6\n</code></pre><p><a href=\"http://pan.baidu.com/s/1eSmjWrS\">百度盘提取码8jjc</a><br><strong>吐槽1: 百度云没Vip叫<em>爸爸</em>都没用</strong> </p>\n<p>下载大文件速度慢的请自行下载: </p>\n<blockquote>\n<p><a href=\"http://www.pcgeshi.com/\">Format Factory</a><br>  <a href=\"http://rj.baidu.com/soft/detail/23675.html\">PhotoShop CS6下载&amp;破解</a></p>\n</blockquote>\n<p><br><br></p>\n<h3 id=\"Let’s-Do-It\"><a href=\"#Let’s-Do-It\" class=\"headerlink\" title=\"Let’s Do It\"></a>Let’s Do It</h3><h4 id=\"首先-获得个人支付宝或者微信转账的二维码并转换成url\"><a href=\"#首先-获得个人支付宝或者微信转账的二维码并转换成url\" class=\"headerlink\" title=\"首先, 获得个人支付宝或者微信转账的二维码并转换成url\"></a>首先, 获得个人支付宝或者微信转账的二维码并<a href=\"http://tool.oschina.net/qr?type=2\">转换成url</a></h4><p><img src=\"https://of4jd0bcc.qnssl.com/QR/%E5%BE%AE%E4%BF%A1%E6%89%93%E8%B5%8F.jpg?imageView2/2/w/400\" alt=\"7\"><br><br><br></p>\n<h4 id=\"找一张你喜欢的Gif\"><a href=\"#找一张你喜欢的Gif\" class=\"headerlink\" title=\"找一张你喜欢的Gif\"></a>找一张你喜欢的Gif</h4><p><img src=\"https://of4jd0bcc.qnssl.com/QR/%E7%86%8A%E6%9C%AC%E7%86%8A%E6%B3%BC%E6%B0%B4.gif\" alt=\"8\"><br><br><br></p>\n<h4 id=\"用PhotoShop转换成mp4格式\"><a href=\"#用PhotoShop转换成mp4格式\" class=\"headerlink\" title=\"用PhotoShop转换成mp4格式\"></a>用PhotoShop转换成mp4格式</h4><p> <strong>请用独显开Photoshop!</strong><br> <strong>请用独显开Photoshop!</strong><br> <strong>请用独显开Photoshop!</strong><br>重要的事情说三次<br><img src=\"https://of4jd0bcc.qnssl.com/QR/gif_mp4.png\" alt=\"9\"><br><br><br></p>\n<h4 id=\"用格式工厂将mp4转化为avi格式-输出选项-gt-视频编码-gt-MJPEG\"><a href=\"#用格式工厂将mp4转化为avi格式-输出选项-gt-视频编码-gt-MJPEG\" class=\"headerlink\" title=\"用格式工厂将mp4转化为avi格式, 输出选项 -&gt; 视频编码 -&gt; MJPEG\"></a>用格式工厂将mp4转化为avi格式, <strong>输出选项 -&gt; 视频编码 -&gt; MJPEG</strong></h4><p><img src=\"https://of4jd0bcc.qnssl.com/QR/mp4_avi.png\" alt=\"10\"><br><br><br>如果你直接把 avi 扔进 Visual QR Codes Generator里, 生成的时候它就会报错, 因为这坑爹货用的是 <strong>opencv</strong><br><br><br></p>\n<h4 id=\"打开-VirtualDub-exe，-导入那个-avi-视频（open-open-video-file）-Video-gt-Filters-gt-Add-gt-Convert-format，选择-32-Bit-RGB，点击-ok，最后点击-file-save-av-AVI-保存处理后的视频文件-这样我们就得到了导出的视频文件\"><a href=\"#打开-VirtualDub-exe，-导入那个-avi-视频（open-open-video-file）-Video-gt-Filters-gt-Add-gt-Convert-format，选择-32-Bit-RGB，点击-ok，最后点击-file-save-av-AVI-保存处理后的视频文件-这样我们就得到了导出的视频文件\" class=\"headerlink\" title=\"打开 VirtualDub.exe， 导入那个 avi 视频（open-open video file）: Video-&gt;Filters-&gt;Add-&gt;Convert format，选择 32-Bit RGB，点击 ok，最后点击 file-save av AVI 保存处理后的视频文件, 这样我们就得到了导出的视频文件\"></a>打开 VirtualDub.exe， 导入那个 avi 视频（open-open video file）: <strong>Video-&gt;Filters-&gt;Add-&gt;Convert format</strong>，选择 <strong>32-Bit RGB</strong>，点击 ok，最后点击 file-save av AVI 保存处理后的视频文件, 这样我们就得到了导出的视频文件</h4><p><img src=\"https://of4jd0bcc.qnssl.com/QR/opencv.png\" alt=\"11\"><br><br><br></p>\n<h4 id=\"将改好的avi文件与二维码合并\"><a href=\"#将改好的avi文件与二维码合并\" class=\"headerlink\" title=\"将改好的avi文件与二维码合并\"></a>将改好的avi文件与二维码合并</h4><p>在空白栏填上第一步得到的url<br>Version可修改二维码样式<br>EC Level默认H即可<br><img src=\"https://of4jd0bcc.qnssl.com/QR/modify_gif.png\" alt=\"22\"><br><br><br>接下来我们在视频压缩对话框的压缩程序选项选上<strong>全帧</strong>，然后点确认，导出视频：<br><img src=\"https://of4jd0bcc.qnssl.com/QR/quan.png\" alt=\"12\"><br><br><br>彩色勾选上, 速度可根据个人喜好调整(鬼畜什么的), 融合过程需要等待一段时间<br><img src=\"https://of4jd0bcc.qnssl.com/QR/modify_gif2.png\" alt=\"13\"><br><br><br></p>\n<h4 id=\"二维码-gt-Gif\"><a href=\"#二维码-gt-Gif\" class=\"headerlink\" title=\"二维码-&gt;Gif\"></a>二维码-&gt;Gif</h4><p>再次用到PhotoShop, 选择文件 -&gt; 导入 -&gt; 视频帧到图层<br><img src=\"https://of4jd0bcc.qnssl.com/QR/finish.png\" alt=\"14\"><br><br><br>存储为Web所用格式<br><img src=\"https://of4jd0bcc.qnssl.com/QR/finish3.png\" alt=\"23\"><br><br><br><img src=\"https://of4jd0bcc.qnssl.com/QR/finish2.png\" alt=\"21\"><br><br><br>gif速度过快可选中所有帧, 适当调整延迟时间<br><img src=\"https://of4jd0bcc.qnssl.com/QR/finish5.png\" alt=\"24\"><br><br><br>可适当调大像素, 保存为Gif<br><img src=\"https://of4jd0bcc.qnssl.com/QR/finish4.png\" alt=\"15\"><br><br></p>\n<blockquote>\n<p>赶紧拿手机扫一扫试试吧~<br> <a href=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_ailipay.gif\">这里有一个失败的例子: 太大了</a></p>\n</blockquote>\n<p><strong>吐槽2: 这过程好繁琐啊，哪天能写个脚本自动化什么的，毕竟你是学Python的人啊(<em>雾</em></strong><br><br></p>\n<p><strong>Update：看来不用重复造轮子了</strong> </p>\n<blockquote>\n<p><a href=\"https://github.com/sylnsfar/qrcode\">Python 艺术二维码生成器 (GIF动态二维码、图片二维码)</a></p>\n<p><a href=\"http://www.amazing-qrcode.com/\">在线生成网页版</a></p>\n<p><a href=\"https://github.com/sylnsfar/qrcode_win\">Windows版(不需要Python环境)</a></p>\n</blockquote>\n<p>貌似还在更新, 有人反馈不支持微信和支付宝的二维码, 我找到了个解决办法并提交了issue: <a href=\"https://github.com/sylnsfar/qrcode/issues/19\">在MyQR中使用微信和支付宝二维码链接</a></p>\n<p>给出windos的info.txt示例(注释仅作说明, info.txt文件内不能出现中文):</p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># an example for info.txt:</span></div><div class=\"line\">words=http://t.cn/xxx  <span class=\"comment\"># 缩短后的URL</span></div><div class=\"line\">p=<span class=\"number\">117.</span>gif  <span class=\"comment\"># 原始文件</span></div><div class=\"line\">n=new.gif  <span class=\"comment\"># 生成的文件名</span></div><div class=\"line\">v=<span class=\"number\">10</span>   <span class=\"comment\"># -v 控制边长, 范围是1至40, 数字越大边长越大, 对应生成的时间也越长, 别手贱调成40, 不知道要跑多久    </span></div><div class=\"line\">l=H  <span class=\"comment\"># -l 控制纠错水平，范围是L、M、Q、H，从左到右依次升高</span></div><div class=\"line\">c  <span class=\"comment\"># 加上参数 -c 可以使产生的图片由黑白变为彩色的</span></div><div class=\"line\">con=<span class=\"number\">1.5</span>  <span class=\"comment\">#参数-con 用以调节图片的对比度，1.0 表示原始图片，更小的值表示更低对比度，更大反之。默认为1.0。</span></div><div class=\"line\">bri=<span class=\"number\">1.3</span>  <span class=\"comment\"># 参数 -bri 用来调节图片的亮度，其余用法和取值与 -con 相同</span></div><div class=\"line\"><span class=\"comment\"># 还有d参数可以控制文件输出位置, 遗憾的是没有自定义二维码样式的参数</span></div><div class=\"line\"><span class=\"comment\"># 重要: 一个参数一行, 等号左右不要空格, 如果不使用某个参数, 则将其删去(words是必要的)</span></div><div class=\"line\"><span class=\"comment\"># 注意1: 该程序只是一个简单的打包, 测试时,有的电脑快, 有的电脑慢(原因不明)</span></div><div class=\"line\"><span class=\"comment\"># 注意2: 第一次使用可能会自动下载一些库文件,原因是程序依赖的库 imageio</span></div></pre></td></tr></table></figure>\n</code></pre><p><br></p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><p><a href=\"https://en.wikipedia.org/wiki/QR_code\">QR code(Quick Response Code)</a></p>\n</li>\n<li><p><a href=\"http://spacekid.me/qart-code/\">如何优雅地让人给你打钱</a></p>\n</li>\n<li><p><a href=\"https://www.chenxublog.com/2016/05/22/pic-qrcode-colorful.html\">如何制作自定义背景的二维码？（包括动态）</a><br><br><br></p>\n</li>\n</ol>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%8B%8D%E6%A1%8C_ailipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>"},{"title":"GSM Sniffer小测试","date":"2016-10-19T05:59:29.000Z","_content":"最近看到osmocom-bb项目，觉得很有趣，硬件的嗅探成本较之前已经低的难以想象，遂动手做一遍\n\n## 关于Kali配置环境的一些问题\n>网上大部分教程都是用到的最新的gnu-arm-build.3脚本，但这个脚本编译的gcc版本是4.8.2，在Kali2下\ngcc -v，会发现gcc的版本是4.9.2，即便编译成功，会出现如下问题：Osmocom-bb的Master分支能扫描到基站，但wireshark捕获到的全是GSMTAP，没有GSM_SMS。Luca/gsmmap分支则会扫描不到基站。Ubuntu12.04的gcc正好是4.5.2，因此在Ubuntu12.04下，我们用gnu-arm-build.2的脚本就能编译成功\n\n##当然，解决办法还是有的:\n<!--more-->\n\n## 修改osmocom-bb以下五个文件\n    src/target/firmware/board/compal/highram.lds\n    src/target/firmware/board/compal/ram.lds\n    src/target/firmware/board/compal_e88/flash.lds\n    src/target/firmware/board/compal_e88/loader.lds\n    src/target/firmware/board/mediatek/ram.lds\n\n## 找到每个文件中的 KEEP(*(SORT(.ctors))) 一行，在其下面加入新的一行 KEEP(*(SORT(.init_array)))\n例如：\n\n    LONG(SIZEOF(.ctors) / 4 - 2)\n    /* ctor pointers */\n    KEEP(*(SORT(.ctors)))\n    KEEP(*(SORT(.init_array)))\n    /* end of list */\n    LONG(0)\n\n![fix_cell_log](https://of4jd0bcc.qnssl.com/GsmSniffer/fix_cell_log.png)\n\n## 执行编译\n    cd /root/armtoolchain/osmocom-bb/src\n    make -e CROSS_TOOL_PREFIX=arm-none-eabi-\n\n\n</br>\n\n## 环境配置\n虚拟机Vmware + Ubuntu12.04 + c118 + 数据连接线 + FT232RL模块\nUbuntu12.04:[下载地址](magnet:?xt=urn:btih:9645EAC5BE3309982D6BCD559DDB30E8A7D163C9 c118)\n种子文件:[pan.baidu.com/s/1gfjoZ3l](http://pan.baidu.com/s/1gfjoZ3l)密码:jjth\nC118:\n![C118](https://of4jd0bcc.qnssl.com/GsmSniffer/C118.jpg?imageView2/1/w/200/h/200)\n\n数据连接线:\n![数据线1](https://of4jd0bcc.qnssl.com/GsmSniffer/%E6%95%B0%E6%8D%AE%E7%BA%BF.jpg?imageView2/1/w/200/h/200)\n![数据线2](https://of4jd0bcc.qnssl.com/GsmSniffer/%E6%95%B0%E6%8D%AE%E7%BA%BF%202.jpg?imageView2/1/w/200/h/200)\n\nFT232RL模块:\n![FTR232R](https://of4jd0bcc.qnssl.com/GsmSniffer/FT232RL.jpg?imageView2/1/w/200/h/200)\n\nPS.记住所有操作在sudo -s root权限下操作。\nUbuntu 的软件源配置文件是 /etc/apt/sources.list。将系统自带的该文件做个备份，将该文件替换为下面内容，即可使用 TUNA 的软件源镜像。\n    \n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise main multiverse restricted universe\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-backports main multiverse restricted universe\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-proposed main multiverse restricted universe\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-security main multiverse restricted universe\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-updates main multiverse restricted universe\n    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise main multiverse restricted universe\n    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-backports main multiverse restricted universe\n    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-proposed main multiverse restricted universe\n    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-security main multiverse restricted universe\n    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-updates main multiverse restricted universe\n\n>apt-get update\n\n## 环境依赖\n    sudo apt-get install aptitude libtalloc2 libtalloc2-dbg python-talloc python-talloc-dbg python-talloc-dev libtalloc-dev automake libusb-dev libpcsclite-dev libusb-0.1-4 libpcsclite1 libccid pcscd libtool shtool autoconf git-core pkg-config make gcc build-essential libgmp3-dev libmpfr-dev libx11-6 libx11-dev texinfo flex bison libncurses5 libncurses5-dbg libncurses5-dev libncursesw5 libncursesw5-dbg libncursesw5-dev zlibc zlib1g-dev libmpfr4 libmpc-dev libpcsclite-dev libfftw3-dev libfftw3-doc\n\n\n    aptitude install libtool shtool automake autoconf git-core pkg-config make gcc\n\n## 配置文件\n这里建议用迅雷下载好再拖到虚拟机里面\n打包下载放到/root目录下即可[pan.baidu.com/s/1i5sGAKt](http://pan.baidu.com/s/1i5sGAKt) 密码: gvuv\n\n    http://bb.osmocom.org/trac/raw-attachment/wiki/GnuArmToolchain/gnu-arm-build.2.sh\n    http://ftp.gnu.org/gnu/gcc/gcc-4.5.2/gcc-4.5.2.tar.bz2\n    http://ftp.gnu.org/gnu/binutils/binutils-2.21.1a.tar.bz2\n    ftp://sources.redhat.com/pub/newlib/newlib-1.19.0.tar.gz\n\n把下载好的3个包放到src目录下\n目录结构\n![目录结构](https://of4jd0bcc.qnssl.com/GsmSniffer/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png)\n\n    cd /root/armtoolchain\n    chmod +x gnu-arm-build.2.sh\n    ./gnu-arm-build.2.sh\n\n大约20分钟后出现下面代码代表编译完成\n> Build complete! Add /root/arm_toolchain/install/bin to your PATH to make arm-elf-gcc and friends accessible directly\n\n把以下代码加到~/.bashrc的最后一行\n>export PATH=$PATH:/root/armtoolchain/install/bin\n\n执行一下让其生效\n>source ~/.bashrc\n\n当你在命令行输入arm再按两下tab出现下图的时候，代表编译环境配置好了\n![arm链](https://of4jd0bcc.qnssl.com/GsmSniffer/arm%E9%93%BE.png)\n## libosmocore## \n    cd /root\n    git clone git://git.osmocom.org/libosmocore.git\n    cd libosmocore/\n    autoreconf -i\n    ./configure\n    make\n    sudo make install\n    sudo ldconfig -i\n\n这里可能有个坑，执行完上述代码后在命令行输入arm再按两下tab的时候，arm链会莫名其妙的消失，需要再去~/.bashrc再配置一遍,如果arm链正常就不需要配置了\n## Osmocom-bb\n    cd /root\n    git clone git://git.osmocom.org/osmocom-bb.git\n    cd osmocom-bb\n    git checkout --track origin/luca/gsmmap #选择luca/gsmmap分支 \n    cd src\n    make #交叉编译\n\n如果没什么问题，软件环境和固件就都编译好了。\nUnuntu 12.04自带FT232R驱动，所以直接连接就能使用，不需要再装驱动。\n## 加载Firmware到手机raw中## \n    cd /root/armtoolchain/osmocom-bb/src/host/osmocon ./osmocon -m c123xor -p /dev/ttyUSB0 ../../target/firmware/board/compal_e88/layer1.compalram.bin\n\n上面命令需要在关机下执行，然后短按开机键\n手机屏幕显示Layer 1 osmocom-bb 字样就表示成功了\n![Layer1](https://of4jd0bcc.qnssl.com/GsmSniffer/Layer1.jpg?imageView2/1/w/200/h/200)\n## 扫描基站\n    cd /root/armtoolchain/osmocom-bb/src/host/layer23/src/misc/\n    ./cell_log –O\n\n![ARFCN](https://of4jd0bcc.qnssl.com/GsmSniffer/ARFCN.jpg?imageView2/1/w/200/h/200)\n\nTHE_ATFCN_ID就是扫描到的日志中参数ARFCN的值，尽可能选信号好的\n\n    cd /root/armtoolchain/osmocom-bb/src/host/layer23/src/misc/\n    ./ccch_scan -i 127.0.0.1 -a THE_ATFCN_ID\n\n上图第一个基站的ARFCN就是40\n\n苹果手机可以执行：`*3001#12345#*`\n进入工程模式后，选择GSM Cell Environment-&gt;GSM Cell Info-&gt;GSM Serving Cell,就可以看到目前手机连接的基站ARFCN值了，应该在第二步中，也能看到这个ID存在。\n\n更多姿势请看这里:[osmocom-bb中cell_log的多种使用姿势](http://www.92ez.com/?action=show&amp;id=23342)\n\n因为osmocomBB执行之后默认会在本地开启4729端口，这时候的GSM协议已经被封装上了TCP-IP，可以在本地用wireshark抓到，所以我们使用wireshark去监听4729的端口\nwireshark打开错误的话需要到/usr/share/wireshark/init.lua文件注释掉倒数第二行\n> wireshark -k -i lo -f ’port 4729\n\n在wireshark中过滤gsm_sms协议数据，过滤之后得到的数据里面就包含短信的明文信息\n![短信拦截](https://of4jd0bcc.qnssl.com/GsmSniffer/%E7%9F%AD%E4%BF%A1%E6%8D%95%E8%8E%B7.jpg)\n\n## Some Questions\nGSM sniffer嗅探一段时间出错问题的解决方法:\n这里我分成两种情况来说。\n当你看到此文时你可能已经成功嗅探，只是没有打补丁。意思是你已经配置好了环境，那么打补丁就更简单了。首先你需要删掉\n\n> osmocom-bb/src/host/layer23/src/misc/app_ccch_scan.c\n> osmocom-bb/src/host/layer23/src/misc/app_ccch_scan.o\n\n这两个文件，删除之后下载补丁文件app_ccch_scan.c文件，链接: [http://pan.baidu.com/s/1bpDPrDt](http://pan.baidu.com/s/1bpDPrDt) 密码: 3wvp\n下载此文件放入osmocom-bb/src/host/layer23/src/misc/目录下，如果出现没有权限的错误，请赋予权限。然后切换到目录下执行编译\n\n    cd osmocom-bb/src/\n    make\n\n如果出现git的版本问题，执行下这个命令\n>git checkout -f\n\n然后再编译，编译完成后就可以了。\n\n第二种情况是你看到这篇文章后打算重新来一遍，那么你前面的步骤依旧，直到你执行了这句\n\n>git checkout --track origin/luca/gsmmap\n\n如果出现git版本问题没有成功，请执行上面说到的那个git版本问题解决的命令再切换分支，切换分支成功之后，下载补丁文件覆盖掉原有的文件，然后执行make编译，编译完成即可。\n\n## 进阶\n![多机嗅探](https://of4jd0bcc.qnssl.com/GsmSniffer/%E5%A4%9A%E6%9C%BA%E5%97%85%E6%8E%A2.jpg)\n一台C118一次只能针对一个ARFCN进行拦截而且每次嗅探需要打开多个窗口\n要是能写个自动化的嗅探脚本，再保存到数据库在Web界面实时展示信息就好了\n是的。大牛们已经做出多机嗅探和Web展示的脚本。这里要膜拜一下~\n\n## WEB界面搭建配置\n### Debian:\n    sudo apt-get install mysql-server python-mysqldb\n\n### PHP:\n    apt-get install php5 php-pear php5-mysql\n    service apache2 restart\n\n### Linux Fedora, CentOS系统：\n    yum install MySQL-python\n\n\n## 下载web界面程序\n链接:[ http://pan.baidu.com/s/1nuHYzZb](http://pan.baidu.com/s/1nuHYzZb) 密码: 43h4\n> getusb.sh\n> m.py\n> smshack_nosql.py\n> smshack.sql\n\n以上4个文件放在root文件夹下\nsms_web文件夹复制到/var/www/下\n\n## 安装phpadmin,按提示配置MySql数据库\n    sudo apt-get install phpmyadmin\n    cd /var/www/html\n    sudo ln -s /usr/share/phpmyadmin phpmyadmin\n\n\n## 导入数据库\n打开浏览器，输入http://localhost/phpmyadmin\n通过界面导入smshack.sql![导入sql](https://of4jd0bcc.qnssl.com/GsmSniffer/%E5%AF%BC%E5%85%A5smssql.png)\n\n## 修改/var/www/sms_web/bin下的sms.php文件的MySql用户名密码,否则会刷新不出SMS信息#\n![sms_php](https://of4jd0bcc.qnssl.com/GsmSniffer/sms_php.png)\n\n## 修改m.py设置登陆MySql的用户名密码、数据库名称\n![m脚本](https://of4jd0bcc.qnssl.com/GsmSniffer/m.png)\n执行\n> python m.py\n\n并按提示操作\n\n## 浏览器访问http://localhost/sms_web\n![web](https://of4jd0bcc.qnssl.com/GsmSniffer/web.jpg)\n\n## 关于嗅探\n因为我们买的便宜货，每个手机只能嗅探一个信道，具体一些的，可以参考下面的图（我们现在只能抓Downlink的数据包）：\n![channel](https://of4jd0bcc.qnssl.com/GsmSniffer/ARFCN_Channel.jpg)\n\n因为想要Sniffer Uplink的包，要修改硬件，C118主板上的RX filters要换掉，换成我们需要的HHM1625&amp;&amp;HHM1623C1滤波器组件，才能抓Uplink的数据包。\n有关信道号ARFCN的问题，可以参考下面的图：\n![ARFCN_channel](https://of4jd0bcc.qnssl.com/GsmSniffer/channel.jpg)\n\n## Tips\n>现在2G短信越来越少了，多等等会有的。理论上话音一样能够被监听及解码，只是涉及技术更为复杂。\nCP210x的接线，RX和TX有可能需要对调。运行cp210x-program需要先安装ibusb-dev，如果输出是“No devices found”或“Unable to send request, 3709 result=-110”，则有问题\n*可以参考：CP210x Tutorial\n\n![再给力点](https://of4jd0bcc.qnssl.com/GsmSniffer/%E8%83%BD%E4%B8%8D%E8%83%BD%E5%86%8D%E7%BB%99%E5%8A%9B%E7%82%B9.jpg)\n\n## 后期计划\n捕获上行包\n因为想要嗅探Uplink的包，要修改硬件，C118主板上的RX filters要换掉，换成我们需要的HHM1625&amp;&amp;HHM1623C1滤波器组件，才能抓Uplink的数据包。要使手机能够成为『passive uplink sniffer』，必须动到电烙铁，替换掉RX filters。\n![过滤器](https://of4jd0bcc.qnssl.com/GsmSniffer/%E8%BF%87%E6%BB%A4%E5%99%A8.jpg)\n替换前：\n![更改前](https://of4jd0bcc.qnssl.com/GsmSniffer/before.jpg)\n摘掉后：\n![摘掉后](https://of4jd0bcc.qnssl.com/GsmSniffer/change.jpg)\n替换后：\n![替换](https://of4jd0bcc.qnssl.com/GsmSniffer/after.jpg)\n## 使用OsmocomBB RSSI monitor查看信号强弱：## \n    ./osmocom-bb/src/host/osmocon/osmocon -p /dev/ttyUSB0 -m c123xor -c ./osmocom-bb/src/target/firmware/board/compal_e88/rssi.highram.bin ./osmocom-bb/src/target/firmware/board/compal_e88/chainload.compalram.bin\n\n![rssi](https://of4jd0bcc.qnssl.com/GsmSniffer/rssi.jpg)\n由于RSSI太大，不便于像OsmocomBB那样直接加载，所以要先用-C参数加载一个小的chainloader程序去加载我们真正的RSSI Payload程序。\n参考：http://bb.osmocom.org/trac/wiki/rssi.bin\n\n多机嗅探强烈建议看:[如何让GSM Sniffer变得更加智能化](http://www.92ez.com/?action=show&amp;id=23363)\n\n## GSM网络相关知识\n>推荐看看 GSM network and services 2G1723 2006\n![MS_BSS](https://of4jd0bcc.qnssl.com/GsmSniffer/MS_BSS.jpg)\n\n从协议图中得知，移动设备(MS)和基站(BTS)间使用Um接口，最底层就是刷入手机的layer1物理传输层，之上分别是layer2数据链路层和layer3网络层。\n![LAPDm](https://of4jd0bcc.qnssl.com/GsmSniffer/LAPDm.jpg)\n位于图中layer2的LAPDm，是一种保证数据传输不会出错的协议。一个LAPDm帧共有23个字节（184个比特），提供分片管理控制等功能。\nlayer3的协议则可以分为RR/MM/CM三种，这里只列出嗅探相关的功能：\n>RR(Radio Resource Management)：channel, cell（控制等信息，可以忽略）\nMM(Mobility Management)：Location updating（如果需要接收方号码，需要关注这个动作）\nCM(Connection Management)：Call Control(语音通话时的控制信息，可以知道何时开始捕获TCH),SMS（这里的重点）\n\n![Layer3](https://of4jd0bcc.qnssl.com/GsmSniffer/Layer3.jpg)\n参考GSM的文档 TS 04.06 得知 LAPDm 的Address field字段中，定义了 3.3.3 Service access point identifier (SAPI)。SAPI=3就是我们要的Short message service。\n使用tcpdump配合show_gsmtap_sms.py脚本在console列出短信明文。\n>tcpdump -l -ilo -nXs0 udp and port 4729 | python2 -u show_gsmtap_sms.py\n\n## 一些名词解释## \n> MS：Mobile Station，移动终端；\n> IMSI：International Mobile Subscriber Identity，国际移动用户标识号，是TD系统分给用户的唯一标识号，它存储在SIM卡、HLR/VLR中，最多由15个数字组成；\n> MCC：Mobile Country Code，是移动用户的国家号，中国是460；\n> MNC：Mobile Network Code ，是移动用户的所属PLMN网号，中国移动为00、02，中国联通为01；\n> MSIN：Mobile Subscriber Identification Number，是移动用户标识；\n> NMSI：National Mobile Subscriber Identification，是在某一国家内MS唯一的识别码；\n> BTS：Base Transceiver Station，基站收发器；\n> BSC：Base Station Controller，基站控制器；\n> MSC：Mobile Switching Center，移动交换中心。移动网络完成呼叫连接、过区切换控制、 无线信道管理等功能的设备，同时也是移动网与公用电话交换网(PSTN)、综合业务数字网(ISDN)等固定网的接口设备；\n> HLR：Home location register。保存用户的基本信息，如你的SIM的卡号、手机号码、签约信息等，和动态信息，如当前的位置、是否已经关机等；\n> VLR：Visiting location register，保存的是用户的动态信息和状态信息，以及从HLR下载的用户的签约信息；\n> CCCH：Common Control CHannel，公共控制信道。是一种“一点对多点”的双向控制信道，其用途是在呼叫接续阶段，传输链路连接所需要的控制信令与信息。\n\n## GSM Sniffer 嗅探的一些疑惑解答:\n### 为何只有改过滤波器的机器才能嗅探到上行的短信？\n>首先，我们可以站在手机制造商的角度去看这个问题。\n作为一个手机，应该具备的功能是接收基站发给自己的信号，以及主动向基站发送信号。手机与基站的信号传递分为上行和下行。下行就是基站下发到手机上的信号，上行就是手机发往基站的信号。手机收发短信的时候并不需要接收周围其他手机的信号，其他手机爱发什么发什么，管我屁事。上行频率跟下行频率是不同的。\n手机制造商在制造手机的时候只 需要手机支持两种频率，第一，基站发送给手机的下行频率。我们嗅探下行，其实就是因为手机本身可以接收下行的频率。那么我们再想一下，我们需要嗅探上行的 短信，该怎么办呢？上行是手机发往基站的信号，我们只要让手机能接收上行的频率就可以了。\n对，就是这样。暂且我们将手机想象成一个小型基站，其实在发短信这个过程中，手机确实充当的是发射台的角色，基站则变身为接收端，如果此时我们的手机可以接收上行频率，那么我们就可以嗅探上行短信了。但是手机本身是不能接收上行频率的，因为手机的本质工作也不需要这个。\n那么，我们需要支持上行频率该怎么办呢？没错，就是修改手机的滤波器。滤波器，顾名思义，就是过滤电磁波的原件，空气中电磁波那么多，我们需要的只是一个频段的频率，所以，滤波器就把接收到的所有的信号过滤，只需要GSM 频段的电磁波。我们都知道，GSM信号的频率是有一个范围的，不同国家之间啊也有差异。但是基本上是在850Mhz到900Mhz之间这一段。上行频率不在这个频段。我们修改滤波器，将能够接收的频率范围扩宽，把上行频率的范围包含进来，这样我们既可以嗅探上行，也可以嗅探下行了。\n这在RTL-SDR中是一样的，SDR接收的频率范围比较广，包含了GSM上行和下行的所有频段，所以SDR也可以用来做GSM Sniffer。\n\n### 问题一：改过的机子搜索到的基站好少，而且信号差很多，是不是改机把主板改坏了？\n>解释：这个问题是最常见的，很多朋友在拿到改好的机子之后测试普遍有这个感觉，改过的机子跟没改的机子进行对比，很明显就能发现，搜索到的基站数量并没有没改的多。而且信号衰减也严重。信号衰减是很正常的。这里得说到改机的作用。\n\n### 我们为何要改机呢？\n>很多朋友都没有去思考这个问题。不改机为什么收不到上行呢？博主在这要说的是，既然是做学问，搞研究，爱折腾，就应该去问一下自己这些问题，而不是看到网上有人说改机可嗅探上行就觉得一定要改机，改机出问题了找不到答案就开始各种问。与其花费大量时间去寻找信号衰减的答案，还不如先思考些改机的原理。在这块很多朋友做的还是不够啊。\n博主在一开始就说到了修改滤波器可以收到上行。修改滤波器的目的就是扩宽接收频率的范围，那么问题来了，接收的范围越大，接收到的电波信号越多，那么噪音就越多，什么是噪音呢？噪音就是指的与自己需要的不相关的东西，再加上我们改机的时候拆除了主板上的屏蔽盖，很容易受到各种电磁干扰，所以会导致信号衰减严重。这并不是因为手机主板的问题。有的时候选用的滤波器原件品质也可能会影响到信号。博主改机目前能达到的水平是信号衰减控制在5db~12db之间。\n\n### 问题二：为什么我嗅探了好久都没收到上行短信，或者为何我收到的上行短信数量很少呢？\n>解释：这个问题也不难想通。你想一下，基站对手机是一对多的关系，单位时间里面一个基站发出来的短信少则几十条，多则几万条，平均分配到每个信道每个频点上也不算少。\n而对于上行来说，博主在开始就介绍了上行嗅探的原理，上行是手机对基站，一对一的关系，试想一下，如果你周围同时有几万人在发短信，而且是在向同一个基站发送短信，而且这个距离你手机接收上行信号没有问题，那么，你接收到的上行短信肯不比下行的少。问题是这种情况现实中有吗？答案是否。现实中不可能有几万人在你周围同时向一个基站发短信。况且，你的手机接收别人的手机信号，距离也是有限制的。\n我们在接收下行的时候，基站能够覆盖一大片区域，是因为他的功率非常大。而手机发短信的时候功率是非常小的，你手机能接收到上行信号的距离非常有限。这就导致了接收上行短信的数量非常少。而不是因为手机本身有问题导致的。\n希望我的解释能够让你眼前一亮，豁然开朗。\n\n## 参考文献## \n1.[https://github.com/osmocom/osmocom-bb](https://github.com/osmocom/osmocom-bb)\n2.[http://bb.osmocom.org/trac/wiki/TitleIndex](http://bb.osmocom.org/trac/wiki/TitleIndex)\n3.[http://wulujia.com/2013/11/10/OsmocomBB-Guide/](http://wulujia.com/2013/11/10/OsmocomBB-Guide/)\n4.[https://blog.hqcodeshop.fi/archives/253-iPhone-cell-Field-Test-mode.html](https://blog.hqcodeshop.fi/archives/253-iPhone-cell-Field-Test-mode.html)\n5.[http://bbs.pediy.com/showthread.php?t=182574](http://bbs.pediy.com/showthread.php?t=182574)\n6.[http://www.92ez.com/?action=show&amp;id=23342](http://www.92ez.com/?action=show&amp;id=23342)\n7.[https://www.nigesb.com/gsm-hacker-sheet.html](https://www.nigesb.com/gsm-hacker-sheet.html)\n8.[http://le4f.net/post/post/gsm-sniffer-hacking-toolkits-demo](http://le4f.net/post/post/gsm-sniffer-hacking-toolkits-demo)\n9.[http://le4f.net/post/post/compile-osmocombb&amp;problems-about-gsm-sniffer](http://le4f.net/post/post/compile-osmocombb&amp;problems-about-gsm-sniffer)\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n[99]:https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E7%86%8A%E6%9C%AC%E7%86%8A%E8%B6%85%E5%B8%85_alipay.gif?imageView2/1/w/200/h/200\n[100]:https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200","source":"_posts/GSM-Sniffer小测试.md","raw":"---\ntitle: GSM Sniffer小测试\ndate: 2016-10-19 13:59:29\ntags: Hack\n---\n最近看到osmocom-bb项目，觉得很有趣，硬件的嗅探成本较之前已经低的难以想象，遂动手做一遍\n\n## 关于Kali配置环境的一些问题\n>网上大部分教程都是用到的最新的gnu-arm-build.3脚本，但这个脚本编译的gcc版本是4.8.2，在Kali2下\ngcc -v，会发现gcc的版本是4.9.2，即便编译成功，会出现如下问题：Osmocom-bb的Master分支能扫描到基站，但wireshark捕获到的全是GSMTAP，没有GSM_SMS。Luca/gsmmap分支则会扫描不到基站。Ubuntu12.04的gcc正好是4.5.2，因此在Ubuntu12.04下，我们用gnu-arm-build.2的脚本就能编译成功\n\n##当然，解决办法还是有的:\n<!--more-->\n\n## 修改osmocom-bb以下五个文件\n    src/target/firmware/board/compal/highram.lds\n    src/target/firmware/board/compal/ram.lds\n    src/target/firmware/board/compal_e88/flash.lds\n    src/target/firmware/board/compal_e88/loader.lds\n    src/target/firmware/board/mediatek/ram.lds\n\n## 找到每个文件中的 KEEP(*(SORT(.ctors))) 一行，在其下面加入新的一行 KEEP(*(SORT(.init_array)))\n例如：\n\n    LONG(SIZEOF(.ctors) / 4 - 2)\n    /* ctor pointers */\n    KEEP(*(SORT(.ctors)))\n    KEEP(*(SORT(.init_array)))\n    /* end of list */\n    LONG(0)\n\n![fix_cell_log](https://of4jd0bcc.qnssl.com/GsmSniffer/fix_cell_log.png)\n\n## 执行编译\n    cd /root/armtoolchain/osmocom-bb/src\n    make -e CROSS_TOOL_PREFIX=arm-none-eabi-\n\n\n</br>\n\n## 环境配置\n虚拟机Vmware + Ubuntu12.04 + c118 + 数据连接线 + FT232RL模块\nUbuntu12.04:[下载地址](magnet:?xt=urn:btih:9645EAC5BE3309982D6BCD559DDB30E8A7D163C9 c118)\n种子文件:[pan.baidu.com/s/1gfjoZ3l](http://pan.baidu.com/s/1gfjoZ3l)密码:jjth\nC118:\n![C118](https://of4jd0bcc.qnssl.com/GsmSniffer/C118.jpg?imageView2/1/w/200/h/200)\n\n数据连接线:\n![数据线1](https://of4jd0bcc.qnssl.com/GsmSniffer/%E6%95%B0%E6%8D%AE%E7%BA%BF.jpg?imageView2/1/w/200/h/200)\n![数据线2](https://of4jd0bcc.qnssl.com/GsmSniffer/%E6%95%B0%E6%8D%AE%E7%BA%BF%202.jpg?imageView2/1/w/200/h/200)\n\nFT232RL模块:\n![FTR232R](https://of4jd0bcc.qnssl.com/GsmSniffer/FT232RL.jpg?imageView2/1/w/200/h/200)\n\nPS.记住所有操作在sudo -s root权限下操作。\nUbuntu 的软件源配置文件是 /etc/apt/sources.list。将系统自带的该文件做个备份，将该文件替换为下面内容，即可使用 TUNA 的软件源镜像。\n    \n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise main multiverse restricted universe\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-backports main multiverse restricted universe\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-proposed main multiverse restricted universe\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-security main multiverse restricted universe\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-updates main multiverse restricted universe\n    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise main multiverse restricted universe\n    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-backports main multiverse restricted universe\n    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-proposed main multiverse restricted universe\n    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-security main multiverse restricted universe\n    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-updates main multiverse restricted universe\n\n>apt-get update\n\n## 环境依赖\n    sudo apt-get install aptitude libtalloc2 libtalloc2-dbg python-talloc python-talloc-dbg python-talloc-dev libtalloc-dev automake libusb-dev libpcsclite-dev libusb-0.1-4 libpcsclite1 libccid pcscd libtool shtool autoconf git-core pkg-config make gcc build-essential libgmp3-dev libmpfr-dev libx11-6 libx11-dev texinfo flex bison libncurses5 libncurses5-dbg libncurses5-dev libncursesw5 libncursesw5-dbg libncursesw5-dev zlibc zlib1g-dev libmpfr4 libmpc-dev libpcsclite-dev libfftw3-dev libfftw3-doc\n\n\n    aptitude install libtool shtool automake autoconf git-core pkg-config make gcc\n\n## 配置文件\n这里建议用迅雷下载好再拖到虚拟机里面\n打包下载放到/root目录下即可[pan.baidu.com/s/1i5sGAKt](http://pan.baidu.com/s/1i5sGAKt) 密码: gvuv\n\n    http://bb.osmocom.org/trac/raw-attachment/wiki/GnuArmToolchain/gnu-arm-build.2.sh\n    http://ftp.gnu.org/gnu/gcc/gcc-4.5.2/gcc-4.5.2.tar.bz2\n    http://ftp.gnu.org/gnu/binutils/binutils-2.21.1a.tar.bz2\n    ftp://sources.redhat.com/pub/newlib/newlib-1.19.0.tar.gz\n\n把下载好的3个包放到src目录下\n目录结构\n![目录结构](https://of4jd0bcc.qnssl.com/GsmSniffer/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png)\n\n    cd /root/armtoolchain\n    chmod +x gnu-arm-build.2.sh\n    ./gnu-arm-build.2.sh\n\n大约20分钟后出现下面代码代表编译完成\n> Build complete! Add /root/arm_toolchain/install/bin to your PATH to make arm-elf-gcc and friends accessible directly\n\n把以下代码加到~/.bashrc的最后一行\n>export PATH=$PATH:/root/armtoolchain/install/bin\n\n执行一下让其生效\n>source ~/.bashrc\n\n当你在命令行输入arm再按两下tab出现下图的时候，代表编译环境配置好了\n![arm链](https://of4jd0bcc.qnssl.com/GsmSniffer/arm%E9%93%BE.png)\n## libosmocore## \n    cd /root\n    git clone git://git.osmocom.org/libosmocore.git\n    cd libosmocore/\n    autoreconf -i\n    ./configure\n    make\n    sudo make install\n    sudo ldconfig -i\n\n这里可能有个坑，执行完上述代码后在命令行输入arm再按两下tab的时候，arm链会莫名其妙的消失，需要再去~/.bashrc再配置一遍,如果arm链正常就不需要配置了\n## Osmocom-bb\n    cd /root\n    git clone git://git.osmocom.org/osmocom-bb.git\n    cd osmocom-bb\n    git checkout --track origin/luca/gsmmap #选择luca/gsmmap分支 \n    cd src\n    make #交叉编译\n\n如果没什么问题，软件环境和固件就都编译好了。\nUnuntu 12.04自带FT232R驱动，所以直接连接就能使用，不需要再装驱动。\n## 加载Firmware到手机raw中## \n    cd /root/armtoolchain/osmocom-bb/src/host/osmocon ./osmocon -m c123xor -p /dev/ttyUSB0 ../../target/firmware/board/compal_e88/layer1.compalram.bin\n\n上面命令需要在关机下执行，然后短按开机键\n手机屏幕显示Layer 1 osmocom-bb 字样就表示成功了\n![Layer1](https://of4jd0bcc.qnssl.com/GsmSniffer/Layer1.jpg?imageView2/1/w/200/h/200)\n## 扫描基站\n    cd /root/armtoolchain/osmocom-bb/src/host/layer23/src/misc/\n    ./cell_log –O\n\n![ARFCN](https://of4jd0bcc.qnssl.com/GsmSniffer/ARFCN.jpg?imageView2/1/w/200/h/200)\n\nTHE_ATFCN_ID就是扫描到的日志中参数ARFCN的值，尽可能选信号好的\n\n    cd /root/armtoolchain/osmocom-bb/src/host/layer23/src/misc/\n    ./ccch_scan -i 127.0.0.1 -a THE_ATFCN_ID\n\n上图第一个基站的ARFCN就是40\n\n苹果手机可以执行：`*3001#12345#*`\n进入工程模式后，选择GSM Cell Environment-&gt;GSM Cell Info-&gt;GSM Serving Cell,就可以看到目前手机连接的基站ARFCN值了，应该在第二步中，也能看到这个ID存在。\n\n更多姿势请看这里:[osmocom-bb中cell_log的多种使用姿势](http://www.92ez.com/?action=show&amp;id=23342)\n\n因为osmocomBB执行之后默认会在本地开启4729端口，这时候的GSM协议已经被封装上了TCP-IP，可以在本地用wireshark抓到，所以我们使用wireshark去监听4729的端口\nwireshark打开错误的话需要到/usr/share/wireshark/init.lua文件注释掉倒数第二行\n> wireshark -k -i lo -f ’port 4729\n\n在wireshark中过滤gsm_sms协议数据，过滤之后得到的数据里面就包含短信的明文信息\n![短信拦截](https://of4jd0bcc.qnssl.com/GsmSniffer/%E7%9F%AD%E4%BF%A1%E6%8D%95%E8%8E%B7.jpg)\n\n## Some Questions\nGSM sniffer嗅探一段时间出错问题的解决方法:\n这里我分成两种情况来说。\n当你看到此文时你可能已经成功嗅探，只是没有打补丁。意思是你已经配置好了环境，那么打补丁就更简单了。首先你需要删掉\n\n> osmocom-bb/src/host/layer23/src/misc/app_ccch_scan.c\n> osmocom-bb/src/host/layer23/src/misc/app_ccch_scan.o\n\n这两个文件，删除之后下载补丁文件app_ccch_scan.c文件，链接: [http://pan.baidu.com/s/1bpDPrDt](http://pan.baidu.com/s/1bpDPrDt) 密码: 3wvp\n下载此文件放入osmocom-bb/src/host/layer23/src/misc/目录下，如果出现没有权限的错误，请赋予权限。然后切换到目录下执行编译\n\n    cd osmocom-bb/src/\n    make\n\n如果出现git的版本问题，执行下这个命令\n>git checkout -f\n\n然后再编译，编译完成后就可以了。\n\n第二种情况是你看到这篇文章后打算重新来一遍，那么你前面的步骤依旧，直到你执行了这句\n\n>git checkout --track origin/luca/gsmmap\n\n如果出现git版本问题没有成功，请执行上面说到的那个git版本问题解决的命令再切换分支，切换分支成功之后，下载补丁文件覆盖掉原有的文件，然后执行make编译，编译完成即可。\n\n## 进阶\n![多机嗅探](https://of4jd0bcc.qnssl.com/GsmSniffer/%E5%A4%9A%E6%9C%BA%E5%97%85%E6%8E%A2.jpg)\n一台C118一次只能针对一个ARFCN进行拦截而且每次嗅探需要打开多个窗口\n要是能写个自动化的嗅探脚本，再保存到数据库在Web界面实时展示信息就好了\n是的。大牛们已经做出多机嗅探和Web展示的脚本。这里要膜拜一下~\n\n## WEB界面搭建配置\n### Debian:\n    sudo apt-get install mysql-server python-mysqldb\n\n### PHP:\n    apt-get install php5 php-pear php5-mysql\n    service apache2 restart\n\n### Linux Fedora, CentOS系统：\n    yum install MySQL-python\n\n\n## 下载web界面程序\n链接:[ http://pan.baidu.com/s/1nuHYzZb](http://pan.baidu.com/s/1nuHYzZb) 密码: 43h4\n> getusb.sh\n> m.py\n> smshack_nosql.py\n> smshack.sql\n\n以上4个文件放在root文件夹下\nsms_web文件夹复制到/var/www/下\n\n## 安装phpadmin,按提示配置MySql数据库\n    sudo apt-get install phpmyadmin\n    cd /var/www/html\n    sudo ln -s /usr/share/phpmyadmin phpmyadmin\n\n\n## 导入数据库\n打开浏览器，输入http://localhost/phpmyadmin\n通过界面导入smshack.sql![导入sql](https://of4jd0bcc.qnssl.com/GsmSniffer/%E5%AF%BC%E5%85%A5smssql.png)\n\n## 修改/var/www/sms_web/bin下的sms.php文件的MySql用户名密码,否则会刷新不出SMS信息#\n![sms_php](https://of4jd0bcc.qnssl.com/GsmSniffer/sms_php.png)\n\n## 修改m.py设置登陆MySql的用户名密码、数据库名称\n![m脚本](https://of4jd0bcc.qnssl.com/GsmSniffer/m.png)\n执行\n> python m.py\n\n并按提示操作\n\n## 浏览器访问http://localhost/sms_web\n![web](https://of4jd0bcc.qnssl.com/GsmSniffer/web.jpg)\n\n## 关于嗅探\n因为我们买的便宜货，每个手机只能嗅探一个信道，具体一些的，可以参考下面的图（我们现在只能抓Downlink的数据包）：\n![channel](https://of4jd0bcc.qnssl.com/GsmSniffer/ARFCN_Channel.jpg)\n\n因为想要Sniffer Uplink的包，要修改硬件，C118主板上的RX filters要换掉，换成我们需要的HHM1625&amp;&amp;HHM1623C1滤波器组件，才能抓Uplink的数据包。\n有关信道号ARFCN的问题，可以参考下面的图：\n![ARFCN_channel](https://of4jd0bcc.qnssl.com/GsmSniffer/channel.jpg)\n\n## Tips\n>现在2G短信越来越少了，多等等会有的。理论上话音一样能够被监听及解码，只是涉及技术更为复杂。\nCP210x的接线，RX和TX有可能需要对调。运行cp210x-program需要先安装ibusb-dev，如果输出是“No devices found”或“Unable to send request, 3709 result=-110”，则有问题\n*可以参考：CP210x Tutorial\n\n![再给力点](https://of4jd0bcc.qnssl.com/GsmSniffer/%E8%83%BD%E4%B8%8D%E8%83%BD%E5%86%8D%E7%BB%99%E5%8A%9B%E7%82%B9.jpg)\n\n## 后期计划\n捕获上行包\n因为想要嗅探Uplink的包，要修改硬件，C118主板上的RX filters要换掉，换成我们需要的HHM1625&amp;&amp;HHM1623C1滤波器组件，才能抓Uplink的数据包。要使手机能够成为『passive uplink sniffer』，必须动到电烙铁，替换掉RX filters。\n![过滤器](https://of4jd0bcc.qnssl.com/GsmSniffer/%E8%BF%87%E6%BB%A4%E5%99%A8.jpg)\n替换前：\n![更改前](https://of4jd0bcc.qnssl.com/GsmSniffer/before.jpg)\n摘掉后：\n![摘掉后](https://of4jd0bcc.qnssl.com/GsmSniffer/change.jpg)\n替换后：\n![替换](https://of4jd0bcc.qnssl.com/GsmSniffer/after.jpg)\n## 使用OsmocomBB RSSI monitor查看信号强弱：## \n    ./osmocom-bb/src/host/osmocon/osmocon -p /dev/ttyUSB0 -m c123xor -c ./osmocom-bb/src/target/firmware/board/compal_e88/rssi.highram.bin ./osmocom-bb/src/target/firmware/board/compal_e88/chainload.compalram.bin\n\n![rssi](https://of4jd0bcc.qnssl.com/GsmSniffer/rssi.jpg)\n由于RSSI太大，不便于像OsmocomBB那样直接加载，所以要先用-C参数加载一个小的chainloader程序去加载我们真正的RSSI Payload程序。\n参考：http://bb.osmocom.org/trac/wiki/rssi.bin\n\n多机嗅探强烈建议看:[如何让GSM Sniffer变得更加智能化](http://www.92ez.com/?action=show&amp;id=23363)\n\n## GSM网络相关知识\n>推荐看看 GSM network and services 2G1723 2006\n![MS_BSS](https://of4jd0bcc.qnssl.com/GsmSniffer/MS_BSS.jpg)\n\n从协议图中得知，移动设备(MS)和基站(BTS)间使用Um接口，最底层就是刷入手机的layer1物理传输层，之上分别是layer2数据链路层和layer3网络层。\n![LAPDm](https://of4jd0bcc.qnssl.com/GsmSniffer/LAPDm.jpg)\n位于图中layer2的LAPDm，是一种保证数据传输不会出错的协议。一个LAPDm帧共有23个字节（184个比特），提供分片管理控制等功能。\nlayer3的协议则可以分为RR/MM/CM三种，这里只列出嗅探相关的功能：\n>RR(Radio Resource Management)：channel, cell（控制等信息，可以忽略）\nMM(Mobility Management)：Location updating（如果需要接收方号码，需要关注这个动作）\nCM(Connection Management)：Call Control(语音通话时的控制信息，可以知道何时开始捕获TCH),SMS（这里的重点）\n\n![Layer3](https://of4jd0bcc.qnssl.com/GsmSniffer/Layer3.jpg)\n参考GSM的文档 TS 04.06 得知 LAPDm 的Address field字段中，定义了 3.3.3 Service access point identifier (SAPI)。SAPI=3就是我们要的Short message service。\n使用tcpdump配合show_gsmtap_sms.py脚本在console列出短信明文。\n>tcpdump -l -ilo -nXs0 udp and port 4729 | python2 -u show_gsmtap_sms.py\n\n## 一些名词解释## \n> MS：Mobile Station，移动终端；\n> IMSI：International Mobile Subscriber Identity，国际移动用户标识号，是TD系统分给用户的唯一标识号，它存储在SIM卡、HLR/VLR中，最多由15个数字组成；\n> MCC：Mobile Country Code，是移动用户的国家号，中国是460；\n> MNC：Mobile Network Code ，是移动用户的所属PLMN网号，中国移动为00、02，中国联通为01；\n> MSIN：Mobile Subscriber Identification Number，是移动用户标识；\n> NMSI：National Mobile Subscriber Identification，是在某一国家内MS唯一的识别码；\n> BTS：Base Transceiver Station，基站收发器；\n> BSC：Base Station Controller，基站控制器；\n> MSC：Mobile Switching Center，移动交换中心。移动网络完成呼叫连接、过区切换控制、 无线信道管理等功能的设备，同时也是移动网与公用电话交换网(PSTN)、综合业务数字网(ISDN)等固定网的接口设备；\n> HLR：Home location register。保存用户的基本信息，如你的SIM的卡号、手机号码、签约信息等，和动态信息，如当前的位置、是否已经关机等；\n> VLR：Visiting location register，保存的是用户的动态信息和状态信息，以及从HLR下载的用户的签约信息；\n> CCCH：Common Control CHannel，公共控制信道。是一种“一点对多点”的双向控制信道，其用途是在呼叫接续阶段，传输链路连接所需要的控制信令与信息。\n\n## GSM Sniffer 嗅探的一些疑惑解答:\n### 为何只有改过滤波器的机器才能嗅探到上行的短信？\n>首先，我们可以站在手机制造商的角度去看这个问题。\n作为一个手机，应该具备的功能是接收基站发给自己的信号，以及主动向基站发送信号。手机与基站的信号传递分为上行和下行。下行就是基站下发到手机上的信号，上行就是手机发往基站的信号。手机收发短信的时候并不需要接收周围其他手机的信号，其他手机爱发什么发什么，管我屁事。上行频率跟下行频率是不同的。\n手机制造商在制造手机的时候只 需要手机支持两种频率，第一，基站发送给手机的下行频率。我们嗅探下行，其实就是因为手机本身可以接收下行的频率。那么我们再想一下，我们需要嗅探上行的 短信，该怎么办呢？上行是手机发往基站的信号，我们只要让手机能接收上行的频率就可以了。\n对，就是这样。暂且我们将手机想象成一个小型基站，其实在发短信这个过程中，手机确实充当的是发射台的角色，基站则变身为接收端，如果此时我们的手机可以接收上行频率，那么我们就可以嗅探上行短信了。但是手机本身是不能接收上行频率的，因为手机的本质工作也不需要这个。\n那么，我们需要支持上行频率该怎么办呢？没错，就是修改手机的滤波器。滤波器，顾名思义，就是过滤电磁波的原件，空气中电磁波那么多，我们需要的只是一个频段的频率，所以，滤波器就把接收到的所有的信号过滤，只需要GSM 频段的电磁波。我们都知道，GSM信号的频率是有一个范围的，不同国家之间啊也有差异。但是基本上是在850Mhz到900Mhz之间这一段。上行频率不在这个频段。我们修改滤波器，将能够接收的频率范围扩宽，把上行频率的范围包含进来，这样我们既可以嗅探上行，也可以嗅探下行了。\n这在RTL-SDR中是一样的，SDR接收的频率范围比较广，包含了GSM上行和下行的所有频段，所以SDR也可以用来做GSM Sniffer。\n\n### 问题一：改过的机子搜索到的基站好少，而且信号差很多，是不是改机把主板改坏了？\n>解释：这个问题是最常见的，很多朋友在拿到改好的机子之后测试普遍有这个感觉，改过的机子跟没改的机子进行对比，很明显就能发现，搜索到的基站数量并没有没改的多。而且信号衰减也严重。信号衰减是很正常的。这里得说到改机的作用。\n\n### 我们为何要改机呢？\n>很多朋友都没有去思考这个问题。不改机为什么收不到上行呢？博主在这要说的是，既然是做学问，搞研究，爱折腾，就应该去问一下自己这些问题，而不是看到网上有人说改机可嗅探上行就觉得一定要改机，改机出问题了找不到答案就开始各种问。与其花费大量时间去寻找信号衰减的答案，还不如先思考些改机的原理。在这块很多朋友做的还是不够啊。\n博主在一开始就说到了修改滤波器可以收到上行。修改滤波器的目的就是扩宽接收频率的范围，那么问题来了，接收的范围越大，接收到的电波信号越多，那么噪音就越多，什么是噪音呢？噪音就是指的与自己需要的不相关的东西，再加上我们改机的时候拆除了主板上的屏蔽盖，很容易受到各种电磁干扰，所以会导致信号衰减严重。这并不是因为手机主板的问题。有的时候选用的滤波器原件品质也可能会影响到信号。博主改机目前能达到的水平是信号衰减控制在5db~12db之间。\n\n### 问题二：为什么我嗅探了好久都没收到上行短信，或者为何我收到的上行短信数量很少呢？\n>解释：这个问题也不难想通。你想一下，基站对手机是一对多的关系，单位时间里面一个基站发出来的短信少则几十条，多则几万条，平均分配到每个信道每个频点上也不算少。\n而对于上行来说，博主在开始就介绍了上行嗅探的原理，上行是手机对基站，一对一的关系，试想一下，如果你周围同时有几万人在发短信，而且是在向同一个基站发送短信，而且这个距离你手机接收上行信号没有问题，那么，你接收到的上行短信肯不比下行的少。问题是这种情况现实中有吗？答案是否。现实中不可能有几万人在你周围同时向一个基站发短信。况且，你的手机接收别人的手机信号，距离也是有限制的。\n我们在接收下行的时候，基站能够覆盖一大片区域，是因为他的功率非常大。而手机发短信的时候功率是非常小的，你手机能接收到上行信号的距离非常有限。这就导致了接收上行短信的数量非常少。而不是因为手机本身有问题导致的。\n希望我的解释能够让你眼前一亮，豁然开朗。\n\n## 参考文献## \n1.[https://github.com/osmocom/osmocom-bb](https://github.com/osmocom/osmocom-bb)\n2.[http://bb.osmocom.org/trac/wiki/TitleIndex](http://bb.osmocom.org/trac/wiki/TitleIndex)\n3.[http://wulujia.com/2013/11/10/OsmocomBB-Guide/](http://wulujia.com/2013/11/10/OsmocomBB-Guide/)\n4.[https://blog.hqcodeshop.fi/archives/253-iPhone-cell-Field-Test-mode.html](https://blog.hqcodeshop.fi/archives/253-iPhone-cell-Field-Test-mode.html)\n5.[http://bbs.pediy.com/showthread.php?t=182574](http://bbs.pediy.com/showthread.php?t=182574)\n6.[http://www.92ez.com/?action=show&amp;id=23342](http://www.92ez.com/?action=show&amp;id=23342)\n7.[https://www.nigesb.com/gsm-hacker-sheet.html](https://www.nigesb.com/gsm-hacker-sheet.html)\n8.[http://le4f.net/post/post/gsm-sniffer-hacking-toolkits-demo](http://le4f.net/post/post/gsm-sniffer-hacking-toolkits-demo)\n9.[http://le4f.net/post/post/compile-osmocombb&amp;problems-about-gsm-sniffer](http://le4f.net/post/post/compile-osmocombb&amp;problems-about-gsm-sniffer)\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n[99]:https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E7%86%8A%E6%9C%AC%E7%86%8A%E8%B6%85%E5%B8%85_alipay.gif?imageView2/1/w/200/h/200\n[100]:https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200","slug":"GSM-Sniffer小测试","published":1,"updated":"2017-01-31T11:00:50.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv5dxzj0001poogncnbypur","content":"<p>最近看到osmocom-bb项目，觉得很有趣，硬件的嗅探成本较之前已经低的难以想象，遂动手做一遍</p>\n<h2 id=\"关于Kali配置环境的一些问题\"><a href=\"#关于Kali配置环境的一些问题\" class=\"headerlink\" title=\"关于Kali配置环境的一些问题\"></a>关于Kali配置环境的一些问题</h2><blockquote>\n<p>网上大部分教程都是用到的最新的gnu-arm-build.3脚本，但这个脚本编译的gcc版本是4.8.2，在Kali2下<br>gcc -v，会发现gcc的版本是4.9.2，即便编译成功，会出现如下问题：Osmocom-bb的Master分支能扫描到基站，但wireshark捕获到的全是GSMTAP，没有GSM_SMS。Luca/gsmmap分支则会扫描不到基站。Ubuntu12.04的gcc正好是4.5.2，因此在Ubuntu12.04下，我们用gnu-arm-build.2的脚本就能编译成功</p>\n</blockquote>\n<p>##当然，解决办法还是有的:<br><a id=\"more\"></a></p>\n<h2 id=\"修改osmocom-bb以下五个文件\"><a href=\"#修改osmocom-bb以下五个文件\" class=\"headerlink\" title=\"修改osmocom-bb以下五个文件\"></a>修改osmocom-bb以下五个文件</h2><pre><code>src/target/firmware/board/compal/highram.lds\nsrc/target/firmware/board/compal/ram.lds\nsrc/target/firmware/board/compal_e88/flash.lds\nsrc/target/firmware/board/compal_e88/loader.lds\nsrc/target/firmware/board/mediatek/ram.lds\n</code></pre><h2 id=\"找到每个文件中的-KEEP-SORT-ctors-一行，在其下面加入新的一行-KEEP-SORT-init-array\"><a href=\"#找到每个文件中的-KEEP-SORT-ctors-一行，在其下面加入新的一行-KEEP-SORT-init-array\" class=\"headerlink\" title=\"找到每个文件中的 KEEP((SORT(.ctors))) 一行，在其下面加入新的一行 KEEP((SORT(.init_array)))\"></a>找到每个文件中的 KEEP(<em>(SORT(.ctors))) 一行，在其下面加入新的一行 KEEP(</em>(SORT(.init_array)))</h2><p>例如：</p>\n<pre><code>LONG(SIZEOF(.ctors) / 4 - 2)\n/* ctor pointers */\nKEEP(*(SORT(.ctors)))\nKEEP(*(SORT(.init_array)))\n/* end of list */\nLONG(0)\n</code></pre><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/fix_cell_log.png\" alt=\"fix_cell_log\"></p>\n<h2 id=\"执行编译\"><a href=\"#执行编译\" class=\"headerlink\" title=\"执行编译\"></a>执行编译</h2><pre><code>cd /root/armtoolchain/osmocom-bb/src\nmake -e CROSS_TOOL_PREFIX=arm-none-eabi-\n</code></pre><p><br></p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>虚拟机Vmware + Ubuntu12.04 + c118 + 数据连接线 + FT232RL模块<br>Ubuntu12.04:<a href=\"magnet:?xt=urn:btih:9645EAC5BE3309982D6BCD559DDB30E8A7D163C9 c118\" target=\"_blank\" rel=\"external\">下载地址</a><br>种子文件:<a href=\"http://pan.baidu.com/s/1gfjoZ3l\" target=\"_blank\" rel=\"external\">pan.baidu.com/s/1gfjoZ3l</a>密码:jjth<br>C118:<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/C118.jpg?imageView2/1/w/200/h/200\" alt=\"C118\"></p>\n<p>数据连接线:<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E6%95%B0%E6%8D%AE%E7%BA%BF.jpg?imageView2/1/w/200/h/200\" alt=\"数据线1\"><br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E6%95%B0%E6%8D%AE%E7%BA%BF%202.jpg?imageView2/1/w/200/h/200\" alt=\"数据线2\"></p>\n<p>FT232RL模块:<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/FT232RL.jpg?imageView2/1/w/200/h/200\" alt=\"FTR232R\"></p>\n<p>PS.记住所有操作在sudo -s root权限下操作。<br>Ubuntu 的软件源配置文件是 /etc/apt/sources.list。将系统自带的该文件做个备份，将该文件替换为下面内容，即可使用 TUNA 的软件源镜像。</p>\n<pre><code>deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise main multiverse restricted universe\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-backports main multiverse restricted universe\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-proposed main multiverse restricted universe\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-security main multiverse restricted universe\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-updates main multiverse restricted universe\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise main multiverse restricted universe\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-backports main multiverse restricted universe\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-proposed main multiverse restricted universe\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-security main multiverse restricted universe\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-updates main multiverse restricted universe\n</code></pre><blockquote>\n<p>apt-get update</p>\n</blockquote>\n<h2 id=\"环境依赖\"><a href=\"#环境依赖\" class=\"headerlink\" title=\"环境依赖\"></a>环境依赖</h2><pre><code>sudo apt-get install aptitude libtalloc2 libtalloc2-dbg python-talloc python-talloc-dbg python-talloc-dev libtalloc-dev automake libusb-dev libpcsclite-dev libusb-0.1-4 libpcsclite1 libccid pcscd libtool shtool autoconf git-core pkg-config make gcc build-essential libgmp3-dev libmpfr-dev libx11-6 libx11-dev texinfo flex bison libncurses5 libncurses5-dbg libncurses5-dev libncursesw5 libncursesw5-dbg libncursesw5-dev zlibc zlib1g-dev libmpfr4 libmpc-dev libpcsclite-dev libfftw3-dev libfftw3-doc\n\n\naptitude install libtool shtool automake autoconf git-core pkg-config make gcc\n</code></pre><h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>这里建议用迅雷下载好再拖到虚拟机里面<br>打包下载放到/root目录下即可<a href=\"http://pan.baidu.com/s/1i5sGAKt\" target=\"_blank\" rel=\"external\">pan.baidu.com/s/1i5sGAKt</a> 密码: gvuv</p>\n<pre><code>http://bb.osmocom.org/trac/raw-attachment/wiki/GnuArmToolchain/gnu-arm-build.2.sh\nhttp://ftp.gnu.org/gnu/gcc/gcc-4.5.2/gcc-4.5.2.tar.bz2\nhttp://ftp.gnu.org/gnu/binutils/binutils-2.21.1a.tar.bz2\nftp://sources.redhat.com/pub/newlib/newlib-1.19.0.tar.gz\n</code></pre><p>把下载好的3个包放到src目录下<br>目录结构<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png\" alt=\"目录结构\"></p>\n<pre><code>cd /root/armtoolchain\nchmod +x gnu-arm-build.2.sh\n./gnu-arm-build.2.sh\n</code></pre><p>大约20分钟后出现下面代码代表编译完成</p>\n<blockquote>\n<p>Build complete! Add /root/arm_toolchain/install/bin to your PATH to make arm-elf-gcc and friends accessible directly</p>\n</blockquote>\n<p>把以下代码加到~/.bashrc的最后一行</p>\n<blockquote>\n<p>export PATH=$PATH:/root/armtoolchain/install/bin</p>\n</blockquote>\n<p>执行一下让其生效</p>\n<blockquote>\n<p>source ~/.bashrc</p>\n</blockquote>\n<p>当你在命令行输入arm再按两下tab出现下图的时候，代表编译环境配置好了<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/arm%E9%93%BE.png\" alt=\"arm链\"></p>\n<h2 id=\"libosmocore\"><a href=\"#libosmocore\" class=\"headerlink\" title=\"libosmocore\"></a>libosmocore</h2><pre><code>cd /root\ngit clone git://git.osmocom.org/libosmocore.git\ncd libosmocore/\nautoreconf -i\n./configure\nmake\nsudo make install\nsudo ldconfig -i\n</code></pre><p>这里可能有个坑，执行完上述代码后在命令行输入arm再按两下tab的时候，arm链会莫名其妙的消失，需要再去~/.bashrc再配置一遍,如果arm链正常就不需要配置了</p>\n<h2 id=\"Osmocom-bb\"><a href=\"#Osmocom-bb\" class=\"headerlink\" title=\"Osmocom-bb\"></a>Osmocom-bb</h2><pre><code>cd /root\ngit clone git://git.osmocom.org/osmocom-bb.git\ncd osmocom-bb\ngit checkout --track origin/luca/gsmmap #选择luca/gsmmap分支 \ncd src\nmake #交叉编译\n</code></pre><p>如果没什么问题，软件环境和固件就都编译好了。<br>Ununtu 12.04自带FT232R驱动，所以直接连接就能使用，不需要再装驱动。</p>\n<h2 id=\"加载Firmware到手机raw中\"><a href=\"#加载Firmware到手机raw中\" class=\"headerlink\" title=\"加载Firmware到手机raw中\"></a>加载Firmware到手机raw中</h2><pre><code>cd /root/armtoolchain/osmocom-bb/src/host/osmocon ./osmocon -m c123xor -p /dev/ttyUSB0 ../../target/firmware/board/compal_e88/layer1.compalram.bin\n</code></pre><p>上面命令需要在关机下执行，然后短按开机键<br>手机屏幕显示Layer 1 osmocom-bb 字样就表示成功了<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/Layer1.jpg?imageView2/1/w/200/h/200\" alt=\"Layer1\"></p>\n<h2 id=\"扫描基站\"><a href=\"#扫描基站\" class=\"headerlink\" title=\"扫描基站\"></a>扫描基站</h2><pre><code>cd /root/armtoolchain/osmocom-bb/src/host/layer23/src/misc/\n./cell_log –O\n</code></pre><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/ARFCN.jpg?imageView2/1/w/200/h/200\" alt=\"ARFCN\"></p>\n<p>THE_ATFCN_ID就是扫描到的日志中参数ARFCN的值，尽可能选信号好的</p>\n<pre><code>cd /root/armtoolchain/osmocom-bb/src/host/layer23/src/misc/\n./ccch_scan -i 127.0.0.1 -a THE_ATFCN_ID\n</code></pre><p>上图第一个基站的ARFCN就是40</p>\n<p>苹果手机可以执行：<code>*3001#12345#*</code><br>进入工程模式后，选择GSM Cell Environment-&gt;GSM Cell Info-&gt;GSM Serving Cell,就可以看到目前手机连接的基站ARFCN值了，应该在第二步中，也能看到这个ID存在。</p>\n<p>更多姿势请看这里:<a href=\"http://www.92ez.com/?action=show&amp;id=23342\" target=\"_blank\" rel=\"external\">osmocom-bb中cell_log的多种使用姿势</a></p>\n<p>因为osmocomBB执行之后默认会在本地开启4729端口，这时候的GSM协议已经被封装上了TCP-IP，可以在本地用wireshark抓到，所以我们使用wireshark去监听4729的端口<br>wireshark打开错误的话需要到/usr/share/wireshark/init.lua文件注释掉倒数第二行</p>\n<blockquote>\n<p>wireshark -k -i lo -f ’port 4729</p>\n</blockquote>\n<p>在wireshark中过滤gsm_sms协议数据，过滤之后得到的数据里面就包含短信的明文信息<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E7%9F%AD%E4%BF%A1%E6%8D%95%E8%8E%B7.jpg\" alt=\"短信拦截\"></p>\n<h2 id=\"Some-Questions\"><a href=\"#Some-Questions\" class=\"headerlink\" title=\"Some Questions\"></a>Some Questions</h2><p>GSM sniffer嗅探一段时间出错问题的解决方法:<br>这里我分成两种情况来说。<br>当你看到此文时你可能已经成功嗅探，只是没有打补丁。意思是你已经配置好了环境，那么打补丁就更简单了。首先你需要删掉</p>\n<blockquote>\n<p>osmocom-bb/src/host/layer23/src/misc/app_ccch_scan.c<br>osmocom-bb/src/host/layer23/src/misc/app_ccch_scan.o</p>\n</blockquote>\n<p>这两个文件，删除之后下载补丁文件app_ccch_scan.c文件，链接: <a href=\"http://pan.baidu.com/s/1bpDPrDt\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1bpDPrDt</a> 密码: 3wvp<br>下载此文件放入osmocom-bb/src/host/layer23/src/misc/目录下，如果出现没有权限的错误，请赋予权限。然后切换到目录下执行编译</p>\n<pre><code>cd osmocom-bb/src/\nmake\n</code></pre><p>如果出现git的版本问题，执行下这个命令</p>\n<blockquote>\n<p>git checkout -f</p>\n</blockquote>\n<p>然后再编译，编译完成后就可以了。</p>\n<p>第二种情况是你看到这篇文章后打算重新来一遍，那么你前面的步骤依旧，直到你执行了这句</p>\n<blockquote>\n<p>git checkout –track origin/luca/gsmmap</p>\n</blockquote>\n<p>如果出现git版本问题没有成功，请执行上面说到的那个git版本问题解决的命令再切换分支，切换分支成功之后，下载补丁文件覆盖掉原有的文件，然后执行make编译，编译完成即可。</p>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E5%A4%9A%E6%9C%BA%E5%97%85%E6%8E%A2.jpg\" alt=\"多机嗅探\"><br>一台C118一次只能针对一个ARFCN进行拦截而且每次嗅探需要打开多个窗口<br>要是能写个自动化的嗅探脚本，再保存到数据库在Web界面实时展示信息就好了<br>是的。大牛们已经做出多机嗅探和Web展示的脚本。这里要膜拜一下~</p>\n<h2 id=\"WEB界面搭建配置\"><a href=\"#WEB界面搭建配置\" class=\"headerlink\" title=\"WEB界面搭建配置\"></a>WEB界面搭建配置</h2><h3 id=\"Debian\"><a href=\"#Debian\" class=\"headerlink\" title=\"Debian:\"></a>Debian:</h3><pre><code>sudo apt-get install mysql-server python-mysqldb\n</code></pre><h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP:\"></a>PHP:</h3><pre><code>apt-get install php5 php-pear php5-mysql\nservice apache2 restart\n</code></pre><h3 id=\"Linux-Fedora-CentOS系统：\"><a href=\"#Linux-Fedora-CentOS系统：\" class=\"headerlink\" title=\"Linux Fedora, CentOS系统：\"></a>Linux Fedora, CentOS系统：</h3><pre><code>yum install MySQL-python\n</code></pre><h2 id=\"下载web界面程序\"><a href=\"#下载web界面程序\" class=\"headerlink\" title=\"下载web界面程序\"></a>下载web界面程序</h2><p>链接:<a href=\"http://pan.baidu.com/s/1nuHYzZb\" target=\"_blank\" rel=\"external\"> http://pan.baidu.com/s/1nuHYzZb</a> 密码: 43h4</p>\n<blockquote>\n<p>getusb.sh<br>m.py<br>smshack_nosql.py<br>smshack.sql</p>\n</blockquote>\n<p>以上4个文件放在root文件夹下<br>sms_web文件夹复制到/var/www/下</p>\n<h2 id=\"安装phpadmin-按提示配置MySql数据库\"><a href=\"#安装phpadmin-按提示配置MySql数据库\" class=\"headerlink\" title=\"安装phpadmin,按提示配置MySql数据库\"></a>安装phpadmin,按提示配置MySql数据库</h2><pre><code>sudo apt-get install phpmyadmin\ncd /var/www/html\nsudo ln -s /usr/share/phpmyadmin phpmyadmin\n</code></pre><h2 id=\"导入数据库\"><a href=\"#导入数据库\" class=\"headerlink\" title=\"导入数据库\"></a>导入数据库</h2><p>打开浏览器，输入<a href=\"http://localhost/phpmyadmin\" target=\"_blank\" rel=\"external\">http://localhost/phpmyadmin</a><br>通过界面导入smshack.sql<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E5%AF%BC%E5%85%A5smssql.png\" alt=\"导入sql\"></p>\n<h2 id=\"修改-var-www-sms-web-bin下的sms-php文件的MySql用户名密码-否则会刷新不出SMS信息\"><a href=\"#修改-var-www-sms-web-bin下的sms-php文件的MySql用户名密码-否则会刷新不出SMS信息\" class=\"headerlink\" title=\"修改/var/www/sms_web/bin下的sms.php文件的MySql用户名密码,否则会刷新不出SMS信息\"></a>修改/var/www/sms_web/bin下的sms.php文件的MySql用户名密码,否则会刷新不出SMS信息</h2><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/sms_php.png\" alt=\"sms_php\"></p>\n<h2 id=\"修改m-py设置登陆MySql的用户名密码、数据库名称\"><a href=\"#修改m-py设置登陆MySql的用户名密码、数据库名称\" class=\"headerlink\" title=\"修改m.py设置登陆MySql的用户名密码、数据库名称\"></a>修改m.py设置登陆MySql的用户名密码、数据库名称</h2><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/m.png\" alt=\"m脚本\"><br>执行</p>\n<blockquote>\n<p>python m.py</p>\n</blockquote>\n<p>并按提示操作</p>\n<h2 id=\"浏览器访问http-localhost-sms-web\"><a href=\"#浏览器访问http-localhost-sms-web\" class=\"headerlink\" title=\"浏览器访问http://localhost/sms_web\"></a>浏览器访问<a href=\"http://localhost/sms_web\" target=\"_blank\" rel=\"external\">http://localhost/sms_web</a></h2><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/web.jpg\" alt=\"web\"></p>\n<h2 id=\"关于嗅探\"><a href=\"#关于嗅探\" class=\"headerlink\" title=\"关于嗅探\"></a>关于嗅探</h2><p>因为我们买的便宜货，每个手机只能嗅探一个信道，具体一些的，可以参考下面的图（我们现在只能抓Downlink的数据包）：<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/ARFCN_Channel.jpg\" alt=\"channel\"></p>\n<p>因为想要Sniffer Uplink的包，要修改硬件，C118主板上的RX filters要换掉，换成我们需要的HHM1625&amp;&amp;HHM1623C1滤波器组件，才能抓Uplink的数据包。<br>有关信道号ARFCN的问题，可以参考下面的图：<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/channel.jpg\" alt=\"ARFCN_channel\"></p>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><blockquote>\n<p>现在2G短信越来越少了，多等等会有的。理论上话音一样能够被监听及解码，只是涉及技术更为复杂。<br>CP210x的接线，RX和TX有可能需要对调。运行cp210x-program需要先安装ibusb-dev，如果输出是“No devices found”或“Unable to send request, 3709 result=-110”，则有问题<br>*可以参考：CP210x Tutorial</p>\n</blockquote>\n<p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E8%83%BD%E4%B8%8D%E8%83%BD%E5%86%8D%E7%BB%99%E5%8A%9B%E7%82%B9.jpg\" alt=\"再给力点\"></p>\n<h2 id=\"后期计划\"><a href=\"#后期计划\" class=\"headerlink\" title=\"后期计划\"></a>后期计划</h2><p>捕获上行包<br>因为想要嗅探Uplink的包，要修改硬件，C118主板上的RX filters要换掉，换成我们需要的HHM1625&amp;&amp;HHM1623C1滤波器组件，才能抓Uplink的数据包。要使手机能够成为『passive uplink sniffer』，必须动到电烙铁，替换掉RX filters。<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E8%BF%87%E6%BB%A4%E5%99%A8.jpg\" alt=\"过滤器\"><br>替换前：<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/before.jpg\" alt=\"更改前\"><br>摘掉后：<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/change.jpg\" alt=\"摘掉后\"><br>替换后：<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/after.jpg\" alt=\"替换\"></p>\n<h2 id=\"使用OsmocomBB-RSSI-monitor查看信号强弱：\"><a href=\"#使用OsmocomBB-RSSI-monitor查看信号强弱：\" class=\"headerlink\" title=\"使用OsmocomBB RSSI monitor查看信号强弱：\"></a>使用OsmocomBB RSSI monitor查看信号强弱：</h2><pre><code>./osmocom-bb/src/host/osmocon/osmocon -p /dev/ttyUSB0 -m c123xor -c ./osmocom-bb/src/target/firmware/board/compal_e88/rssi.highram.bin ./osmocom-bb/src/target/firmware/board/compal_e88/chainload.compalram.bin\n</code></pre><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/rssi.jpg\" alt=\"rssi\"><br>由于RSSI太大，不便于像OsmocomBB那样直接加载，所以要先用-C参数加载一个小的chainloader程序去加载我们真正的RSSI Payload程序。<br>参考：<a href=\"http://bb.osmocom.org/trac/wiki/rssi.bin\" target=\"_blank\" rel=\"external\">http://bb.osmocom.org/trac/wiki/rssi.bin</a></p>\n<p>多机嗅探强烈建议看:<a href=\"http://www.92ez.com/?action=show&amp;id=23363\" target=\"_blank\" rel=\"external\">如何让GSM Sniffer变得更加智能化</a></p>\n<h2 id=\"GSM网络相关知识\"><a href=\"#GSM网络相关知识\" class=\"headerlink\" title=\"GSM网络相关知识\"></a>GSM网络相关知识</h2><blockquote>\n<p>推荐看看 GSM network and services 2G1723 2006<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/MS_BSS.jpg\" alt=\"MS_BSS\"></p>\n</blockquote>\n<p>从协议图中得知，移动设备(MS)和基站(BTS)间使用Um接口，最底层就是刷入手机的layer1物理传输层，之上分别是layer2数据链路层和layer3网络层。<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/LAPDm.jpg\" alt=\"LAPDm\"><br>位于图中layer2的LAPDm，是一种保证数据传输不会出错的协议。一个LAPDm帧共有23个字节（184个比特），提供分片管理控制等功能。<br>layer3的协议则可以分为RR/MM/CM三种，这里只列出嗅探相关的功能：</p>\n<blockquote>\n<p>RR(Radio Resource Management)：channel, cell（控制等信息，可以忽略）<br>MM(Mobility Management)：Location updating（如果需要接收方号码，需要关注这个动作）<br>CM(Connection Management)：Call Control(语音通话时的控制信息，可以知道何时开始捕获TCH),SMS（这里的重点）</p>\n</blockquote>\n<p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/Layer3.jpg\" alt=\"Layer3\"><br>参考GSM的文档 TS 04.06 得知 LAPDm 的Address field字段中，定义了 3.3.3 Service access point identifier (SAPI)。SAPI=3就是我们要的Short message service。<br>使用tcpdump配合show_gsmtap_sms.py脚本在console列出短信明文。</p>\n<blockquote>\n<p>tcpdump -l -ilo -nXs0 udp and port 4729 | python2 -u show_gsmtap_sms.py</p>\n</blockquote>\n<h2 id=\"一些名词解释\"><a href=\"#一些名词解释\" class=\"headerlink\" title=\"一些名词解释\"></a>一些名词解释</h2><blockquote>\n<p>MS：Mobile Station，移动终端；<br>IMSI：International Mobile Subscriber Identity，国际移动用户标识号，是TD系统分给用户的唯一标识号，它存储在SIM卡、HLR/VLR中，最多由15个数字组成；<br>MCC：Mobile Country Code，是移动用户的国家号，中国是460；<br>MNC：Mobile Network Code ，是移动用户的所属PLMN网号，中国移动为00、02，中国联通为01；<br>MSIN：Mobile Subscriber Identification Number，是移动用户标识；<br>NMSI：National Mobile Subscriber Identification，是在某一国家内MS唯一的识别码；<br>BTS：Base Transceiver Station，基站收发器；<br>BSC：Base Station Controller，基站控制器；<br>MSC：Mobile Switching Center，移动交换中心。移动网络完成呼叫连接、过区切换控制、 无线信道管理等功能的设备，同时也是移动网与公用电话交换网(PSTN)、综合业务数字网(ISDN)等固定网的接口设备；<br>HLR：Home location register。保存用户的基本信息，如你的SIM的卡号、手机号码、签约信息等，和动态信息，如当前的位置、是否已经关机等；<br>VLR：Visiting location register，保存的是用户的动态信息和状态信息，以及从HLR下载的用户的签约信息；<br>CCCH：Common Control CHannel，公共控制信道。是一种“一点对多点”的双向控制信道，其用途是在呼叫接续阶段，传输链路连接所需要的控制信令与信息。</p>\n</blockquote>\n<h2 id=\"GSM-Sniffer-嗅探的一些疑惑解答\"><a href=\"#GSM-Sniffer-嗅探的一些疑惑解答\" class=\"headerlink\" title=\"GSM Sniffer 嗅探的一些疑惑解答:\"></a>GSM Sniffer 嗅探的一些疑惑解答:</h2><h3 id=\"为何只有改过滤波器的机器才能嗅探到上行的短信？\"><a href=\"#为何只有改过滤波器的机器才能嗅探到上行的短信？\" class=\"headerlink\" title=\"为何只有改过滤波器的机器才能嗅探到上行的短信？\"></a>为何只有改过滤波器的机器才能嗅探到上行的短信？</h3><blockquote>\n<p>首先，我们可以站在手机制造商的角度去看这个问题。<br>作为一个手机，应该具备的功能是接收基站发给自己的信号，以及主动向基站发送信号。手机与基站的信号传递分为上行和下行。下行就是基站下发到手机上的信号，上行就是手机发往基站的信号。手机收发短信的时候并不需要接收周围其他手机的信号，其他手机爱发什么发什么，管我屁事。上行频率跟下行频率是不同的。<br>手机制造商在制造手机的时候只 需要手机支持两种频率，第一，基站发送给手机的下行频率。我们嗅探下行，其实就是因为手机本身可以接收下行的频率。那么我们再想一下，我们需要嗅探上行的 短信，该怎么办呢？上行是手机发往基站的信号，我们只要让手机能接收上行的频率就可以了。<br>对，就是这样。暂且我们将手机想象成一个小型基站，其实在发短信这个过程中，手机确实充当的是发射台的角色，基站则变身为接收端，如果此时我们的手机可以接收上行频率，那么我们就可以嗅探上行短信了。但是手机本身是不能接收上行频率的，因为手机的本质工作也不需要这个。<br>那么，我们需要支持上行频率该怎么办呢？没错，就是修改手机的滤波器。滤波器，顾名思义，就是过滤电磁波的原件，空气中电磁波那么多，我们需要的只是一个频段的频率，所以，滤波器就把接收到的所有的信号过滤，只需要GSM 频段的电磁波。我们都知道，GSM信号的频率是有一个范围的，不同国家之间啊也有差异。但是基本上是在850Mhz到900Mhz之间这一段。上行频率不在这个频段。我们修改滤波器，将能够接收的频率范围扩宽，把上行频率的范围包含进来，这样我们既可以嗅探上行，也可以嗅探下行了。<br>这在RTL-SDR中是一样的，SDR接收的频率范围比较广，包含了GSM上行和下行的所有频段，所以SDR也可以用来做GSM Sniffer。</p>\n</blockquote>\n<h3 id=\"问题一：改过的机子搜索到的基站好少，而且信号差很多，是不是改机把主板改坏了？\"><a href=\"#问题一：改过的机子搜索到的基站好少，而且信号差很多，是不是改机把主板改坏了？\" class=\"headerlink\" title=\"问题一：改过的机子搜索到的基站好少，而且信号差很多，是不是改机把主板改坏了？\"></a>问题一：改过的机子搜索到的基站好少，而且信号差很多，是不是改机把主板改坏了？</h3><blockquote>\n<p>解释：这个问题是最常见的，很多朋友在拿到改好的机子之后测试普遍有这个感觉，改过的机子跟没改的机子进行对比，很明显就能发现，搜索到的基站数量并没有没改的多。而且信号衰减也严重。信号衰减是很正常的。这里得说到改机的作用。</p>\n</blockquote>\n<h3 id=\"我们为何要改机呢？\"><a href=\"#我们为何要改机呢？\" class=\"headerlink\" title=\"我们为何要改机呢？\"></a>我们为何要改机呢？</h3><blockquote>\n<p>很多朋友都没有去思考这个问题。不改机为什么收不到上行呢？博主在这要说的是，既然是做学问，搞研究，爱折腾，就应该去问一下自己这些问题，而不是看到网上有人说改机可嗅探上行就觉得一定要改机，改机出问题了找不到答案就开始各种问。与其花费大量时间去寻找信号衰减的答案，还不如先思考些改机的原理。在这块很多朋友做的还是不够啊。<br>博主在一开始就说到了修改滤波器可以收到上行。修改滤波器的目的就是扩宽接收频率的范围，那么问题来了，接收的范围越大，接收到的电波信号越多，那么噪音就越多，什么是噪音呢？噪音就是指的与自己需要的不相关的东西，再加上我们改机的时候拆除了主板上的屏蔽盖，很容易受到各种电磁干扰，所以会导致信号衰减严重。这并不是因为手机主板的问题。有的时候选用的滤波器原件品质也可能会影响到信号。博主改机目前能达到的水平是信号衰减控制在5db~12db之间。</p>\n</blockquote>\n<h3 id=\"问题二：为什么我嗅探了好久都没收到上行短信，或者为何我收到的上行短信数量很少呢？\"><a href=\"#问题二：为什么我嗅探了好久都没收到上行短信，或者为何我收到的上行短信数量很少呢？\" class=\"headerlink\" title=\"问题二：为什么我嗅探了好久都没收到上行短信，或者为何我收到的上行短信数量很少呢？\"></a>问题二：为什么我嗅探了好久都没收到上行短信，或者为何我收到的上行短信数量很少呢？</h3><blockquote>\n<p>解释：这个问题也不难想通。你想一下，基站对手机是一对多的关系，单位时间里面一个基站发出来的短信少则几十条，多则几万条，平均分配到每个信道每个频点上也不算少。<br>而对于上行来说，博主在开始就介绍了上行嗅探的原理，上行是手机对基站，一对一的关系，试想一下，如果你周围同时有几万人在发短信，而且是在向同一个基站发送短信，而且这个距离你手机接收上行信号没有问题，那么，你接收到的上行短信肯不比下行的少。问题是这种情况现实中有吗？答案是否。现实中不可能有几万人在你周围同时向一个基站发短信。况且，你的手机接收别人的手机信号，距离也是有限制的。<br>我们在接收下行的时候，基站能够覆盖一大片区域，是因为他的功率非常大。而手机发短信的时候功率是非常小的，你手机能接收到上行信号的距离非常有限。这就导致了接收上行短信的数量非常少。而不是因为手机本身有问题导致的。<br>希望我的解释能够让你眼前一亮，豁然开朗。</p>\n</blockquote>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p>1.<a href=\"https://github.com/osmocom/osmocom-bb\" target=\"_blank\" rel=\"external\">https://github.com/osmocom/osmocom-bb</a><br>2.<a href=\"http://bb.osmocom.org/trac/wiki/TitleIndex\" target=\"_blank\" rel=\"external\">http://bb.osmocom.org/trac/wiki/TitleIndex</a><br>3.<a href=\"http://wulujia.com/2013/11/10/OsmocomBB-Guide/\" target=\"_blank\" rel=\"external\">http://wulujia.com/2013/11/10/OsmocomBB-Guide/</a><br>4.<a href=\"https://blog.hqcodeshop.fi/archives/253-iPhone-cell-Field-Test-mode.html\" target=\"_blank\" rel=\"external\">https://blog.hqcodeshop.fi/archives/253-iPhone-cell-Field-Test-mode.html</a><br>5.<a href=\"http://bbs.pediy.com/showthread.php?t=182574\" target=\"_blank\" rel=\"external\">http://bbs.pediy.com/showthread.php?t=182574</a><br>6.<a href=\"http://www.92ez.com/?action=show&amp;id=23342\" target=\"_blank\" rel=\"external\">http://www.92ez.com/?action=show&amp;id=23342</a><br>7.<a href=\"https://www.nigesb.com/gsm-hacker-sheet.html\" target=\"_blank\" rel=\"external\">https://www.nigesb.com/gsm-hacker-sheet.html</a><br>8.<a href=\"http://le4f.net/post/post/gsm-sniffer-hacking-toolkits-demo\" target=\"_blank\" rel=\"external\">http://le4f.net/post/post/gsm-sniffer-hacking-toolkits-demo</a><br>9.<a href=\"http://le4f.net/post/post/compile-osmocombb&amp;problems-about-gsm-sniffer\" target=\"_blank\" rel=\"external\">http://le4f.net/post/post/compile-osmocombb&amp;problems-about-gsm-sniffer</a></p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E7%86%8A%E6%9C%AC%E7%86%8A%E8%B6%85%E5%B8%85_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>\n","excerpt":"<p>最近看到osmocom-bb项目，觉得很有趣，硬件的嗅探成本较之前已经低的难以想象，遂动手做一遍</p>\n<h2 id=\"关于Kali配置环境的一些问题\"><a href=\"#关于Kali配置环境的一些问题\" class=\"headerlink\" title=\"关于Kali配置环境的一些问题\"></a>关于Kali配置环境的一些问题</h2><blockquote>\n<p>网上大部分教程都是用到的最新的gnu-arm-build.3脚本，但这个脚本编译的gcc版本是4.8.2，在Kali2下<br>gcc -v，会发现gcc的版本是4.9.2，即便编译成功，会出现如下问题：Osmocom-bb的Master分支能扫描到基站，但wireshark捕获到的全是GSMTAP，没有GSM_SMS。Luca/gsmmap分支则会扫描不到基站。Ubuntu12.04的gcc正好是4.5.2，因此在Ubuntu12.04下，我们用gnu-arm-build.2的脚本就能编译成功</p>\n</blockquote>\n<p>##当然，解决办法还是有的:<br>","more":"</p>\n<h2 id=\"修改osmocom-bb以下五个文件\"><a href=\"#修改osmocom-bb以下五个文件\" class=\"headerlink\" title=\"修改osmocom-bb以下五个文件\"></a>修改osmocom-bb以下五个文件</h2><pre><code>src/target/firmware/board/compal/highram.lds\nsrc/target/firmware/board/compal/ram.lds\nsrc/target/firmware/board/compal_e88/flash.lds\nsrc/target/firmware/board/compal_e88/loader.lds\nsrc/target/firmware/board/mediatek/ram.lds\n</code></pre><h2 id=\"找到每个文件中的-KEEP-SORT-ctors-一行，在其下面加入新的一行-KEEP-SORT-init-array\"><a href=\"#找到每个文件中的-KEEP-SORT-ctors-一行，在其下面加入新的一行-KEEP-SORT-init-array\" class=\"headerlink\" title=\"找到每个文件中的 KEEP((SORT(.ctors))) 一行，在其下面加入新的一行 KEEP((SORT(.init_array)))\"></a>找到每个文件中的 KEEP(<em>(SORT(.ctors))) 一行，在其下面加入新的一行 KEEP(</em>(SORT(.init_array)))</h2><p>例如：</p>\n<pre><code>LONG(SIZEOF(.ctors) / 4 - 2)\n/* ctor pointers */\nKEEP(*(SORT(.ctors)))\nKEEP(*(SORT(.init_array)))\n/* end of list */\nLONG(0)\n</code></pre><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/fix_cell_log.png\" alt=\"fix_cell_log\"></p>\n<h2 id=\"执行编译\"><a href=\"#执行编译\" class=\"headerlink\" title=\"执行编译\"></a>执行编译</h2><pre><code>cd /root/armtoolchain/osmocom-bb/src\nmake -e CROSS_TOOL_PREFIX=arm-none-eabi-\n</code></pre><p></br></p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>虚拟机Vmware + Ubuntu12.04 + c118 + 数据连接线 + FT232RL模块<br>Ubuntu12.04:<a href=\"magnet:?xt=urn:btih:9645EAC5BE3309982D6BCD559DDB30E8A7D163C9 c118\">下载地址</a><br>种子文件:<a href=\"http://pan.baidu.com/s/1gfjoZ3l\">pan.baidu.com/s/1gfjoZ3l</a>密码:jjth<br>C118:<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/C118.jpg?imageView2/1/w/200/h/200\" alt=\"C118\"></p>\n<p>数据连接线:<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E6%95%B0%E6%8D%AE%E7%BA%BF.jpg?imageView2/1/w/200/h/200\" alt=\"数据线1\"><br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E6%95%B0%E6%8D%AE%E7%BA%BF%202.jpg?imageView2/1/w/200/h/200\" alt=\"数据线2\"></p>\n<p>FT232RL模块:<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/FT232RL.jpg?imageView2/1/w/200/h/200\" alt=\"FTR232R\"></p>\n<p>PS.记住所有操作在sudo -s root权限下操作。<br>Ubuntu 的软件源配置文件是 /etc/apt/sources.list。将系统自带的该文件做个备份，将该文件替换为下面内容，即可使用 TUNA 的软件源镜像。</p>\n<pre><code>deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise main multiverse restricted universe\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-backports main multiverse restricted universe\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-proposed main multiverse restricted universe\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-security main multiverse restricted universe\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-updates main multiverse restricted universe\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise main multiverse restricted universe\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-backports main multiverse restricted universe\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-proposed main multiverse restricted universe\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-security main multiverse restricted universe\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ precise-updates main multiverse restricted universe\n</code></pre><blockquote>\n<p>apt-get update</p>\n</blockquote>\n<h2 id=\"环境依赖\"><a href=\"#环境依赖\" class=\"headerlink\" title=\"环境依赖\"></a>环境依赖</h2><pre><code>sudo apt-get install aptitude libtalloc2 libtalloc2-dbg python-talloc python-talloc-dbg python-talloc-dev libtalloc-dev automake libusb-dev libpcsclite-dev libusb-0.1-4 libpcsclite1 libccid pcscd libtool shtool autoconf git-core pkg-config make gcc build-essential libgmp3-dev libmpfr-dev libx11-6 libx11-dev texinfo flex bison libncurses5 libncurses5-dbg libncurses5-dev libncursesw5 libncursesw5-dbg libncursesw5-dev zlibc zlib1g-dev libmpfr4 libmpc-dev libpcsclite-dev libfftw3-dev libfftw3-doc\n\n\naptitude install libtool shtool automake autoconf git-core pkg-config make gcc\n</code></pre><h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>这里建议用迅雷下载好再拖到虚拟机里面<br>打包下载放到/root目录下即可<a href=\"http://pan.baidu.com/s/1i5sGAKt\">pan.baidu.com/s/1i5sGAKt</a> 密码: gvuv</p>\n<pre><code>http://bb.osmocom.org/trac/raw-attachment/wiki/GnuArmToolchain/gnu-arm-build.2.sh\nhttp://ftp.gnu.org/gnu/gcc/gcc-4.5.2/gcc-4.5.2.tar.bz2\nhttp://ftp.gnu.org/gnu/binutils/binutils-2.21.1a.tar.bz2\nftp://sources.redhat.com/pub/newlib/newlib-1.19.0.tar.gz\n</code></pre><p>把下载好的3个包放到src目录下<br>目录结构<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png\" alt=\"目录结构\"></p>\n<pre><code>cd /root/armtoolchain\nchmod +x gnu-arm-build.2.sh\n./gnu-arm-build.2.sh\n</code></pre><p>大约20分钟后出现下面代码代表编译完成</p>\n<blockquote>\n<p>Build complete! Add /root/arm_toolchain/install/bin to your PATH to make arm-elf-gcc and friends accessible directly</p>\n</blockquote>\n<p>把以下代码加到~/.bashrc的最后一行</p>\n<blockquote>\n<p>export PATH=$PATH:/root/armtoolchain/install/bin</p>\n</blockquote>\n<p>执行一下让其生效</p>\n<blockquote>\n<p>source ~/.bashrc</p>\n</blockquote>\n<p>当你在命令行输入arm再按两下tab出现下图的时候，代表编译环境配置好了<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/arm%E9%93%BE.png\" alt=\"arm链\"></p>\n<h2 id=\"libosmocore\"><a href=\"#libosmocore\" class=\"headerlink\" title=\"libosmocore\"></a>libosmocore</h2><pre><code>cd /root\ngit clone git://git.osmocom.org/libosmocore.git\ncd libosmocore/\nautoreconf -i\n./configure\nmake\nsudo make install\nsudo ldconfig -i\n</code></pre><p>这里可能有个坑，执行完上述代码后在命令行输入arm再按两下tab的时候，arm链会莫名其妙的消失，需要再去~/.bashrc再配置一遍,如果arm链正常就不需要配置了</p>\n<h2 id=\"Osmocom-bb\"><a href=\"#Osmocom-bb\" class=\"headerlink\" title=\"Osmocom-bb\"></a>Osmocom-bb</h2><pre><code>cd /root\ngit clone git://git.osmocom.org/osmocom-bb.git\ncd osmocom-bb\ngit checkout --track origin/luca/gsmmap #选择luca/gsmmap分支 \ncd src\nmake #交叉编译\n</code></pre><p>如果没什么问题，软件环境和固件就都编译好了。<br>Ununtu 12.04自带FT232R驱动，所以直接连接就能使用，不需要再装驱动。</p>\n<h2 id=\"加载Firmware到手机raw中\"><a href=\"#加载Firmware到手机raw中\" class=\"headerlink\" title=\"加载Firmware到手机raw中\"></a>加载Firmware到手机raw中</h2><pre><code>cd /root/armtoolchain/osmocom-bb/src/host/osmocon ./osmocon -m c123xor -p /dev/ttyUSB0 ../../target/firmware/board/compal_e88/layer1.compalram.bin\n</code></pre><p>上面命令需要在关机下执行，然后短按开机键<br>手机屏幕显示Layer 1 osmocom-bb 字样就表示成功了<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/Layer1.jpg?imageView2/1/w/200/h/200\" alt=\"Layer1\"></p>\n<h2 id=\"扫描基站\"><a href=\"#扫描基站\" class=\"headerlink\" title=\"扫描基站\"></a>扫描基站</h2><pre><code>cd /root/armtoolchain/osmocom-bb/src/host/layer23/src/misc/\n./cell_log –O\n</code></pre><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/ARFCN.jpg?imageView2/1/w/200/h/200\" alt=\"ARFCN\"></p>\n<p>THE_ATFCN_ID就是扫描到的日志中参数ARFCN的值，尽可能选信号好的</p>\n<pre><code>cd /root/armtoolchain/osmocom-bb/src/host/layer23/src/misc/\n./ccch_scan -i 127.0.0.1 -a THE_ATFCN_ID\n</code></pre><p>上图第一个基站的ARFCN就是40</p>\n<p>苹果手机可以执行：<code>*3001#12345#*</code><br>进入工程模式后，选择GSM Cell Environment-&gt;GSM Cell Info-&gt;GSM Serving Cell,就可以看到目前手机连接的基站ARFCN值了，应该在第二步中，也能看到这个ID存在。</p>\n<p>更多姿势请看这里:<a href=\"http://www.92ez.com/?action=show&amp;id=23342\">osmocom-bb中cell_log的多种使用姿势</a></p>\n<p>因为osmocomBB执行之后默认会在本地开启4729端口，这时候的GSM协议已经被封装上了TCP-IP，可以在本地用wireshark抓到，所以我们使用wireshark去监听4729的端口<br>wireshark打开错误的话需要到/usr/share/wireshark/init.lua文件注释掉倒数第二行</p>\n<blockquote>\n<p>wireshark -k -i lo -f ’port 4729</p>\n</blockquote>\n<p>在wireshark中过滤gsm_sms协议数据，过滤之后得到的数据里面就包含短信的明文信息<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E7%9F%AD%E4%BF%A1%E6%8D%95%E8%8E%B7.jpg\" alt=\"短信拦截\"></p>\n<h2 id=\"Some-Questions\"><a href=\"#Some-Questions\" class=\"headerlink\" title=\"Some Questions\"></a>Some Questions</h2><p>GSM sniffer嗅探一段时间出错问题的解决方法:<br>这里我分成两种情况来说。<br>当你看到此文时你可能已经成功嗅探，只是没有打补丁。意思是你已经配置好了环境，那么打补丁就更简单了。首先你需要删掉</p>\n<blockquote>\n<p>osmocom-bb/src/host/layer23/src/misc/app_ccch_scan.c<br>osmocom-bb/src/host/layer23/src/misc/app_ccch_scan.o</p>\n</blockquote>\n<p>这两个文件，删除之后下载补丁文件app_ccch_scan.c文件，链接: <a href=\"http://pan.baidu.com/s/1bpDPrDt\">http://pan.baidu.com/s/1bpDPrDt</a> 密码: 3wvp<br>下载此文件放入osmocom-bb/src/host/layer23/src/misc/目录下，如果出现没有权限的错误，请赋予权限。然后切换到目录下执行编译</p>\n<pre><code>cd osmocom-bb/src/\nmake\n</code></pre><p>如果出现git的版本问题，执行下这个命令</p>\n<blockquote>\n<p>git checkout -f</p>\n</blockquote>\n<p>然后再编译，编译完成后就可以了。</p>\n<p>第二种情况是你看到这篇文章后打算重新来一遍，那么你前面的步骤依旧，直到你执行了这句</p>\n<blockquote>\n<p>git checkout –track origin/luca/gsmmap</p>\n</blockquote>\n<p>如果出现git版本问题没有成功，请执行上面说到的那个git版本问题解决的命令再切换分支，切换分支成功之后，下载补丁文件覆盖掉原有的文件，然后执行make编译，编译完成即可。</p>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E5%A4%9A%E6%9C%BA%E5%97%85%E6%8E%A2.jpg\" alt=\"多机嗅探\"><br>一台C118一次只能针对一个ARFCN进行拦截而且每次嗅探需要打开多个窗口<br>要是能写个自动化的嗅探脚本，再保存到数据库在Web界面实时展示信息就好了<br>是的。大牛们已经做出多机嗅探和Web展示的脚本。这里要膜拜一下~</p>\n<h2 id=\"WEB界面搭建配置\"><a href=\"#WEB界面搭建配置\" class=\"headerlink\" title=\"WEB界面搭建配置\"></a>WEB界面搭建配置</h2><h3 id=\"Debian\"><a href=\"#Debian\" class=\"headerlink\" title=\"Debian:\"></a>Debian:</h3><pre><code>sudo apt-get install mysql-server python-mysqldb\n</code></pre><h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP:\"></a>PHP:</h3><pre><code>apt-get install php5 php-pear php5-mysql\nservice apache2 restart\n</code></pre><h3 id=\"Linux-Fedora-CentOS系统：\"><a href=\"#Linux-Fedora-CentOS系统：\" class=\"headerlink\" title=\"Linux Fedora, CentOS系统：\"></a>Linux Fedora, CentOS系统：</h3><pre><code>yum install MySQL-python\n</code></pre><h2 id=\"下载web界面程序\"><a href=\"#下载web界面程序\" class=\"headerlink\" title=\"下载web界面程序\"></a>下载web界面程序</h2><p>链接:<a href=\"http://pan.baidu.com/s/1nuHYzZb\"> http://pan.baidu.com/s/1nuHYzZb</a> 密码: 43h4</p>\n<blockquote>\n<p>getusb.sh<br>m.py<br>smshack_nosql.py<br>smshack.sql</p>\n</blockquote>\n<p>以上4个文件放在root文件夹下<br>sms_web文件夹复制到/var/www/下</p>\n<h2 id=\"安装phpadmin-按提示配置MySql数据库\"><a href=\"#安装phpadmin-按提示配置MySql数据库\" class=\"headerlink\" title=\"安装phpadmin,按提示配置MySql数据库\"></a>安装phpadmin,按提示配置MySql数据库</h2><pre><code>sudo apt-get install phpmyadmin\ncd /var/www/html\nsudo ln -s /usr/share/phpmyadmin phpmyadmin\n</code></pre><h2 id=\"导入数据库\"><a href=\"#导入数据库\" class=\"headerlink\" title=\"导入数据库\"></a>导入数据库</h2><p>打开浏览器，输入<a href=\"http://localhost/phpmyadmin\">http://localhost/phpmyadmin</a><br>通过界面导入smshack.sql<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E5%AF%BC%E5%85%A5smssql.png\" alt=\"导入sql\"></p>\n<h2 id=\"修改-var-www-sms-web-bin下的sms-php文件的MySql用户名密码-否则会刷新不出SMS信息\"><a href=\"#修改-var-www-sms-web-bin下的sms-php文件的MySql用户名密码-否则会刷新不出SMS信息\" class=\"headerlink\" title=\"修改/var/www/sms_web/bin下的sms.php文件的MySql用户名密码,否则会刷新不出SMS信息\"></a>修改/var/www/sms_web/bin下的sms.php文件的MySql用户名密码,否则会刷新不出SMS信息</h2><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/sms_php.png\" alt=\"sms_php\"></p>\n<h2 id=\"修改m-py设置登陆MySql的用户名密码、数据库名称\"><a href=\"#修改m-py设置登陆MySql的用户名密码、数据库名称\" class=\"headerlink\" title=\"修改m.py设置登陆MySql的用户名密码、数据库名称\"></a>修改m.py设置登陆MySql的用户名密码、数据库名称</h2><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/m.png\" alt=\"m脚本\"><br>执行</p>\n<blockquote>\n<p>python m.py</p>\n</blockquote>\n<p>并按提示操作</p>\n<h2 id=\"浏览器访问http-localhost-sms-web\"><a href=\"#浏览器访问http-localhost-sms-web\" class=\"headerlink\" title=\"浏览器访问http://localhost/sms_web\"></a>浏览器访问<a href=\"http://localhost/sms_web\">http://localhost/sms_web</a></h2><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/web.jpg\" alt=\"web\"></p>\n<h2 id=\"关于嗅探\"><a href=\"#关于嗅探\" class=\"headerlink\" title=\"关于嗅探\"></a>关于嗅探</h2><p>因为我们买的便宜货，每个手机只能嗅探一个信道，具体一些的，可以参考下面的图（我们现在只能抓Downlink的数据包）：<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/ARFCN_Channel.jpg\" alt=\"channel\"></p>\n<p>因为想要Sniffer Uplink的包，要修改硬件，C118主板上的RX filters要换掉，换成我们需要的HHM1625&amp;&amp;HHM1623C1滤波器组件，才能抓Uplink的数据包。<br>有关信道号ARFCN的问题，可以参考下面的图：<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/channel.jpg\" alt=\"ARFCN_channel\"></p>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><blockquote>\n<p>现在2G短信越来越少了，多等等会有的。理论上话音一样能够被监听及解码，只是涉及技术更为复杂。<br>CP210x的接线，RX和TX有可能需要对调。运行cp210x-program需要先安装ibusb-dev，如果输出是“No devices found”或“Unable to send request, 3709 result=-110”，则有问题<br>*可以参考：CP210x Tutorial</p>\n</blockquote>\n<p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E8%83%BD%E4%B8%8D%E8%83%BD%E5%86%8D%E7%BB%99%E5%8A%9B%E7%82%B9.jpg\" alt=\"再给力点\"></p>\n<h2 id=\"后期计划\"><a href=\"#后期计划\" class=\"headerlink\" title=\"后期计划\"></a>后期计划</h2><p>捕获上行包<br>因为想要嗅探Uplink的包，要修改硬件，C118主板上的RX filters要换掉，换成我们需要的HHM1625&amp;&amp;HHM1623C1滤波器组件，才能抓Uplink的数据包。要使手机能够成为『passive uplink sniffer』，必须动到电烙铁，替换掉RX filters。<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/%E8%BF%87%E6%BB%A4%E5%99%A8.jpg\" alt=\"过滤器\"><br>替换前：<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/before.jpg\" alt=\"更改前\"><br>摘掉后：<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/change.jpg\" alt=\"摘掉后\"><br>替换后：<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/after.jpg\" alt=\"替换\"></p>\n<h2 id=\"使用OsmocomBB-RSSI-monitor查看信号强弱：\"><a href=\"#使用OsmocomBB-RSSI-monitor查看信号强弱：\" class=\"headerlink\" title=\"使用OsmocomBB RSSI monitor查看信号强弱：\"></a>使用OsmocomBB RSSI monitor查看信号强弱：</h2><pre><code>./osmocom-bb/src/host/osmocon/osmocon -p /dev/ttyUSB0 -m c123xor -c ./osmocom-bb/src/target/firmware/board/compal_e88/rssi.highram.bin ./osmocom-bb/src/target/firmware/board/compal_e88/chainload.compalram.bin\n</code></pre><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/rssi.jpg\" alt=\"rssi\"><br>由于RSSI太大，不便于像OsmocomBB那样直接加载，所以要先用-C参数加载一个小的chainloader程序去加载我们真正的RSSI Payload程序。<br>参考：<a href=\"http://bb.osmocom.org/trac/wiki/rssi.bin\">http://bb.osmocom.org/trac/wiki/rssi.bin</a></p>\n<p>多机嗅探强烈建议看:<a href=\"http://www.92ez.com/?action=show&amp;id=23363\">如何让GSM Sniffer变得更加智能化</a></p>\n<h2 id=\"GSM网络相关知识\"><a href=\"#GSM网络相关知识\" class=\"headerlink\" title=\"GSM网络相关知识\"></a>GSM网络相关知识</h2><blockquote>\n<p>推荐看看 GSM network and services 2G1723 2006<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/MS_BSS.jpg\" alt=\"MS_BSS\"></p>\n</blockquote>\n<p>从协议图中得知，移动设备(MS)和基站(BTS)间使用Um接口，最底层就是刷入手机的layer1物理传输层，之上分别是layer2数据链路层和layer3网络层。<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/LAPDm.jpg\" alt=\"LAPDm\"><br>位于图中layer2的LAPDm，是一种保证数据传输不会出错的协议。一个LAPDm帧共有23个字节（184个比特），提供分片管理控制等功能。<br>layer3的协议则可以分为RR/MM/CM三种，这里只列出嗅探相关的功能：</p>\n<blockquote>\n<p>RR(Radio Resource Management)：channel, cell（控制等信息，可以忽略）<br>MM(Mobility Management)：Location updating（如果需要接收方号码，需要关注这个动作）<br>CM(Connection Management)：Call Control(语音通话时的控制信息，可以知道何时开始捕获TCH),SMS（这里的重点）</p>\n</blockquote>\n<p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/Layer3.jpg\" alt=\"Layer3\"><br>参考GSM的文档 TS 04.06 得知 LAPDm 的Address field字段中，定义了 3.3.3 Service access point identifier (SAPI)。SAPI=3就是我们要的Short message service。<br>使用tcpdump配合show_gsmtap_sms.py脚本在console列出短信明文。</p>\n<blockquote>\n<p>tcpdump -l -ilo -nXs0 udp and port 4729 | python2 -u show_gsmtap_sms.py</p>\n</blockquote>\n<h2 id=\"一些名词解释\"><a href=\"#一些名词解释\" class=\"headerlink\" title=\"一些名词解释\"></a>一些名词解释</h2><blockquote>\n<p>MS：Mobile Station，移动终端；<br>IMSI：International Mobile Subscriber Identity，国际移动用户标识号，是TD系统分给用户的唯一标识号，它存储在SIM卡、HLR/VLR中，最多由15个数字组成；<br>MCC：Mobile Country Code，是移动用户的国家号，中国是460；<br>MNC：Mobile Network Code ，是移动用户的所属PLMN网号，中国移动为00、02，中国联通为01；<br>MSIN：Mobile Subscriber Identification Number，是移动用户标识；<br>NMSI：National Mobile Subscriber Identification，是在某一国家内MS唯一的识别码；<br>BTS：Base Transceiver Station，基站收发器；<br>BSC：Base Station Controller，基站控制器；<br>MSC：Mobile Switching Center，移动交换中心。移动网络完成呼叫连接、过区切换控制、 无线信道管理等功能的设备，同时也是移动网与公用电话交换网(PSTN)、综合业务数字网(ISDN)等固定网的接口设备；<br>HLR：Home location register。保存用户的基本信息，如你的SIM的卡号、手机号码、签约信息等，和动态信息，如当前的位置、是否已经关机等；<br>VLR：Visiting location register，保存的是用户的动态信息和状态信息，以及从HLR下载的用户的签约信息；<br>CCCH：Common Control CHannel，公共控制信道。是一种“一点对多点”的双向控制信道，其用途是在呼叫接续阶段，传输链路连接所需要的控制信令与信息。</p>\n</blockquote>\n<h2 id=\"GSM-Sniffer-嗅探的一些疑惑解答\"><a href=\"#GSM-Sniffer-嗅探的一些疑惑解答\" class=\"headerlink\" title=\"GSM Sniffer 嗅探的一些疑惑解答:\"></a>GSM Sniffer 嗅探的一些疑惑解答:</h2><h3 id=\"为何只有改过滤波器的机器才能嗅探到上行的短信？\"><a href=\"#为何只有改过滤波器的机器才能嗅探到上行的短信？\" class=\"headerlink\" title=\"为何只有改过滤波器的机器才能嗅探到上行的短信？\"></a>为何只有改过滤波器的机器才能嗅探到上行的短信？</h3><blockquote>\n<p>首先，我们可以站在手机制造商的角度去看这个问题。<br>作为一个手机，应该具备的功能是接收基站发给自己的信号，以及主动向基站发送信号。手机与基站的信号传递分为上行和下行。下行就是基站下发到手机上的信号，上行就是手机发往基站的信号。手机收发短信的时候并不需要接收周围其他手机的信号，其他手机爱发什么发什么，管我屁事。上行频率跟下行频率是不同的。<br>手机制造商在制造手机的时候只 需要手机支持两种频率，第一，基站发送给手机的下行频率。我们嗅探下行，其实就是因为手机本身可以接收下行的频率。那么我们再想一下，我们需要嗅探上行的 短信，该怎么办呢？上行是手机发往基站的信号，我们只要让手机能接收上行的频率就可以了。<br>对，就是这样。暂且我们将手机想象成一个小型基站，其实在发短信这个过程中，手机确实充当的是发射台的角色，基站则变身为接收端，如果此时我们的手机可以接收上行频率，那么我们就可以嗅探上行短信了。但是手机本身是不能接收上行频率的，因为手机的本质工作也不需要这个。<br>那么，我们需要支持上行频率该怎么办呢？没错，就是修改手机的滤波器。滤波器，顾名思义，就是过滤电磁波的原件，空气中电磁波那么多，我们需要的只是一个频段的频率，所以，滤波器就把接收到的所有的信号过滤，只需要GSM 频段的电磁波。我们都知道，GSM信号的频率是有一个范围的，不同国家之间啊也有差异。但是基本上是在850Mhz到900Mhz之间这一段。上行频率不在这个频段。我们修改滤波器，将能够接收的频率范围扩宽，把上行频率的范围包含进来，这样我们既可以嗅探上行，也可以嗅探下行了。<br>这在RTL-SDR中是一样的，SDR接收的频率范围比较广，包含了GSM上行和下行的所有频段，所以SDR也可以用来做GSM Sniffer。</p>\n</blockquote>\n<h3 id=\"问题一：改过的机子搜索到的基站好少，而且信号差很多，是不是改机把主板改坏了？\"><a href=\"#问题一：改过的机子搜索到的基站好少，而且信号差很多，是不是改机把主板改坏了？\" class=\"headerlink\" title=\"问题一：改过的机子搜索到的基站好少，而且信号差很多，是不是改机把主板改坏了？\"></a>问题一：改过的机子搜索到的基站好少，而且信号差很多，是不是改机把主板改坏了？</h3><blockquote>\n<p>解释：这个问题是最常见的，很多朋友在拿到改好的机子之后测试普遍有这个感觉，改过的机子跟没改的机子进行对比，很明显就能发现，搜索到的基站数量并没有没改的多。而且信号衰减也严重。信号衰减是很正常的。这里得说到改机的作用。</p>\n</blockquote>\n<h3 id=\"我们为何要改机呢？\"><a href=\"#我们为何要改机呢？\" class=\"headerlink\" title=\"我们为何要改机呢？\"></a>我们为何要改机呢？</h3><blockquote>\n<p>很多朋友都没有去思考这个问题。不改机为什么收不到上行呢？博主在这要说的是，既然是做学问，搞研究，爱折腾，就应该去问一下自己这些问题，而不是看到网上有人说改机可嗅探上行就觉得一定要改机，改机出问题了找不到答案就开始各种问。与其花费大量时间去寻找信号衰减的答案，还不如先思考些改机的原理。在这块很多朋友做的还是不够啊。<br>博主在一开始就说到了修改滤波器可以收到上行。修改滤波器的目的就是扩宽接收频率的范围，那么问题来了，接收的范围越大，接收到的电波信号越多，那么噪音就越多，什么是噪音呢？噪音就是指的与自己需要的不相关的东西，再加上我们改机的时候拆除了主板上的屏蔽盖，很容易受到各种电磁干扰，所以会导致信号衰减严重。这并不是因为手机主板的问题。有的时候选用的滤波器原件品质也可能会影响到信号。博主改机目前能达到的水平是信号衰减控制在5db~12db之间。</p>\n</blockquote>\n<h3 id=\"问题二：为什么我嗅探了好久都没收到上行短信，或者为何我收到的上行短信数量很少呢？\"><a href=\"#问题二：为什么我嗅探了好久都没收到上行短信，或者为何我收到的上行短信数量很少呢？\" class=\"headerlink\" title=\"问题二：为什么我嗅探了好久都没收到上行短信，或者为何我收到的上行短信数量很少呢？\"></a>问题二：为什么我嗅探了好久都没收到上行短信，或者为何我收到的上行短信数量很少呢？</h3><blockquote>\n<p>解释：这个问题也不难想通。你想一下，基站对手机是一对多的关系，单位时间里面一个基站发出来的短信少则几十条，多则几万条，平均分配到每个信道每个频点上也不算少。<br>而对于上行来说，博主在开始就介绍了上行嗅探的原理，上行是手机对基站，一对一的关系，试想一下，如果你周围同时有几万人在发短信，而且是在向同一个基站发送短信，而且这个距离你手机接收上行信号没有问题，那么，你接收到的上行短信肯不比下行的少。问题是这种情况现实中有吗？答案是否。现实中不可能有几万人在你周围同时向一个基站发短信。况且，你的手机接收别人的手机信号，距离也是有限制的。<br>我们在接收下行的时候，基站能够覆盖一大片区域，是因为他的功率非常大。而手机发短信的时候功率是非常小的，你手机能接收到上行信号的距离非常有限。这就导致了接收上行短信的数量非常少。而不是因为手机本身有问题导致的。<br>希望我的解释能够让你眼前一亮，豁然开朗。</p>\n</blockquote>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p>1.<a href=\"https://github.com/osmocom/osmocom-bb\">https://github.com/osmocom/osmocom-bb</a><br>2.<a href=\"http://bb.osmocom.org/trac/wiki/TitleIndex\">http://bb.osmocom.org/trac/wiki/TitleIndex</a><br>3.<a href=\"http://wulujia.com/2013/11/10/OsmocomBB-Guide/\">http://wulujia.com/2013/11/10/OsmocomBB-Guide/</a><br>4.<a href=\"https://blog.hqcodeshop.fi/archives/253-iPhone-cell-Field-Test-mode.html\">https://blog.hqcodeshop.fi/archives/253-iPhone-cell-Field-Test-mode.html</a><br>5.<a href=\"http://bbs.pediy.com/showthread.php?t=182574\">http://bbs.pediy.com/showthread.php?t=182574</a><br>6.<a href=\"http://www.92ez.com/?action=show&amp;id=23342\">http://www.92ez.com/?action=show&amp;id=23342</a><br>7.<a href=\"https://www.nigesb.com/gsm-hacker-sheet.html\">https://www.nigesb.com/gsm-hacker-sheet.html</a><br>8.<a href=\"http://le4f.net/post/post/gsm-sniffer-hacking-toolkits-demo\">http://le4f.net/post/post/gsm-sniffer-hacking-toolkits-demo</a><br>9.<a href=\"http://le4f.net/post/post/compile-osmocombb&amp;problems-about-gsm-sniffer\">http://le4f.net/post/post/compile-osmocombb&amp;problems-about-gsm-sniffer</a></p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E7%86%8A%E6%9C%AC%E7%86%8A%E8%B6%85%E5%B8%85_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>"},{"title":"MHP Tunnel服务器的另类搭建方式","date":"2017-01-21T16:00:06.000Z","_content":"\n### 前言\n今年回到家里之后一直好奇怎么在MHP Tunnel自建服务器，在这之前(PSP Tunnel还没出来的时候)玩家主要是靠DMZ主机来构成一个Host-Client的形式来相互联机，然而这[DMZ不安全][0]。简而言之，DMZ会把你当前的路由器或者主机暴露在外网环境，没有特殊配置很容易遭到攻击或者变成肉鸡。很久之前淘宝上很多qq刷砖多是以肉鸡来刷，宽带续费，显示的到期日期是2070-01-01。\n奈何Google了很久也没有找到MHP Tunnel的Unix服务器端，又不想用DMZ形式来搭建，这时一个关键词出现了：**ngrok**\n<br>\n\n<!--more-->\n\n### ngrok\n这东西还是听过的（在我被花生壳坑了之后），多用于内网穿透。\n举个例子：我有台服务器A在校内实验室，回到家之后无法用外网直接访问。但是我有一台能通过外网访问的VPS服务器B，那么在B上用ngrok反代A，那么我就能通过B的端口来访问A。\n<br>\n**感谢Sunny**，让这个教程简单了很多\n![1][1]\n如果只是搭建MHP Tunnel服务器的话就不必买服务器了\n但我还是希望**对ngrok有需求**，有能力的同学可以购买VIP服务器以示支持\n<br>\n\n### Getting Start\n\n#### 注册登录\n[注册][2]---->[登录][3]\n <br>\n \n#### 开通隧道\n 选免费的那个点击购买即可\n ![4][4]\n <br>\n \n#### 隧道设置\n![5][5]\n\n> 隧道协议：mhptunnel的服务器选**tcp**即可， http多用于访问web服务器\n 远程端口：就是Sunny的服务器分配给你从外部访问的端口，填写一个未被占用的端口即可\n 本地端口：鉴于MHP TUNNEL我找不到Unix版本，所以我们在Windows搭建。这里我们填写本机:端口，我本机是192.168.1.149:3000，3000也可以随便填写，只要这个端口未被系统占用即可\n \n #### 查看本机ip地址\n> Win + R进入CMD，输入**ipconfig**\n\n![6][6]\n<br>\n![7][7]\n<br>\n找到你**现在连接到网络的网卡**的ip，我这里是192.168.1.149\n![22][22]\n[22]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%88%91%E7%9A%84ip%E5%9C%B0%E5%9D%80.png\n<br>\n\n#### 路由器开启UPNP\n![8][8]\n<br>\n我的路由器是OpenWRT系统设置起来没有太大问题，其他牌子的路由器进后台管理找到UPNP开启即可\n![9][9]\n<br>\n**记得保存并应用**\n![10][10]\n<br>\n\n#### 启动ngrok\n下载[MHP Tunnel服务器搭建工具][11] 密码：**hs2g**，解压\n<br>\n然后在隧道管理找到你的隧道id\n![12][12]\n<br>\n打开**Sunny-Ngrok启动工具.bat**并输入你的隧道id，回车。看到这个就表示服务器端启动成功\n![19][19]\n<br>\n[19]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/ngrok%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png\n这时我们在浏览器输入下面的那个127.0.0.1:4040的地址显示这个即表示tcp隧道已经开启了\n![18][18]\n[18]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/127_4040.png\n<br>\n\n#### Tunnel服务器开启\n**Update**\n> **不需要MHP Tunnel也可以开启服务器！**\n  **不需要MHP Tunnel也可以开启服务器！**\n  **不需要MHP Tunnel也可以开启服务器！**\n\n只要ngrok和路由器的UPNP功能开启即可，只开一个PSP Tunnel勾选上**使用UPNP Gateway**然后填上**本机IP**和任意端口创建服务器。但这样在PSP Tunnel上无法公开你的服务器信息，就像隐身了一样，联机前需要把设置好的ngrok服务器地址和端口告诉别人。\n\n\n> Q：为什么要用旧版的MHP Tunnel？\n  A：因为不能同时开两个PSP Tunnel。MHP Tunnel当服务器，PSP Tunnel(对新游戏支持较多)当游戏端.当然你说以服务器主人的形式玩游戏，那还是比较霸气的\n  \n  ![13][13]\n  <br>\n\n首先在MHP Tunnel客户端的设定勾选**使用UPNP Gateway**\n![14][14]\n<br>\n不知道是不是我这里有问题，点联机的选项会弹出一个错误，影响不大\n![15][15]\n[15]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E8%81%94%E6%9C%BA%E9%94%99%E8%AF%AF%E6%98%BE%E7%A4%BA.png\n<br>\nIP：填写你的**本机ip**\n端口：填写刚才我说可以乱填的那个**3000**端口（逃\n![16][16]\n[16]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8.png\n<br>\n这样服务器就算搭建起来了\n![17][17]\n[17]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F.png\n<br>\n\n#### PSP Tunnel连接测试\n> 打开PSP Tunnel，ip和端口填**隧道id管理**提供给你的服务器地址和端口\n\n来测试下\n![20][20]\n[20]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%B5%8B%E8%AF%95%E8%81%94%E6%9C%BA%E6%95%88%E6%9E%9C.png\n<br>\n感谢X叔第一时间陪我测试（找了好久人。。。\n\n以上全部\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n  ![alipay][99]\n\n**微信**  \n  ![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/shakalaka_ailipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\n\n[0]: [https://zhidao.baidu.com/question/573928865.html]\n[1]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%84%9F%E8%B0%A2Sunny.png\n[2]: https://www.ngrok.cc/login/register\n[3]: https://www.ngrok.cc/login\n[4]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E5%BC%80%E9%80%9A%E9%9A%A7%E9%81%93.png\n[5]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E9%9A%A7%E9%81%93%E8%AE%BE%E7%BD%AE.png \n[6]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/win_R.png \n[7]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BAip%E5%9C%B0%E5%9D%80.png\n[8]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%89%BE%E5%88%B0UPNP.png\n[9]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E5%BC%80%E5%90%AFUPNP.png\n[10]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E4%BF%9D%E5%AD%98%E5%B9%B6%E5%BA%94%E7%94%A8UPNP.png\n[11]: http://pan.baidu.com/s/1c29oU9E \n[12]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/client_id.png\n[13]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E9%9C%B8%E6%B0%94%E7%99%BB%E5%BD%95.png\n[14]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/mhp_tunnel%E5%BC%80%E5%90%AFUPNP.png","source":"_posts/MHP-Tunnel服务器的另类搭建方式.md","raw":"---\ntitle: MHP Tunnel服务器的另类搭建方式\ndate: 2017-01-22 00:00:06\ntags: Video Game\n---\n\n### 前言\n今年回到家里之后一直好奇怎么在MHP Tunnel自建服务器，在这之前(PSP Tunnel还没出来的时候)玩家主要是靠DMZ主机来构成一个Host-Client的形式来相互联机，然而这[DMZ不安全][0]。简而言之，DMZ会把你当前的路由器或者主机暴露在外网环境，没有特殊配置很容易遭到攻击或者变成肉鸡。很久之前淘宝上很多qq刷砖多是以肉鸡来刷，宽带续费，显示的到期日期是2070-01-01。\n奈何Google了很久也没有找到MHP Tunnel的Unix服务器端，又不想用DMZ形式来搭建，这时一个关键词出现了：**ngrok**\n<br>\n\n<!--more-->\n\n### ngrok\n这东西还是听过的（在我被花生壳坑了之后），多用于内网穿透。\n举个例子：我有台服务器A在校内实验室，回到家之后无法用外网直接访问。但是我有一台能通过外网访问的VPS服务器B，那么在B上用ngrok反代A，那么我就能通过B的端口来访问A。\n<br>\n**感谢Sunny**，让这个教程简单了很多\n![1][1]\n如果只是搭建MHP Tunnel服务器的话就不必买服务器了\n但我还是希望**对ngrok有需求**，有能力的同学可以购买VIP服务器以示支持\n<br>\n\n### Getting Start\n\n#### 注册登录\n[注册][2]---->[登录][3]\n <br>\n \n#### 开通隧道\n 选免费的那个点击购买即可\n ![4][4]\n <br>\n \n#### 隧道设置\n![5][5]\n\n> 隧道协议：mhptunnel的服务器选**tcp**即可， http多用于访问web服务器\n 远程端口：就是Sunny的服务器分配给你从外部访问的端口，填写一个未被占用的端口即可\n 本地端口：鉴于MHP TUNNEL我找不到Unix版本，所以我们在Windows搭建。这里我们填写本机:端口，我本机是192.168.1.149:3000，3000也可以随便填写，只要这个端口未被系统占用即可\n \n #### 查看本机ip地址\n> Win + R进入CMD，输入**ipconfig**\n\n![6][6]\n<br>\n![7][7]\n<br>\n找到你**现在连接到网络的网卡**的ip，我这里是192.168.1.149\n![22][22]\n[22]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%88%91%E7%9A%84ip%E5%9C%B0%E5%9D%80.png\n<br>\n\n#### 路由器开启UPNP\n![8][8]\n<br>\n我的路由器是OpenWRT系统设置起来没有太大问题，其他牌子的路由器进后台管理找到UPNP开启即可\n![9][9]\n<br>\n**记得保存并应用**\n![10][10]\n<br>\n\n#### 启动ngrok\n下载[MHP Tunnel服务器搭建工具][11] 密码：**hs2g**，解压\n<br>\n然后在隧道管理找到你的隧道id\n![12][12]\n<br>\n打开**Sunny-Ngrok启动工具.bat**并输入你的隧道id，回车。看到这个就表示服务器端启动成功\n![19][19]\n<br>\n[19]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/ngrok%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png\n这时我们在浏览器输入下面的那个127.0.0.1:4040的地址显示这个即表示tcp隧道已经开启了\n![18][18]\n[18]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/127_4040.png\n<br>\n\n#### Tunnel服务器开启\n**Update**\n> **不需要MHP Tunnel也可以开启服务器！**\n  **不需要MHP Tunnel也可以开启服务器！**\n  **不需要MHP Tunnel也可以开启服务器！**\n\n只要ngrok和路由器的UPNP功能开启即可，只开一个PSP Tunnel勾选上**使用UPNP Gateway**然后填上**本机IP**和任意端口创建服务器。但这样在PSP Tunnel上无法公开你的服务器信息，就像隐身了一样，联机前需要把设置好的ngrok服务器地址和端口告诉别人。\n\n\n> Q：为什么要用旧版的MHP Tunnel？\n  A：因为不能同时开两个PSP Tunnel。MHP Tunnel当服务器，PSP Tunnel(对新游戏支持较多)当游戏端.当然你说以服务器主人的形式玩游戏，那还是比较霸气的\n  \n  ![13][13]\n  <br>\n\n首先在MHP Tunnel客户端的设定勾选**使用UPNP Gateway**\n![14][14]\n<br>\n不知道是不是我这里有问题，点联机的选项会弹出一个错误，影响不大\n![15][15]\n[15]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E8%81%94%E6%9C%BA%E9%94%99%E8%AF%AF%E6%98%BE%E7%A4%BA.png\n<br>\nIP：填写你的**本机ip**\n端口：填写刚才我说可以乱填的那个**3000**端口（逃\n![16][16]\n[16]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8.png\n<br>\n这样服务器就算搭建起来了\n![17][17]\n[17]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F.png\n<br>\n\n#### PSP Tunnel连接测试\n> 打开PSP Tunnel，ip和端口填**隧道id管理**提供给你的服务器地址和端口\n\n来测试下\n![20][20]\n[20]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%B5%8B%E8%AF%95%E8%81%94%E6%9C%BA%E6%95%88%E6%9E%9C.png\n<br>\n感谢X叔第一时间陪我测试（找了好久人。。。\n\n以上全部\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n  ![alipay][99]\n\n**微信**  \n  ![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/shakalaka_ailipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\n\n[0]: [https://zhidao.baidu.com/question/573928865.html]\n[1]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%84%9F%E8%B0%A2Sunny.png\n[2]: https://www.ngrok.cc/login/register\n[3]: https://www.ngrok.cc/login\n[4]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E5%BC%80%E9%80%9A%E9%9A%A7%E9%81%93.png\n[5]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E9%9A%A7%E9%81%93%E8%AE%BE%E7%BD%AE.png \n[6]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/win_R.png \n[7]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BAip%E5%9C%B0%E5%9D%80.png\n[8]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%89%BE%E5%88%B0UPNP.png\n[9]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E5%BC%80%E5%90%AFUPNP.png\n[10]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E4%BF%9D%E5%AD%98%E5%B9%B6%E5%BA%94%E7%94%A8UPNP.png\n[11]: http://pan.baidu.com/s/1c29oU9E \n[12]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/client_id.png\n[13]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E9%9C%B8%E6%B0%94%E7%99%BB%E5%BD%95.png\n[14]: https://of4jd0bcc.qnssl.com/MHP_Tunnel/mhp_tunnel%E5%BC%80%E5%90%AFUPNP.png","slug":"MHP-Tunnel服务器的另类搭建方式","published":1,"updated":"2017-01-21T16:44:14.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv5dxzp0003poogb4lq9bx6","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>今年回到家里之后一直好奇怎么在MHP Tunnel自建服务器，在这之前(PSP Tunnel还没出来的时候)玩家主要是靠DMZ主机来构成一个Host-Client的形式来相互联机，然而这<a href=\"[https://zhidao.baidu.com/question/573928865.html]\">DMZ不安全</a>。简而言之，DMZ会把你当前的路由器或者主机暴露在外网环境，没有特殊配置很容易遭到攻击或者变成肉鸡。很久之前淘宝上很多qq刷砖多是以肉鸡来刷，宽带续费，显示的到期日期是2070-01-01。<br>奈何Google了很久也没有找到MHP Tunnel的Unix服务器端，又不想用DMZ形式来搭建，这时一个关键词出现了：<strong>ngrok</strong><br><br></p>\n<a id=\"more\"></a>\n<h3 id=\"ngrok\"><a href=\"#ngrok\" class=\"headerlink\" title=\"ngrok\"></a>ngrok</h3><p>这东西还是听过的（在我被花生壳坑了之后），多用于内网穿透。<br>举个例子：我有台服务器A在校内实验室，回到家之后无法用外网直接访问。但是我有一台能通过外网访问的VPS服务器B，那么在B上用ngrok反代A，那么我就能通过B的端口来访问A。<br><br><br><strong>感谢Sunny</strong>，让这个教程简单了很多<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%84%9F%E8%B0%A2Sunny.png\" alt=\"1\"><br>如果只是搭建MHP Tunnel服务器的话就不必买服务器了<br>但我还是希望<strong>对ngrok有需求</strong>，有能力的同学可以购买VIP服务器以示支持<br><br></p>\n<h3 id=\"Getting-Start\"><a href=\"#Getting-Start\" class=\"headerlink\" title=\"Getting Start\"></a>Getting Start</h3><h4 id=\"注册登录\"><a href=\"#注册登录\" class=\"headerlink\" title=\"注册登录\"></a>注册登录</h4><p><a href=\"https://www.ngrok.cc/login/register\" target=\"_blank\" rel=\"external\">注册</a>—-&gt;<a href=\"https://www.ngrok.cc/login\" target=\"_blank\" rel=\"external\">登录</a><br> <br></p>\n<h4 id=\"开通隧道\"><a href=\"#开通隧道\" class=\"headerlink\" title=\"开通隧道\"></a>开通隧道</h4><p> 选免费的那个点击购买即可<br> <img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E5%BC%80%E9%80%9A%E9%9A%A7%E9%81%93.png\" alt=\"4\"><br> <br></p>\n<h4 id=\"隧道设置\"><a href=\"#隧道设置\" class=\"headerlink\" title=\"隧道设置\"></a>隧道设置</h4><p><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E9%9A%A7%E9%81%93%E8%AE%BE%E7%BD%AE.png\" alt=\"5\"></p>\n<blockquote>\n<p>隧道协议：mhptunnel的服务器选<strong>tcp</strong>即可， http多用于访问web服务器<br> 远程端口：就是Sunny的服务器分配给你从外部访问的端口，填写一个未被占用的端口即可<br> 本地端口：鉴于MHP TUNNEL我找不到Unix版本，所以我们在Windows搭建。这里我们填写本机:端口，我本机是192.168.1.149:3000，3000也可以随便填写，只要这个端口未被系统占用即可</p>\n</blockquote>\n<h4 id=\"查看本机ip地址\"><a href=\"#查看本机ip地址\" class=\"headerlink\" title=\"查看本机ip地址\"></a>查看本机ip地址</h4><blockquote>\n<p>Win + R进入CMD，输入<strong>ipconfig</strong></p>\n</blockquote>\n<p><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/win_R.png\" alt=\"6\"><br><br><br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BAip%E5%9C%B0%E5%9D%80.png\" alt=\"7\"><br><br><br>找到你<strong>现在连接到网络的网卡</strong>的ip，我这里是192.168.1.149<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%88%91%E7%9A%84ip%E5%9C%B0%E5%9D%80.png\" alt=\"22\"></p>\n<p><br></p>\n<h4 id=\"路由器开启UPNP\"><a href=\"#路由器开启UPNP\" class=\"headerlink\" title=\"路由器开启UPNP\"></a>路由器开启UPNP</h4><p><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%89%BE%E5%88%B0UPNP.png\" alt=\"8\"><br><br><br>我的路由器是OpenWRT系统设置起来没有太大问题，其他牌子的路由器进后台管理找到UPNP开启即可<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E5%BC%80%E5%90%AFUPNP.png\" alt=\"9\"><br><br><br><strong>记得保存并应用</strong><br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E4%BF%9D%E5%AD%98%E5%B9%B6%E5%BA%94%E7%94%A8UPNP.png\" alt=\"10\"><br><br></p>\n<h4 id=\"启动ngrok\"><a href=\"#启动ngrok\" class=\"headerlink\" title=\"启动ngrok\"></a>启动ngrok</h4><p>下载<a href=\"http://pan.baidu.com/s/1c29oU9E\" target=\"_blank\" rel=\"external\">MHP Tunnel服务器搭建工具</a> 密码：<strong>hs2g</strong>，解压<br><br><br>然后在隧道管理找到你的隧道id<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/client_id.png\" alt=\"12\"><br><br><br>打开<strong>Sunny-Ngrok启动工具.bat</strong>并输入你的隧道id，回车。看到这个就表示服务器端启动成功<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/ngrok%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png\" alt=\"19\"><br><br></p>\n<p>这时我们在浏览器输入下面的那个127.0.0.1:4040的地址显示这个即表示tcp隧道已经开启了<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/127_4040.png\" alt=\"18\"></p>\n<p><br></p>\n<h4 id=\"Tunnel服务器开启\"><a href=\"#Tunnel服务器开启\" class=\"headerlink\" title=\"Tunnel服务器开启\"></a>Tunnel服务器开启</h4><p><strong>Update</strong></p>\n<blockquote>\n<p><strong>不需要MHP Tunnel也可以开启服务器！</strong><br>  <strong>不需要MHP Tunnel也可以开启服务器！</strong><br>  <strong>不需要MHP Tunnel也可以开启服务器！</strong></p>\n</blockquote>\n<p>只要ngrok和路由器的UPNP功能开启即可，只开一个PSP Tunnel勾选上<strong>使用UPNP Gateway</strong>然后填上<strong>本机IP</strong>和任意端口创建服务器。但这样在PSP Tunnel上无法公开你的服务器信息，就像隐身了一样，联机前需要把设置好的ngrok服务器地址和端口告诉别人。</p>\n<blockquote>\n<p>Q：为什么要用旧版的MHP Tunnel？<br>  A：因为不能同时开两个PSP Tunnel。MHP Tunnel当服务器，PSP Tunnel(对新游戏支持较多)当游戏端.当然你说以服务器主人的形式玩游戏，那还是比较霸气的</p>\n</blockquote>\n<p>  <img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E9%9C%B8%E6%B0%94%E7%99%BB%E5%BD%95.png\" alt=\"13\"><br>  <br></p>\n<p>首先在MHP Tunnel客户端的设定勾选<strong>使用UPNP Gateway</strong><br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/mhp_tunnel%E5%BC%80%E5%90%AFUPNP.png\" alt=\"14\"><br><br><br>不知道是不是我这里有问题，点联机的选项会弹出一个错误，影响不大<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E8%81%94%E6%9C%BA%E9%94%99%E8%AF%AF%E6%98%BE%E7%A4%BA.png\" alt=\"15\"></p>\n<p><br><br>IP：填写你的<strong>本机ip</strong><br>端口：填写刚才我说可以乱填的那个<strong>3000</strong>端口（逃<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8.png\" alt=\"16\"></p>\n<p><br><br>这样服务器就算搭建起来了<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F.png\" alt=\"17\"></p>\n<p><br></p>\n<h4 id=\"PSP-Tunnel连接测试\"><a href=\"#PSP-Tunnel连接测试\" class=\"headerlink\" title=\"PSP Tunnel连接测试\"></a>PSP Tunnel连接测试</h4><blockquote>\n<p>打开PSP Tunnel，ip和端口填<strong>隧道id管理</strong>提供给你的服务器地址和端口</p>\n</blockquote>\n<p>来测试下<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%B5%8B%E8%AF%95%E8%81%94%E6%9C%BA%E6%95%88%E6%9E%9C.png\" alt=\"20\"></p>\n<p><br><br>感谢X叔第一时间陪我测试（找了好久人。。。</p>\n<p>以上全部</p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br>  <img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/shakalaka_ailipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br>  <img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>\n","excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>今年回到家里之后一直好奇怎么在MHP Tunnel自建服务器，在这之前(PSP Tunnel还没出来的时候)玩家主要是靠DMZ主机来构成一个Host-Client的形式来相互联机，然而这<a href=\"[https://zhidao.baidu.com/question/573928865.html]\">DMZ不安全</a>。简而言之，DMZ会把你当前的路由器或者主机暴露在外网环境，没有特殊配置很容易遭到攻击或者变成肉鸡。很久之前淘宝上很多qq刷砖多是以肉鸡来刷，宽带续费，显示的到期日期是2070-01-01。<br>奈何Google了很久也没有找到MHP Tunnel的Unix服务器端，又不想用DMZ形式来搭建，这时一个关键词出现了：<strong>ngrok</strong><br><br></p>","more":"<h3 id=\"ngrok\"><a href=\"#ngrok\" class=\"headerlink\" title=\"ngrok\"></a>ngrok</h3><p>这东西还是听过的（在我被花生壳坑了之后），多用于内网穿透。<br>举个例子：我有台服务器A在校内实验室，回到家之后无法用外网直接访问。但是我有一台能通过外网访问的VPS服务器B，那么在B上用ngrok反代A，那么我就能通过B的端口来访问A。<br><br><br><strong>感谢Sunny</strong>，让这个教程简单了很多<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%84%9F%E8%B0%A2Sunny.png\" alt=\"1\"><br>如果只是搭建MHP Tunnel服务器的话就不必买服务器了<br>但我还是希望<strong>对ngrok有需求</strong>，有能力的同学可以购买VIP服务器以示支持<br><br></p>\n<h3 id=\"Getting-Start\"><a href=\"#Getting-Start\" class=\"headerlink\" title=\"Getting Start\"></a>Getting Start</h3><h4 id=\"注册登录\"><a href=\"#注册登录\" class=\"headerlink\" title=\"注册登录\"></a>注册登录</h4><p><a href=\"https://www.ngrok.cc/login/register\">注册</a>—-&gt;<a href=\"https://www.ngrok.cc/login\">登录</a><br> <br></p>\n<h4 id=\"开通隧道\"><a href=\"#开通隧道\" class=\"headerlink\" title=\"开通隧道\"></a>开通隧道</h4><p> 选免费的那个点击购买即可<br> <img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E5%BC%80%E9%80%9A%E9%9A%A7%E9%81%93.png\" alt=\"4\"><br> <br></p>\n<h4 id=\"隧道设置\"><a href=\"#隧道设置\" class=\"headerlink\" title=\"隧道设置\"></a>隧道设置</h4><p><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E9%9A%A7%E9%81%93%E8%AE%BE%E7%BD%AE.png\" alt=\"5\"></p>\n<blockquote>\n<p>隧道协议：mhptunnel的服务器选<strong>tcp</strong>即可， http多用于访问web服务器<br> 远程端口：就是Sunny的服务器分配给你从外部访问的端口，填写一个未被占用的端口即可<br> 本地端口：鉴于MHP TUNNEL我找不到Unix版本，所以我们在Windows搭建。这里我们填写本机:端口，我本机是192.168.1.149:3000，3000也可以随便填写，只要这个端口未被系统占用即可</p>\n</blockquote>\n<h4 id=\"查看本机ip地址\"><a href=\"#查看本机ip地址\" class=\"headerlink\" title=\"查看本机ip地址\"></a>查看本机ip地址</h4><blockquote>\n<p>Win + R进入CMD，输入<strong>ipconfig</strong></p>\n</blockquote>\n<p><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/win_R.png\" alt=\"6\"><br><br><br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BAip%E5%9C%B0%E5%9D%80.png\" alt=\"7\"><br><br><br>找到你<strong>现在连接到网络的网卡</strong>的ip，我这里是192.168.1.149<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%88%91%E7%9A%84ip%E5%9C%B0%E5%9D%80.png\" alt=\"22\"></p>\n<p><br></p>\n<h4 id=\"路由器开启UPNP\"><a href=\"#路由器开启UPNP\" class=\"headerlink\" title=\"路由器开启UPNP\"></a>路由器开启UPNP</h4><p><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%89%BE%E5%88%B0UPNP.png\" alt=\"8\"><br><br><br>我的路由器是OpenWRT系统设置起来没有太大问题，其他牌子的路由器进后台管理找到UPNP开启即可<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E5%BC%80%E5%90%AFUPNP.png\" alt=\"9\"><br><br><br><strong>记得保存并应用</strong><br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E4%BF%9D%E5%AD%98%E5%B9%B6%E5%BA%94%E7%94%A8UPNP.png\" alt=\"10\"><br><br></p>\n<h4 id=\"启动ngrok\"><a href=\"#启动ngrok\" class=\"headerlink\" title=\"启动ngrok\"></a>启动ngrok</h4><p>下载<a href=\"http://pan.baidu.com/s/1c29oU9E\">MHP Tunnel服务器搭建工具</a> 密码：<strong>hs2g</strong>，解压<br><br><br>然后在隧道管理找到你的隧道id<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/client_id.png\" alt=\"12\"><br><br><br>打开<strong>Sunny-Ngrok启动工具.bat</strong>并输入你的隧道id，回车。看到这个就表示服务器端启动成功<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/ngrok%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png\" alt=\"19\"><br><br></p>\n<p>这时我们在浏览器输入下面的那个127.0.0.1:4040的地址显示这个即表示tcp隧道已经开启了<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/127_4040.png\" alt=\"18\"></p>\n<p><br></p>\n<h4 id=\"Tunnel服务器开启\"><a href=\"#Tunnel服务器开启\" class=\"headerlink\" title=\"Tunnel服务器开启\"></a>Tunnel服务器开启</h4><p><strong>Update</strong></p>\n<blockquote>\n<p><strong>不需要MHP Tunnel也可以开启服务器！</strong><br>  <strong>不需要MHP Tunnel也可以开启服务器！</strong><br>  <strong>不需要MHP Tunnel也可以开启服务器！</strong></p>\n</blockquote>\n<p>只要ngrok和路由器的UPNP功能开启即可，只开一个PSP Tunnel勾选上<strong>使用UPNP Gateway</strong>然后填上<strong>本机IP</strong>和任意端口创建服务器。但这样在PSP Tunnel上无法公开你的服务器信息，就像隐身了一样，联机前需要把设置好的ngrok服务器地址和端口告诉别人。</p>\n<blockquote>\n<p>Q：为什么要用旧版的MHP Tunnel？<br>  A：因为不能同时开两个PSP Tunnel。MHP Tunnel当服务器，PSP Tunnel(对新游戏支持较多)当游戏端.当然你说以服务器主人的形式玩游戏，那还是比较霸气的</p>\n</blockquote>\n<p>  <img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E9%9C%B8%E6%B0%94%E7%99%BB%E5%BD%95.png\" alt=\"13\"><br>  <br></p>\n<p>首先在MHP Tunnel客户端的设定勾选<strong>使用UPNP Gateway</strong><br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/mhp_tunnel%E5%BC%80%E5%90%AFUPNP.png\" alt=\"14\"><br><br><br>不知道是不是我这里有问题，点联机的选项会弹出一个错误，影响不大<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E8%81%94%E6%9C%BA%E9%94%99%E8%AF%AF%E6%98%BE%E7%A4%BA.png\" alt=\"15\"></p>\n<p><br><br>IP：填写你的<strong>本机ip</strong><br>端口：填写刚才我说可以乱填的那个<strong>3000</strong>端口（逃<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8.png\" alt=\"16\"></p>\n<p><br><br>这样服务器就算搭建起来了<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F.png\" alt=\"17\"></p>\n<p><br></p>\n<h4 id=\"PSP-Tunnel连接测试\"><a href=\"#PSP-Tunnel连接测试\" class=\"headerlink\" title=\"PSP Tunnel连接测试\"></a>PSP Tunnel连接测试</h4><blockquote>\n<p>打开PSP Tunnel，ip和端口填<strong>隧道id管理</strong>提供给你的服务器地址和端口</p>\n</blockquote>\n<p>来测试下<br><img src=\"https://of4jd0bcc.qnssl.com/MHP_Tunnel/%E6%B5%8B%E8%AF%95%E8%81%94%E6%9C%BA%E6%95%88%E6%9E%9C.png\" alt=\"20\"></p>\n<p><br><br>感谢X叔第一时间陪我测试（找了好久人。。。</p>\n<p>以上全部</p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br>  <img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/shakalaka_ailipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br>  <img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>"},{"title":" MHP3-大神島【出雲】-月下の渓流に、双雷は轟く","date":"2016-10-19T06:01:22.000Z","_content":"\n道具流么？请看这里:[道具流实战新编](http://bbs.duowan.com/thread-19067124-1-1.html)\n以后估计没什么时间去玩好一个游戏了\n<ul>\n单只雷娘血量:4500\n出生地:5区\n饮料:猫的火药术\n装备:\n![神岛单刷装](https://of4jd0bcc.qnssl.com//Blog/%E7%A5%9E%E5%B2%9B%E5%8D%95%E5%88%B7%E8%A3%85.jpg)\n\n<!--more-->\n\n战术布置:\n> 开场装填撤甲榴弹3\n> 切换至调和列表和炸弹\n> 5发晕眩后一次爆弹\n> 落穴陷阱\n> 2次爆弹(第二次顺序为大-小-大\n> 背身闪光\n> (扩散2、3)X3\n> 4发麻痹LV2触发一次麻痹\n> 两次爆弹\n> 麻痹陷阱\n> (扩散3)X2\n> 4发睡眠LV2触发睡眠\n> 一发捕获玉\n> 眠爆\n> 用完最后一个爆弹(触发捕获血量至700以下)\n> 捕获\n> 其中穿插高速调和素材(各种手速MAX~)\n\n[【大神岛-出云】月下双雷单只捕获-2分13](https://v.youku.com/v_show/id_XMTMxMTkwMjc4OA==.html?from=s1.8-1-1.2)\n<embed src=\"https://player.youku.com/player.php/sid/XMTMxMTkwMjc4OA==/v.swf\" allowFullScreen=\"true\" quality=\"high\" width=\"480\" height=\"400\" align=\"middle\" allowScriptAccess=\"always\" type=\"application/x-shockwave-flash\"></embed>\nHave Fun~\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_alipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\n","source":"_posts/MHP3-大神島【出雲】-月下の渓流に、双雷は轟く.md","raw":"---\ntitle: ' MHP3-大神島【出雲】-月下の渓流に、双雷は轟く'\ndate: 2016-10-19 14:01:22\ntags: Video Game\n---\n\n道具流么？请看这里:[道具流实战新编](http://bbs.duowan.com/thread-19067124-1-1.html)\n以后估计没什么时间去玩好一个游戏了\n<ul>\n单只雷娘血量:4500\n出生地:5区\n饮料:猫的火药术\n装备:\n![神岛单刷装](https://of4jd0bcc.qnssl.com//Blog/%E7%A5%9E%E5%B2%9B%E5%8D%95%E5%88%B7%E8%A3%85.jpg)\n\n<!--more-->\n\n战术布置:\n> 开场装填撤甲榴弹3\n> 切换至调和列表和炸弹\n> 5发晕眩后一次爆弹\n> 落穴陷阱\n> 2次爆弹(第二次顺序为大-小-大\n> 背身闪光\n> (扩散2、3)X3\n> 4发麻痹LV2触发一次麻痹\n> 两次爆弹\n> 麻痹陷阱\n> (扩散3)X2\n> 4发睡眠LV2触发睡眠\n> 一发捕获玉\n> 眠爆\n> 用完最后一个爆弹(触发捕获血量至700以下)\n> 捕获\n> 其中穿插高速调和素材(各种手速MAX~)\n\n[【大神岛-出云】月下双雷单只捕获-2分13](https://v.youku.com/v_show/id_XMTMxMTkwMjc4OA==.html?from=s1.8-1-1.2)\n<embed src=\"https://player.youku.com/player.php/sid/XMTMxMTkwMjc4OA==/v.swf\" allowFullScreen=\"true\" quality=\"high\" width=\"480\" height=\"400\" align=\"middle\" allowScriptAccess=\"always\" type=\"application/x-shockwave-flash\"></embed>\nHave Fun~\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_alipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\n","slug":"MHP3-大神島【出雲】-月下の渓流に、双雷は轟く","published":1,"updated":"2017-01-22T08:43:55.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv5dxzq0004poog7di3i43e","content":"<p>道具流么？请看这里:<a href=\"http://bbs.duowan.com/thread-19067124-1-1.html\" target=\"_blank\" rel=\"external\">道具流实战新编</a><br>以后估计没什么时间去玩好一个游戏了</p>\n<p><ul><br>单只雷娘血量:4500<br>出生地:5区<br>饮料:猫的火药术<br>装备:<br><img src=\"https://of4jd0bcc.qnssl.com//Blog/%E7%A5%9E%E5%B2%9B%E5%8D%95%E5%88%B7%E8%A3%85.jpg\" alt=\"神岛单刷装\"></ul></p>\n<a id=\"more\"></a>\n<p>战术布置:</p>\n<blockquote>\n<p>开场装填撤甲榴弹3<br>切换至调和列表和炸弹<br>5发晕眩后一次爆弹<br>落穴陷阱<br>2次爆弹(第二次顺序为大-小-大<br>背身闪光<br>(扩散2、3)X3<br>4发麻痹LV2触发一次麻痹<br>两次爆弹<br>麻痹陷阱<br>(扩散3)X2<br>4发睡眠LV2触发睡眠<br>一发捕获玉<br>眠爆<br>用完最后一个爆弹(触发捕获血量至700以下)<br>捕获<br>其中穿插高速调和素材(各种手速MAX~)</p>\n</blockquote>\n<p><a href=\"https://v.youku.com/v_show/id_XMTMxMTkwMjc4OA==.html?from=s1.8-1-1.2\" target=\"_blank\" rel=\"external\">【大神岛-出云】月下双雷单只捕获-2分13</a></p>\n<p><embed src=\"https://player.youku.com/player.php/sid/XMTMxMTkwMjc4OA==/v.swf\" allowfullscreen=\"true\" quality=\"high\" width=\"480\" height=\"400\" align=\"middle\" allowscriptaccess=\"always\" type=\"application/x-shockwave-flash\"><br>Have Fun~</p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>\n","excerpt":"<p>道具流么？请看这里:<a href=\"http://bbs.duowan.com/thread-19067124-1-1.html\">道具流实战新编</a><br>以后估计没什么时间去玩好一个游戏了</p>\n<p><ul><br>单只雷娘血量:4500<br>出生地:5区<br>饮料:猫的火药术<br>装备:<br><img src=\"https://of4jd0bcc.qnssl.com//Blog/%E7%A5%9E%E5%B2%9B%E5%8D%95%E5%88%B7%E8%A3%85.jpg\" alt=\"神岛单刷装\"></p>","more":"<p>战术布置:</p>\n<blockquote>\n<p>开场装填撤甲榴弹3<br>切换至调和列表和炸弹<br>5发晕眩后一次爆弹<br>落穴陷阱<br>2次爆弹(第二次顺序为大-小-大<br>背身闪光<br>(扩散2、3)X3<br>4发麻痹LV2触发一次麻痹<br>两次爆弹<br>麻痹陷阱<br>(扩散3)X2<br>4发睡眠LV2触发睡眠<br>一发捕获玉<br>眠爆<br>用完最后一个爆弹(触发捕获血量至700以下)<br>捕获<br>其中穿插高速调和素材(各种手速MAX~)</p>\n</blockquote>\n<p><a href=\"https://v.youku.com/v_show/id_XMTMxMTkwMjc4OA==.html?from=s1.8-1-1.2\">【大神岛-出云】月下双雷单只捕获-2分13</a></p>\n<p><embed src=\"https://player.youku.com/player.php/sid/XMTMxMTkwMjc4OA==/v.swf\" allowFullScreen=\"true\" quality=\"high\" width=\"480\" height=\"400\" align=\"middle\" allowScriptAccess=\"always\" type=\"application/x-shockwave-flash\"></embed><br>Have Fun~</p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>"},{"title":"OpenBTS 5.0环境配置","date":"2016-10-02T01:45:34.000Z","toc":"true  //在此处设定是否开启目录，需要主题支持。","_content":"\n###  在git clone时推荐使用<a href=\"https://evilmass.github.io/2017/01/18/%E5%88%A9%E7%94%A8proxychains%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8socks5%E4%BB%A3%E7%90%86/\" target=\"_blank\">proxychains</a>操作\n<br>\n\n###  System: <a href=\"https://mirror.umd.edu/ubuntu-iso/14.04/ubuntu-14.04.4-desktop-amd64.iso\" target=\"_blank\">Ubuntu-14.04.4-desktop-amd64</a>\n<br>\n\n<!--more-->\n\n\n\n###  USTC Sources:\n<pre>\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty main restricted universe multiverse\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty-security main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty-security main restricted universe multiverse\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse\n</pre>\n\n<br><br>\n\n\n\n\n\n\n### 1:install a series of dependency\n<pre>\n    sudo apt-get update && apt-get upgrade\n    sudo apt-get install aptitude libtalloc2 libtalloc2-dbg python-talloc python-talloc-dbg python-talloc-dev libtalloc-dev automake libusb-dev libpcsclite-dev libusb-0.1-4 libpcsclite1 libccid pcscd libtool shtool autoconf git-core pkg-config make gcc build-essential libgmp3-dev libmpfr-dev libx11-6 libx11-dev texinfo flex bison libncurses5 libncurses5-dbg libncurses5-dev libncursesw5 libncursesw5-dbg libncursesw5-dev zlibc zlib1g-dev libmpfr4 libmpc-dev libpcsclite-dev libfftw3-dev libfftw3-doc vim # 没有Vim用我要死了\n    aptitude install libtool shtool automake autoconf git-core pkg-config make gcc\n</pre>\n\n<br><br>\n\n\n\n\n\n\n### 2：Create several directories , download ARM compiler\n  参考<a href=\"http://evilmass.cc/gsm-sniffer/\">Gsm Sniffer小测试</a>配置armtoolchain环境，但这次我们用gnu-arm-build.3.sh这个脚本\n  armtoolchain：<a href=\"http://pan.baidu.com/s/1mhILGtq\" target=\"_blank\">http://pan.baidu.com/s/1mhILGtq 密码：qfhn</a>\n<br><br>\n\n\n\n\n### 3：Download and compile osmocomBB\n<pre>  \n    git clone git://git.osmocom.org/libosmocore.git\n    git clone git://git.osmocom.org/osmocom-bb.git\n    git clone git://git.osmocom.org/libosmo-dsp.git \n</pre>\n\nWhen installing libosmocore execute ./configure many people will encounter No package 'talloc' found such a mistake , because they can not talloc, Here is the solution\n<pre>    \n    get https://www.samba.org/ftp/talloc/talloc-2.1.7.tar.gz\n    tar -zxvf talloc-2.1.7.tar.gz\n    cd talloc-2.1.7/\n    ./configure\n    make\n    sudo make install\n</pre>\n\ntalloc-2.1.7：<a href=\"http://pan.baidu.com/s/1bpKapgr\" target=\"_blank\">http://pan.baidu.com/s/1bpKapgr 密码：u8dz</a>\n\n\n\n#### install libosmocore\n<pre>    \n    d libosmocore/\n    autoreconf -i\n    ./configure \n    make\n    sudo make install \n    sudo ldconfig \n    cd ..\n</pre>\n\n#### install libosmo-dsp\n<pre>\n    cd libosmo-dsp/\n    autoreconf -i\n    ./configure\n    make \n    sudo make install\n    sudo ldconfig\n    cd ..\n</pre>\n\n<br><br>\n\n\n\n\n#### Compile osmocombb\n   参考<a href=\"https://evilmass.github.io/2016/10/19/GSM-Sniffer%E5%B0%8F%E6%B5%8B%E8%AF%95/\" target=\"_blank\">Gsm Sniffer小测试</a>修正cell_log问题\n<pre>  \n    cd  osmocom-bb    \n    git checkout sylvain/testing     \n    vim src/target/firmware/Makefile\n</pre>\n\n##### # CFLAGS +=-DCONFIG_TX_ENABLE <- 去掉前面的注释\n\n<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/tx_enable.png\" alt=\"tx_enable\" />\n<pre>\n    cd src\n    make #HOST_layer23_CONFARGS=--enable-transceiver \n</pre>\n\n<br><br>\n\n\n\n\n\n### 6:download openbts5.0\n<pre>    sudo apt-get install software-properties-common python-software-properties\n        sudo add-apt-repository ppa:git-core/ppa #(press enter to continue)\n        sudo apt-get update\n        sudo apt-get remove git && apt-get install git\n        cd /root/armtoolchain\n        git clone https://github.com/RangeNetworks/dev.git\n</pre>\n\n<br><br>\n\n\n\n\n### 7:then install a series of dependency    \n<pre>    sudo apt-get install ntp bind9 libboost-dev\n</pre>\n\n<br><br>\n\n\n\n\n### 8:git ssh key\n<pre>\n    ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" #主题显示有问题，这里是英文的双引号，下同\n    eval \"$(ssh-agent -s)\"\n    ssh-add ~/.ssh/id_rsa\n    more ~/.ssh/id_rsa.pub\n</pre>\n\n<a href=\"https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/\" target=\"_blank\">在GitHub账户添加你的SSH-KEYS</a>\n<pre>\n    ssh -T git@github.com \n</pre>\n\n输入yes\n<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/ssh_T.png\" alt=\"ssh_T\" />\n若有其他问题请参考<a href=\"https://help.github.com/categories/ssh/\" target=\"_blank\">GitHub--Help</a>\n<br><br>\n\n\n### 9:install openbts5.0\n<pre>\n    cd /root/armtoolchain/dev\n    ./clone.sh #这里建议用梯子\n    ./switchto.sh 5.0 \n</pre>\n\n\n### download asterisk-11.7.0.tar.gz and coredumper-1.2.1.tar.gz\n因为GFW的缘故这两个文件在执    ./build.sh的时候下载不能（#若是有梯子可以直接执行）\n百度盘：<a href=\"http://pan.baidu.com/s/1bptBPVL\" target=\"_blank\">http://pan.baidu.com/s/1bptBPVL 密码：e72m</a>\n \n### 墙外的官方连接\n<a href=\"http://downloads.asterisk.org/pub/telephony/asterisk/releaasterisk-11.7.0.tar.gz\" target=\"_blank\">http://downloads.asterisk.org/pub/telephony/asterisk/releaasterisk-11.7.0.tar.gz</a>\n<a href=\"https://storage.googleapis.com/google-code-archive-downloadscode.google.com/google-coredumper/coredumper-1.2.1.tar.gz\" target=\"_blank\"> https://storage.googleapis.com/google-code-archive-downloadscode.google.com/google-coredumper/coredumper-1.2.1.tar.gz</a>\n    # 将asterisk-11.7.0.tar.gz复制到dev/asterisk\n    # 将coredumper-1.2.1.tar.gz复制到dev/libcoredumper\n\n\n在dev目录下注释掉bulid.sh的一些命令，否则会影响编译（要不下那两个文件干嘛= w =）\n \n<code>gedit build.sh</code>   \n<pre> \n    #installIfMissing libzmq5 \n    #rm -rf range-asterisk* asterisk-*\n</pre>\n\n<code>gedit asterisk/build.sh</code>\n<pre>\n    #if [ ! -f asterisk-$VERSION.tar.gz ] \n    #then \n    #    sayAndDo wget  http://downloads.asterisk.org/pub/telephony/aste    releases/asterisk-  $VERSION.tar.gz \n    #fi \n    #if [ -d asterisk-$VERSION ] \n    #then \n    #   sayAndDo rm -rf asterisk-$VERSION \n    #fi\n</pre>\n\n<code>gedit libcoredumper/build.sh</code>\n<pre>\n    #if [ ! -f coredumper-$VERSION.tar.gz ] \n    #then \n    #    sayAndDo wget http://google-coredumper.googlecode.com/files/coredumper-$VERSION.tar.gz \n    #fi \n    #if [ -d coredumper-$VERSION ] \n    #then \n    #   sayAndDo rm -rf coredumper-$VERSION \n    #fi\n</pre>\n\n<br>\n\n<pre>\n    cd /root/armtoolchain/dev/liba53\n    sudo make install\n    cd ../ #回到dev目录\n    ./build.sh SDR1 #按照SDR1形式编译\n</pre>\n\n如果一切顺利,编译成功,会在/dev/BUILDS/下生成 2016-xx-xx--xx-xx-xx文件夹 以时间命名,如下图\n<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/bulid_timestamp.png\" alt=\"bulid_timestamp\" />\n\n<br><br>\n\n\n### 10:open bts\n<pre>\n    cd /root/armtoolchain/dev/BUIDLS/2016-xx-xx--xx-xx-xx/    \n    sudo dpkg -i *.deb\n    #如果此处会报错提示依赖不满足,我们修复一下之后再重新安装deb\n    sudo apt-get -f install && sudo dpkg -i *.deb\n    #现在我们可以运行OpenBTS了\n    sudo start asterisk \n    sudo start sipauthserve \n    sudo start smqueue \n    sudo start openbts\n</pre>\n\n#### 创建Transceiver\n在/dev/openbts/apps/文件夹中创建一个文件，名为transceiver.sh， 打开后将以下两行代码贴入： \n<pre>\n    #!/bin/bash \n    exec /root/armtoolchain/osmocom-bb/src/host/layer23/src/transceiver/transceiver 115\n</pre>\n\n其中结尾的“115”是指手机用来同步的ARFCN编号，这个需要测量后选取信号最好的ARFCN \n\n#### 进入osmocom-bb目录\n<pre>\n   \n    cd /root/armtoolchain/osmocom-bb/src/host/osmocon \n</pre>\n\n\n#### 以下是通过给手机刷入rssi.bin来进行ARFCN测量的方法\n<pre>\n    sudo ./osmocon -p /dev/ttyUSB0 -m c123xor -c ./src/target/firmware/board/compal_e88/rssi.highram.bin\n</pre>\n\n<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/test_afrcn.png\" alt=\"test_arfcn\" />\n\n#### 下面需要修改OpenBTS.db设置\n#### 进入osmocon文件夹，并刷入trx的固件，运行完命令后按一下手机的开机键（不是长按，只用按一下），下图是正确的显示（LOST -xxxx！），如果卡在finish不动，那么ctrl+z停止进程然后抠电池重新刷\n<pre>\n    cd /root/armtoolchain/osmocom-bb/src/host/osmocon \n    sudo ./osmocon -p /dev/ttyUSB0 -m c123xor ../../target/firmware/board/compal_e88/trx.compalram.bin \n</pre>\n\n<br>\n\n#### 此处另开一个终端（第二个），进入OpenBTS的运行文件夹, 运行transceiver脚本，开始使用c118作为收发装置\n\n<pre>\n    cd /root/armtoolchain/dev/openbts/apps\n    chmod +x transceiver.sh\n    sudo ./transceiver.sh\n</pre>\n\n正确的现实如下图\n<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/transeriver.png\" alt=\"transeriver\" />\n\n#### 此处再另开一个终端（第三个），同样进入OpenBTS的运行文件夹\n<pre>\n    cd /root/armtoolchain/dev/openbts/apps \n    ./OpenBTSCLI \n</pre>\n\n<br><br>\n\n\n\n\n### 11:config openbts\n\n<pre> \n    config GSM.Radio.NeedBSIC 1 \n    config GSM.RACH.MaxRetrans 3 \n    config GSM.RACH.TxInteger 8 \n    config GSM.Radio.C0 #你设置的ARFCN\n    config Control.LUR.OpenRegistration .* \n    #config GSM.Identity.MCC 001\n    #config GSM.Identity.MNC 01\n</pre>\n\n\n#### 重启，有些设置才能生效，重启后依然是重复1.刷机，2.transceiver，3.OpenBTS控制台 \n<pre>\n    sudo reboot \n</pre>\n\n<br><br>\n\n\n\n\n### 12:Mobile search and access OpenBTS\n<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/join_openbts.jpg\" alt=\"join_openbts\" />\n\n### 13:View tmsis 控制台的命令，查看连接的手机IMSI \n<pre>\n    tmsis\n</pre>\n\n<br><br>\n\n\n\n### 14:try send sms 控制台的命令，给指定IMSI 发送短信，如下 \n<pre>\n    sendsms YOUTMSIS number messege\n</pre>\n\n<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/send_sms.png\" alt=\"send_sms\" />\n\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n[99]:https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E7%86%8A%E6%9C%AC%E7%86%8A%E8%B6%85%E5%B8%85_alipay.gif?imageView2/1/w/200/h/200\n[100]:https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200","source":"_posts/OpenBTS环境配置.md","raw":"---\ntitle: OpenBTS 5.0环境配置 \ndate: 2016-10-02 9:45:34  \ncategories: Hack\ntoc: true  //在此处设定是否开启目录，需要主题支持。\n---\n\n###  在git clone时推荐使用<a href=\"https://evilmass.github.io/2017/01/18/%E5%88%A9%E7%94%A8proxychains%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8socks5%E4%BB%A3%E7%90%86/\" target=\"_blank\">proxychains</a>操作\n<br>\n\n###  System: <a href=\"https://mirror.umd.edu/ubuntu-iso/14.04/ubuntu-14.04.4-desktop-amd64.iso\" target=\"_blank\">Ubuntu-14.04.4-desktop-amd64</a>\n<br>\n\n<!--more-->\n\n\n\n###  USTC Sources:\n<pre>\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty main restricted universe multiverse\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty-security main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty-security main restricted universe multiverse\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse\n</pre>\n\n<br><br>\n\n\n\n\n\n\n### 1:install a series of dependency\n<pre>\n    sudo apt-get update && apt-get upgrade\n    sudo apt-get install aptitude libtalloc2 libtalloc2-dbg python-talloc python-talloc-dbg python-talloc-dev libtalloc-dev automake libusb-dev libpcsclite-dev libusb-0.1-4 libpcsclite1 libccid pcscd libtool shtool autoconf git-core pkg-config make gcc build-essential libgmp3-dev libmpfr-dev libx11-6 libx11-dev texinfo flex bison libncurses5 libncurses5-dbg libncurses5-dev libncursesw5 libncursesw5-dbg libncursesw5-dev zlibc zlib1g-dev libmpfr4 libmpc-dev libpcsclite-dev libfftw3-dev libfftw3-doc vim # 没有Vim用我要死了\n    aptitude install libtool shtool automake autoconf git-core pkg-config make gcc\n</pre>\n\n<br><br>\n\n\n\n\n\n\n### 2：Create several directories , download ARM compiler\n  参考<a href=\"http://evilmass.cc/gsm-sniffer/\">Gsm Sniffer小测试</a>配置armtoolchain环境，但这次我们用gnu-arm-build.3.sh这个脚本\n  armtoolchain：<a href=\"http://pan.baidu.com/s/1mhILGtq\" target=\"_blank\">http://pan.baidu.com/s/1mhILGtq 密码：qfhn</a>\n<br><br>\n\n\n\n\n### 3：Download and compile osmocomBB\n<pre>  \n    git clone git://git.osmocom.org/libosmocore.git\n    git clone git://git.osmocom.org/osmocom-bb.git\n    git clone git://git.osmocom.org/libosmo-dsp.git \n</pre>\n\nWhen installing libosmocore execute ./configure many people will encounter No package 'talloc' found such a mistake , because they can not talloc, Here is the solution\n<pre>    \n    get https://www.samba.org/ftp/talloc/talloc-2.1.7.tar.gz\n    tar -zxvf talloc-2.1.7.tar.gz\n    cd talloc-2.1.7/\n    ./configure\n    make\n    sudo make install\n</pre>\n\ntalloc-2.1.7：<a href=\"http://pan.baidu.com/s/1bpKapgr\" target=\"_blank\">http://pan.baidu.com/s/1bpKapgr 密码：u8dz</a>\n\n\n\n#### install libosmocore\n<pre>    \n    d libosmocore/\n    autoreconf -i\n    ./configure \n    make\n    sudo make install \n    sudo ldconfig \n    cd ..\n</pre>\n\n#### install libosmo-dsp\n<pre>\n    cd libosmo-dsp/\n    autoreconf -i\n    ./configure\n    make \n    sudo make install\n    sudo ldconfig\n    cd ..\n</pre>\n\n<br><br>\n\n\n\n\n#### Compile osmocombb\n   参考<a href=\"https://evilmass.github.io/2016/10/19/GSM-Sniffer%E5%B0%8F%E6%B5%8B%E8%AF%95/\" target=\"_blank\">Gsm Sniffer小测试</a>修正cell_log问题\n<pre>  \n    cd  osmocom-bb    \n    git checkout sylvain/testing     \n    vim src/target/firmware/Makefile\n</pre>\n\n##### # CFLAGS +=-DCONFIG_TX_ENABLE <- 去掉前面的注释\n\n<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/tx_enable.png\" alt=\"tx_enable\" />\n<pre>\n    cd src\n    make #HOST_layer23_CONFARGS=--enable-transceiver \n</pre>\n\n<br><br>\n\n\n\n\n\n### 6:download openbts5.0\n<pre>    sudo apt-get install software-properties-common python-software-properties\n        sudo add-apt-repository ppa:git-core/ppa #(press enter to continue)\n        sudo apt-get update\n        sudo apt-get remove git && apt-get install git\n        cd /root/armtoolchain\n        git clone https://github.com/RangeNetworks/dev.git\n</pre>\n\n<br><br>\n\n\n\n\n### 7:then install a series of dependency    \n<pre>    sudo apt-get install ntp bind9 libboost-dev\n</pre>\n\n<br><br>\n\n\n\n\n### 8:git ssh key\n<pre>\n    ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" #主题显示有问题，这里是英文的双引号，下同\n    eval \"$(ssh-agent -s)\"\n    ssh-add ~/.ssh/id_rsa\n    more ~/.ssh/id_rsa.pub\n</pre>\n\n<a href=\"https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/\" target=\"_blank\">在GitHub账户添加你的SSH-KEYS</a>\n<pre>\n    ssh -T git@github.com \n</pre>\n\n输入yes\n<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/ssh_T.png\" alt=\"ssh_T\" />\n若有其他问题请参考<a href=\"https://help.github.com/categories/ssh/\" target=\"_blank\">GitHub--Help</a>\n<br><br>\n\n\n### 9:install openbts5.0\n<pre>\n    cd /root/armtoolchain/dev\n    ./clone.sh #这里建议用梯子\n    ./switchto.sh 5.0 \n</pre>\n\n\n### download asterisk-11.7.0.tar.gz and coredumper-1.2.1.tar.gz\n因为GFW的缘故这两个文件在执    ./build.sh的时候下载不能（#若是有梯子可以直接执行）\n百度盘：<a href=\"http://pan.baidu.com/s/1bptBPVL\" target=\"_blank\">http://pan.baidu.com/s/1bptBPVL 密码：e72m</a>\n \n### 墙外的官方连接\n<a href=\"http://downloads.asterisk.org/pub/telephony/asterisk/releaasterisk-11.7.0.tar.gz\" target=\"_blank\">http://downloads.asterisk.org/pub/telephony/asterisk/releaasterisk-11.7.0.tar.gz</a>\n<a href=\"https://storage.googleapis.com/google-code-archive-downloadscode.google.com/google-coredumper/coredumper-1.2.1.tar.gz\" target=\"_blank\"> https://storage.googleapis.com/google-code-archive-downloadscode.google.com/google-coredumper/coredumper-1.2.1.tar.gz</a>\n    # 将asterisk-11.7.0.tar.gz复制到dev/asterisk\n    # 将coredumper-1.2.1.tar.gz复制到dev/libcoredumper\n\n\n在dev目录下注释掉bulid.sh的一些命令，否则会影响编译（要不下那两个文件干嘛= w =）\n \n<code>gedit build.sh</code>   \n<pre> \n    #installIfMissing libzmq5 \n    #rm -rf range-asterisk* asterisk-*\n</pre>\n\n<code>gedit asterisk/build.sh</code>\n<pre>\n    #if [ ! -f asterisk-$VERSION.tar.gz ] \n    #then \n    #    sayAndDo wget  http://downloads.asterisk.org/pub/telephony/aste    releases/asterisk-  $VERSION.tar.gz \n    #fi \n    #if [ -d asterisk-$VERSION ] \n    #then \n    #   sayAndDo rm -rf asterisk-$VERSION \n    #fi\n</pre>\n\n<code>gedit libcoredumper/build.sh</code>\n<pre>\n    #if [ ! -f coredumper-$VERSION.tar.gz ] \n    #then \n    #    sayAndDo wget http://google-coredumper.googlecode.com/files/coredumper-$VERSION.tar.gz \n    #fi \n    #if [ -d coredumper-$VERSION ] \n    #then \n    #   sayAndDo rm -rf coredumper-$VERSION \n    #fi\n</pre>\n\n<br>\n\n<pre>\n    cd /root/armtoolchain/dev/liba53\n    sudo make install\n    cd ../ #回到dev目录\n    ./build.sh SDR1 #按照SDR1形式编译\n</pre>\n\n如果一切顺利,编译成功,会在/dev/BUILDS/下生成 2016-xx-xx--xx-xx-xx文件夹 以时间命名,如下图\n<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/bulid_timestamp.png\" alt=\"bulid_timestamp\" />\n\n<br><br>\n\n\n### 10:open bts\n<pre>\n    cd /root/armtoolchain/dev/BUIDLS/2016-xx-xx--xx-xx-xx/    \n    sudo dpkg -i *.deb\n    #如果此处会报错提示依赖不满足,我们修复一下之后再重新安装deb\n    sudo apt-get -f install && sudo dpkg -i *.deb\n    #现在我们可以运行OpenBTS了\n    sudo start asterisk \n    sudo start sipauthserve \n    sudo start smqueue \n    sudo start openbts\n</pre>\n\n#### 创建Transceiver\n在/dev/openbts/apps/文件夹中创建一个文件，名为transceiver.sh， 打开后将以下两行代码贴入： \n<pre>\n    #!/bin/bash \n    exec /root/armtoolchain/osmocom-bb/src/host/layer23/src/transceiver/transceiver 115\n</pre>\n\n其中结尾的“115”是指手机用来同步的ARFCN编号，这个需要测量后选取信号最好的ARFCN \n\n#### 进入osmocom-bb目录\n<pre>\n   \n    cd /root/armtoolchain/osmocom-bb/src/host/osmocon \n</pre>\n\n\n#### 以下是通过给手机刷入rssi.bin来进行ARFCN测量的方法\n<pre>\n    sudo ./osmocon -p /dev/ttyUSB0 -m c123xor -c ./src/target/firmware/board/compal_e88/rssi.highram.bin\n</pre>\n\n<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/test_afrcn.png\" alt=\"test_arfcn\" />\n\n#### 下面需要修改OpenBTS.db设置\n#### 进入osmocon文件夹，并刷入trx的固件，运行完命令后按一下手机的开机键（不是长按，只用按一下），下图是正确的显示（LOST -xxxx！），如果卡在finish不动，那么ctrl+z停止进程然后抠电池重新刷\n<pre>\n    cd /root/armtoolchain/osmocom-bb/src/host/osmocon \n    sudo ./osmocon -p /dev/ttyUSB0 -m c123xor ../../target/firmware/board/compal_e88/trx.compalram.bin \n</pre>\n\n<br>\n\n#### 此处另开一个终端（第二个），进入OpenBTS的运行文件夹, 运行transceiver脚本，开始使用c118作为收发装置\n\n<pre>\n    cd /root/armtoolchain/dev/openbts/apps\n    chmod +x transceiver.sh\n    sudo ./transceiver.sh\n</pre>\n\n正确的现实如下图\n<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/transeriver.png\" alt=\"transeriver\" />\n\n#### 此处再另开一个终端（第三个），同样进入OpenBTS的运行文件夹\n<pre>\n    cd /root/armtoolchain/dev/openbts/apps \n    ./OpenBTSCLI \n</pre>\n\n<br><br>\n\n\n\n\n### 11:config openbts\n\n<pre> \n    config GSM.Radio.NeedBSIC 1 \n    config GSM.RACH.MaxRetrans 3 \n    config GSM.RACH.TxInteger 8 \n    config GSM.Radio.C0 #你设置的ARFCN\n    config Control.LUR.OpenRegistration .* \n    #config GSM.Identity.MCC 001\n    #config GSM.Identity.MNC 01\n</pre>\n\n\n#### 重启，有些设置才能生效，重启后依然是重复1.刷机，2.transceiver，3.OpenBTS控制台 \n<pre>\n    sudo reboot \n</pre>\n\n<br><br>\n\n\n\n\n### 12:Mobile search and access OpenBTS\n<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/join_openbts.jpg\" alt=\"join_openbts\" />\n\n### 13:View tmsis 控制台的命令，查看连接的手机IMSI \n<pre>\n    tmsis\n</pre>\n\n<br><br>\n\n\n\n### 14:try send sms 控制台的命令，给指定IMSI 发送短信，如下 \n<pre>\n    sendsms YOUTMSIS number messege\n</pre>\n\n<img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/send_sms.png\" alt=\"send_sms\" />\n\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n[99]:https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E7%86%8A%E6%9C%AC%E7%86%8A%E8%B6%85%E5%B8%85_alipay.gif?imageView2/1/w/200/h/200\n[100]:https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200","slug":"OpenBTS环境配置","published":1,"updated":"2017-01-31T11:04:09.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv5dxzs0005poog06yjpckn","content":"<h3 id=\"在git-clone时推荐使用proxychains操作\"><a href=\"#在git-clone时推荐使用proxychains操作\" class=\"headerlink\" title=\"在git clone时推荐使用proxychains操作\"></a>在git clone时推荐使用<a href=\"https://evilmass.github.io/2017/01/18/%E5%88%A9%E7%94%A8proxychains%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8socks5%E4%BB%A3%E7%90%86/\" target=\"_blank\">proxychains</a>操作</h3><p><br></p>\n<h3 id=\"System-Ubuntu-14-04-4-desktop-amd64\"><a href=\"#System-Ubuntu-14-04-4-desktop-amd64\" class=\"headerlink\" title=\"System: Ubuntu-14.04.4-desktop-amd64\"></a>System: <a href=\"https://mirror.umd.edu/ubuntu-iso/14.04/ubuntu-14.04.4-desktop-amd64.iso\" target=\"_blank\">Ubuntu-14.04.4-desktop-amd64</a></h3><p><br></p>\n<a id=\"more\"></a>\n<h3 id=\"USTC-Sources\"><a href=\"#USTC-Sources\" class=\"headerlink\" title=\"USTC Sources:\"></a>USTC Sources:</h3><pre>\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty main restricted universe multiverse\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty-security main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty-security main restricted universe multiverse\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse\n</pre>\n\n<p><br><br></p>\n<h3 id=\"1-install-a-series-of-dependency\"><a href=\"#1-install-a-series-of-dependency\" class=\"headerlink\" title=\"1:install a series of dependency\"></a>1:install a series of dependency</h3><pre>\n    sudo apt-get update && apt-get upgrade\n    sudo apt-get install aptitude libtalloc2 libtalloc2-dbg python-talloc python-talloc-dbg python-talloc-dev libtalloc-dev automake libusb-dev libpcsclite-dev libusb-0.1-4 libpcsclite1 libccid pcscd libtool shtool autoconf git-core pkg-config make gcc build-essential libgmp3-dev libmpfr-dev libx11-6 libx11-dev texinfo flex bison libncurses5 libncurses5-dbg libncurses5-dev libncursesw5 libncursesw5-dbg libncursesw5-dev zlibc zlib1g-dev libmpfr4 libmpc-dev libpcsclite-dev libfftw3-dev libfftw3-doc vim # 没有Vim用我要死了\n    aptitude install libtool shtool automake autoconf git-core pkg-config make gcc\n</pre>\n\n<p><br><br></p>\n<h3 id=\"2：Create-several-directories-download-ARM-compiler\"><a href=\"#2：Create-several-directories-download-ARM-compiler\" class=\"headerlink\" title=\"2：Create several directories , download ARM compiler\"></a>2：Create several directories , download ARM compiler</h3><p>  参考<a href=\"http://evilmass.cc/gsm-sniffer/\">Gsm Sniffer小测试</a>配置armtoolchain环境，但这次我们用gnu-arm-build.3.sh这个脚本<br>  armtoolchain：<a href=\"http://pan.baidu.com/s/1mhILGtq\" target=\"_blank\">http://pan.baidu.com/s/1mhILGtq 密码：qfhn</a><br><br><br></p>\n<h3 id=\"3：Download-and-compile-osmocomBB\"><a href=\"#3：Download-and-compile-osmocomBB\" class=\"headerlink\" title=\"3：Download and compile osmocomBB\"></a>3：Download and compile osmocomBB</h3><pre>  \n    git clone git://git.osmocom.org/libosmocore.git\n    git clone git://git.osmocom.org/osmocom-bb.git\n    git clone git://git.osmocom.org/libosmo-dsp.git \n</pre>\n\n<p>When installing libosmocore execute ./configure many people will encounter No package ‘talloc’ found such a mistake , because they can not talloc, Here is the solution</p>\n<pre>    \n    get https://www.samba.org/ftp/talloc/talloc-2.1.7.tar.gz\n    tar -zxvf talloc-2.1.7.tar.gz\n    cd talloc-2.1.7/\n    ./configure\n    make\n    sudo make install\n</pre>\n\n<p>talloc-2.1.7：<a href=\"http://pan.baidu.com/s/1bpKapgr\" target=\"_blank\">http://pan.baidu.com/s/1bpKapgr 密码：u8dz</a></p>\n<h4 id=\"install-libosmocore\"><a href=\"#install-libosmocore\" class=\"headerlink\" title=\"install libosmocore\"></a>install libosmocore</h4><pre>    \n    d libosmocore/\n    autoreconf -i\n    ./configure \n    make\n    sudo make install \n    sudo ldconfig \n    cd ..\n</pre>\n\n<h4 id=\"install-libosmo-dsp\"><a href=\"#install-libosmo-dsp\" class=\"headerlink\" title=\"install libosmo-dsp\"></a>install libosmo-dsp</h4><pre>\n    cd libosmo-dsp/\n    autoreconf -i\n    ./configure\n    make \n    sudo make install\n    sudo ldconfig\n    cd ..\n</pre>\n\n<p><br><br></p>\n<h4 id=\"Compile-osmocombb\"><a href=\"#Compile-osmocombb\" class=\"headerlink\" title=\"Compile osmocombb\"></a>Compile osmocombb</h4><p>   参考<a href=\"https://evilmass.github.io/2016/10/19/GSM-Sniffer%E5%B0%8F%E6%B5%8B%E8%AF%95/\" target=\"_blank\">Gsm Sniffer小测试</a>修正cell_log问题</p>\n<pre>  \n    cd  osmocom-bb    \n    git checkout sylvain/testing     \n    vim src/target/firmware/Makefile\n</pre>\n\n<h5 id=\"CFLAGS-DCONFIG-TX-ENABLE-lt-去掉前面的注释\"><a href=\"#CFLAGS-DCONFIG-TX-ENABLE-lt-去掉前面的注释\" class=\"headerlink\" title=\"# CFLAGS +=-DCONFIG_TX_ENABLE &lt;- 去掉前面的注释\"></a># CFLAGS +=-DCONFIG_TX_ENABLE &lt;- 去掉前面的注释</h5><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/tx_enable.png\" alt=\"tx_enable\"></p>\n<pre>\n    cd src\n    make #HOST_layer23_CONFARGS=--enable-transceiver \n</pre>\n\n<p><br><br></p>\n<h3 id=\"6-download-openbts5-0\"><a href=\"#6-download-openbts5-0\" class=\"headerlink\" title=\"6:download openbts5.0\"></a>6:download openbts5.0</h3><pre>    sudo apt-get install software-properties-common python-software-properties\n        sudo add-apt-repository ppa:git-core/ppa #(press enter to continue)\n        sudo apt-get update\n        sudo apt-get remove git && apt-get install git\n        cd /root/armtoolchain\n        git clone https://github.com/RangeNetworks/dev.git\n</pre>\n\n<p><br><br></p>\n<h3 id=\"7-then-install-a-series-of-dependency\"><a href=\"#7-then-install-a-series-of-dependency\" class=\"headerlink\" title=\"7:then install a series of dependency\"></a>7:then install a series of dependency</h3><pre>    sudo apt-get install ntp bind9 libboost-dev\n</pre>\n\n<p><br><br></p>\n<h3 id=\"8-git-ssh-key\"><a href=\"#8-git-ssh-key\" class=\"headerlink\" title=\"8:git ssh key\"></a>8:git ssh key</h3><pre>\n    ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" #主题显示有问题，这里是英文的双引号，下同\n    eval \"$(ssh-agent -s)\"\n    ssh-add ~/.ssh/id_rsa\n    more ~/.ssh/id_rsa.pub\n</pre>\n\n<p><a href=\"https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/\" target=\"_blank\">在GitHub账户添加你的SSH-KEYS</a></p>\n<pre>\n    ssh -T git@github.com \n</pre>\n\n<p>输入yes<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/ssh_T.png\" alt=\"ssh_T\"><br>若有其他问题请参考<a href=\"https://help.github.com/categories/ssh/\" target=\"_blank\">GitHub–Help</a><br><br><br></p>\n<h3 id=\"9-install-openbts5-0\"><a href=\"#9-install-openbts5-0\" class=\"headerlink\" title=\"9:install openbts5.0\"></a>9:install openbts5.0</h3><pre>\n    cd /root/armtoolchain/dev\n    ./clone.sh #这里建议用梯子\n    ./switchto.sh 5.0 \n</pre>\n\n\n<h3 id=\"download-asterisk-11-7-0-tar-gz-and-coredumper-1-2-1-tar-gz\"><a href=\"#download-asterisk-11-7-0-tar-gz-and-coredumper-1-2-1-tar-gz\" class=\"headerlink\" title=\"download asterisk-11.7.0.tar.gz and coredumper-1.2.1.tar.gz\"></a>download asterisk-11.7.0.tar.gz and coredumper-1.2.1.tar.gz</h3><p>因为GFW的缘故这两个文件在执    ./build.sh的时候下载不能（#若是有梯子可以直接执行）<br>百度盘：<a href=\"http://pan.baidu.com/s/1bptBPVL\" target=\"_blank\">http://pan.baidu.com/s/1bptBPVL 密码：e72m</a></p>\n<h3 id=\"墙外的官方连接\"><a href=\"#墙外的官方连接\" class=\"headerlink\" title=\"墙外的官方连接\"></a>墙外的官方连接</h3><p><a href=\"http://downloads.asterisk.org/pub/telephony/asterisk/releaasterisk-11.7.0.tar.gz\" target=\"_blank\">http://downloads.asterisk.org/pub/telephony/asterisk/releaasterisk-11.7.0.tar.gz</a><br><a href=\"https://storage.googleapis.com/google-code-archive-downloadscode.google.com/google-coredumper/coredumper-1.2.1.tar.gz\" target=\"_blank\"> https://storage.googleapis.com/google-code-archive-downloadscode.google.com/google-coredumper/coredumper-1.2.1.tar.gz</a></p>\n<pre><code># 将asterisk-11.7.0.tar.gz复制到dev/asterisk\n# 将coredumper-1.2.1.tar.gz复制到dev/libcoredumper\n</code></pre><p>在dev目录下注释掉bulid.sh的一些命令，否则会影响编译（要不下那两个文件干嘛= w =）</p>\n<p><code>gedit build.sh</code>   </p>\n<pre> \n    #installIfMissing libzmq5 \n    #rm -rf range-asterisk* asterisk-*\n</pre>\n\n<p><code>gedit asterisk/build.sh</code></p>\n<pre>\n    #if [ ! -f asterisk-$VERSION.tar.gz ] \n    #then \n    #    sayAndDo wget  http://downloads.asterisk.org/pub/telephony/aste    releases/asterisk-  $VERSION.tar.gz \n    #fi \n    #if [ -d asterisk-$VERSION ] \n    #then \n    #   sayAndDo rm -rf asterisk-$VERSION \n    #fi\n</pre>\n\n<p><code>gedit libcoredumper/build.sh</code></p>\n<pre>\n    #if [ ! -f coredumper-$VERSION.tar.gz ] \n    #then \n    #    sayAndDo wget http://google-coredumper.googlecode.com/files/coredumper-$VERSION.tar.gz \n    #fi \n    #if [ -d coredumper-$VERSION ] \n    #then \n    #   sayAndDo rm -rf coredumper-$VERSION \n    #fi\n</pre>\n\n<p><br></p>\n<pre>\n    cd /root/armtoolchain/dev/liba53\n    sudo make install\n    cd ../ #回到dev目录\n    ./build.sh SDR1 #按照SDR1形式编译\n</pre>\n\n<p>如果一切顺利,编译成功,会在/dev/BUILDS/下生成 2016-xx-xx–xx-xx-xx文件夹 以时间命名,如下图<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/bulid_timestamp.png\" alt=\"bulid_timestamp\"></p>\n<p><br><br></p>\n<h3 id=\"10-open-bts\"><a href=\"#10-open-bts\" class=\"headerlink\" title=\"10:open bts\"></a>10:open bts</h3><pre>\n    cd /root/armtoolchain/dev/BUIDLS/2016-xx-xx--xx-xx-xx/    \n    sudo dpkg -i *.deb\n    #如果此处会报错提示依赖不满足,我们修复一下之后再重新安装deb\n    sudo apt-get -f install && sudo dpkg -i *.deb\n    #现在我们可以运行OpenBTS了\n    sudo start asterisk \n    sudo start sipauthserve \n    sudo start smqueue \n    sudo start openbts\n</pre>\n\n<h4 id=\"创建Transceiver\"><a href=\"#创建Transceiver\" class=\"headerlink\" title=\"创建Transceiver\"></a>创建Transceiver</h4><p>在/dev/openbts/apps/文件夹中创建一个文件，名为transceiver.sh， 打开后将以下两行代码贴入： </p>\n<pre>\n    #!/bin/bash \n    exec /root/armtoolchain/osmocom-bb/src/host/layer23/src/transceiver/transceiver 115\n</pre>\n\n<p>其中结尾的“115”是指手机用来同步的ARFCN编号，这个需要测量后选取信号最好的ARFCN </p>\n<h4 id=\"进入osmocom-bb目录\"><a href=\"#进入osmocom-bb目录\" class=\"headerlink\" title=\"进入osmocom-bb目录\"></a>进入osmocom-bb目录</h4><pre>\n\n    cd /root/armtoolchain/osmocom-bb/src/host/osmocon \n</pre>\n\n\n<h4 id=\"以下是通过给手机刷入rssi-bin来进行ARFCN测量的方法\"><a href=\"#以下是通过给手机刷入rssi-bin来进行ARFCN测量的方法\" class=\"headerlink\" title=\"以下是通过给手机刷入rssi.bin来进行ARFCN测量的方法\"></a>以下是通过给手机刷入rssi.bin来进行ARFCN测量的方法</h4><pre>\n    sudo ./osmocon -p /dev/ttyUSB0 -m c123xor -c ./src/target/firmware/board/compal_e88/rssi.highram.bin\n</pre>\n\n<p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/test_afrcn.png\" alt=\"test_arfcn\"></p>\n<h4 id=\"下面需要修改OpenBTS-db设置\"><a href=\"#下面需要修改OpenBTS-db设置\" class=\"headerlink\" title=\"下面需要修改OpenBTS.db设置\"></a>下面需要修改OpenBTS.db设置</h4><h4 id=\"进入osmocon文件夹，并刷入trx的固件，运行完命令后按一下手机的开机键（不是长按，只用按一下），下图是正确的显示（LOST-xxxx！），如果卡在finish不动，那么ctrl-z停止进程然后抠电池重新刷\"><a href=\"#进入osmocon文件夹，并刷入trx的固件，运行完命令后按一下手机的开机键（不是长按，只用按一下），下图是正确的显示（LOST-xxxx！），如果卡在finish不动，那么ctrl-z停止进程然后抠电池重新刷\" class=\"headerlink\" title=\"进入osmocon文件夹，并刷入trx的固件，运行完命令后按一下手机的开机键（不是长按，只用按一下），下图是正确的显示（LOST -xxxx！），如果卡在finish不动，那么ctrl+z停止进程然后抠电池重新刷\"></a>进入osmocon文件夹，并刷入trx的固件，运行完命令后按一下手机的开机键（不是长按，只用按一下），下图是正确的显示（LOST -xxxx！），如果卡在finish不动，那么ctrl+z停止进程然后抠电池重新刷</h4><pre>\n    cd /root/armtoolchain/osmocom-bb/src/host/osmocon \n    sudo ./osmocon -p /dev/ttyUSB0 -m c123xor ../../target/firmware/board/compal_e88/trx.compalram.bin \n</pre>\n\n<p><br></p>\n<h4 id=\"此处另开一个终端（第二个），进入OpenBTS的运行文件夹-运行transceiver脚本，开始使用c118作为收发装置\"><a href=\"#此处另开一个终端（第二个），进入OpenBTS的运行文件夹-运行transceiver脚本，开始使用c118作为收发装置\" class=\"headerlink\" title=\"此处另开一个终端（第二个），进入OpenBTS的运行文件夹, 运行transceiver脚本，开始使用c118作为收发装置\"></a>此处另开一个终端（第二个），进入OpenBTS的运行文件夹, 运行transceiver脚本，开始使用c118作为收发装置</h4><pre>\n    cd /root/armtoolchain/dev/openbts/apps\n    chmod +x transceiver.sh\n    sudo ./transceiver.sh\n</pre>\n\n<p>正确的现实如下图<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/transeriver.png\" alt=\"transeriver\"></p>\n<h4 id=\"此处再另开一个终端（第三个），同样进入OpenBTS的运行文件夹\"><a href=\"#此处再另开一个终端（第三个），同样进入OpenBTS的运行文件夹\" class=\"headerlink\" title=\"此处再另开一个终端（第三个），同样进入OpenBTS的运行文件夹\"></a>此处再另开一个终端（第三个），同样进入OpenBTS的运行文件夹</h4><pre>\n    cd /root/armtoolchain/dev/openbts/apps \n    ./OpenBTSCLI \n</pre>\n\n<p><br><br></p>\n<h3 id=\"11-config-openbts\"><a href=\"#11-config-openbts\" class=\"headerlink\" title=\"11:config openbts\"></a>11:config openbts</h3><pre> \n    config GSM.Radio.NeedBSIC 1 \n    config GSM.RACH.MaxRetrans 3 \n    config GSM.RACH.TxInteger 8 \n    config GSM.Radio.C0 #你设置的ARFCN\n    config Control.LUR.OpenRegistration .* \n    #config GSM.Identity.MCC 001\n    #config GSM.Identity.MNC 01\n</pre>\n\n\n<h4 id=\"重启，有些设置才能生效，重启后依然是重复1-刷机，2-transceiver，3-OpenBTS控制台\"><a href=\"#重启，有些设置才能生效，重启后依然是重复1-刷机，2-transceiver，3-OpenBTS控制台\" class=\"headerlink\" title=\"重启，有些设置才能生效，重启后依然是重复1.刷机，2.transceiver，3.OpenBTS控制台\"></a>重启，有些设置才能生效，重启后依然是重复1.刷机，2.transceiver，3.OpenBTS控制台</h4><pre>\n    sudo reboot \n</pre>\n\n<p><br><br></p>\n<h3 id=\"12-Mobile-search-and-access-OpenBTS\"><a href=\"#12-Mobile-search-and-access-OpenBTS\" class=\"headerlink\" title=\"12:Mobile search and access OpenBTS\"></a>12:Mobile search and access OpenBTS</h3><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/join_openbts.jpg\" alt=\"join_openbts\"></p>\n<h3 id=\"13-View-tmsis-控制台的命令，查看连接的手机IMSI\"><a href=\"#13-View-tmsis-控制台的命令，查看连接的手机IMSI\" class=\"headerlink\" title=\"13:View tmsis 控制台的命令，查看连接的手机IMSI\"></a>13:View tmsis 控制台的命令，查看连接的手机IMSI</h3><pre>\n    tmsis\n</pre>\n\n<p><br><br></p>\n<h3 id=\"14-try-send-sms-控制台的命令，给指定IMSI-发送短信，如下\"><a href=\"#14-try-send-sms-控制台的命令，给指定IMSI-发送短信，如下\" class=\"headerlink\" title=\"14:try send sms 控制台的命令，给指定IMSI 发送短信，如下\"></a>14:try send sms 控制台的命令，给指定IMSI 发送短信，如下</h3><pre>\n    sendsms YOUTMSIS number messege\n</pre>\n\n<p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/send_sms.png\" alt=\"send_sms\"></p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E7%86%8A%E6%9C%AC%E7%86%8A%E8%B6%85%E5%B8%85_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>\n","excerpt":"<h3 id=\"在git-clone时推荐使用proxychains操作\"><a href=\"#在git-clone时推荐使用proxychains操作\" class=\"headerlink\" title=\"在git clone时推荐使用proxychains操作\"></a>在git clone时推荐使用<a href=\"https://evilmass.github.io/2017/01/18/%E5%88%A9%E7%94%A8proxychains%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8socks5%E4%BB%A3%E7%90%86/\" target=\"_blank\">proxychains</a>操作</h3><p><br></p>\n<h3 id=\"System-Ubuntu-14-04-4-desktop-amd64\"><a href=\"#System-Ubuntu-14-04-4-desktop-amd64\" class=\"headerlink\" title=\"System: Ubuntu-14.04.4-desktop-amd64\"></a>System: <a href=\"https://mirror.umd.edu/ubuntu-iso/14.04/ubuntu-14.04.4-desktop-amd64.iso\" target=\"_blank\">Ubuntu-14.04.4-desktop-amd64</a></h3><p><br></p>","more":"<h3 id=\"USTC-Sources\"><a href=\"#USTC-Sources\" class=\"headerlink\" title=\"USTC Sources:\"></a>USTC Sources:</h3><pre>\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty main restricted universe multiverse\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty-security main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty-security main restricted universe multiverse\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse\n    deb https://mirrors.ustc.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse\n    deb-src https://mirrors.ustc.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse\n</pre>\n\n<p><br><br></p>\n<h3 id=\"1-install-a-series-of-dependency\"><a href=\"#1-install-a-series-of-dependency\" class=\"headerlink\" title=\"1:install a series of dependency\"></a>1:install a series of dependency</h3><pre>\n    sudo apt-get update && apt-get upgrade\n    sudo apt-get install aptitude libtalloc2 libtalloc2-dbg python-talloc python-talloc-dbg python-talloc-dev libtalloc-dev automake libusb-dev libpcsclite-dev libusb-0.1-4 libpcsclite1 libccid pcscd libtool shtool autoconf git-core pkg-config make gcc build-essential libgmp3-dev libmpfr-dev libx11-6 libx11-dev texinfo flex bison libncurses5 libncurses5-dbg libncurses5-dev libncursesw5 libncursesw5-dbg libncursesw5-dev zlibc zlib1g-dev libmpfr4 libmpc-dev libpcsclite-dev libfftw3-dev libfftw3-doc vim # 没有Vim用我要死了\n    aptitude install libtool shtool automake autoconf git-core pkg-config make gcc\n</pre>\n\n<p><br><br></p>\n<h3 id=\"2：Create-several-directories-download-ARM-compiler\"><a href=\"#2：Create-several-directories-download-ARM-compiler\" class=\"headerlink\" title=\"2：Create several directories , download ARM compiler\"></a>2：Create several directories , download ARM compiler</h3><p>  参考<a href=\"http://evilmass.cc/gsm-sniffer/\">Gsm Sniffer小测试</a>配置armtoolchain环境，但这次我们用gnu-arm-build.3.sh这个脚本<br>  armtoolchain：<a href=\"http://pan.baidu.com/s/1mhILGtq\" target=\"_blank\">http://pan.baidu.com/s/1mhILGtq 密码：qfhn</a><br><br><br></p>\n<h3 id=\"3：Download-and-compile-osmocomBB\"><a href=\"#3：Download-and-compile-osmocomBB\" class=\"headerlink\" title=\"3：Download and compile osmocomBB\"></a>3：Download and compile osmocomBB</h3><pre>  \n    git clone git://git.osmocom.org/libosmocore.git\n    git clone git://git.osmocom.org/osmocom-bb.git\n    git clone git://git.osmocom.org/libosmo-dsp.git \n</pre>\n\n<p>When installing libosmocore execute ./configure many people will encounter No package ‘talloc’ found such a mistake , because they can not talloc, Here is the solution</p>\n<pre>    \n    get https://www.samba.org/ftp/talloc/talloc-2.1.7.tar.gz\n    tar -zxvf talloc-2.1.7.tar.gz\n    cd talloc-2.1.7/\n    ./configure\n    make\n    sudo make install\n</pre>\n\n<p>talloc-2.1.7：<a href=\"http://pan.baidu.com/s/1bpKapgr\" target=\"_blank\">http://pan.baidu.com/s/1bpKapgr 密码：u8dz</a></p>\n<h4 id=\"install-libosmocore\"><a href=\"#install-libosmocore\" class=\"headerlink\" title=\"install libosmocore\"></a>install libosmocore</h4><pre>    \n    d libosmocore/\n    autoreconf -i\n    ./configure \n    make\n    sudo make install \n    sudo ldconfig \n    cd ..\n</pre>\n\n<h4 id=\"install-libosmo-dsp\"><a href=\"#install-libosmo-dsp\" class=\"headerlink\" title=\"install libosmo-dsp\"></a>install libosmo-dsp</h4><pre>\n    cd libosmo-dsp/\n    autoreconf -i\n    ./configure\n    make \n    sudo make install\n    sudo ldconfig\n    cd ..\n</pre>\n\n<p><br><br></p>\n<h4 id=\"Compile-osmocombb\"><a href=\"#Compile-osmocombb\" class=\"headerlink\" title=\"Compile osmocombb\"></a>Compile osmocombb</h4><p>   参考<a href=\"https://evilmass.github.io/2016/10/19/GSM-Sniffer%E5%B0%8F%E6%B5%8B%E8%AF%95/\" target=\"_blank\">Gsm Sniffer小测试</a>修正cell_log问题</p>\n<pre>  \n    cd  osmocom-bb    \n    git checkout sylvain/testing     \n    vim src/target/firmware/Makefile\n</pre>\n\n<h5 id=\"CFLAGS-DCONFIG-TX-ENABLE-lt-去掉前面的注释\"><a href=\"#CFLAGS-DCONFIG-TX-ENABLE-lt-去掉前面的注释\" class=\"headerlink\" title=\"# CFLAGS +=-DCONFIG_TX_ENABLE &lt;- 去掉前面的注释\"></a># CFLAGS +=-DCONFIG_TX_ENABLE &lt;- 去掉前面的注释</h5><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/tx_enable.png\" alt=\"tx_enable\" /></p>\n<pre>\n    cd src\n    make #HOST_layer23_CONFARGS=--enable-transceiver \n</pre>\n\n<p><br><br></p>\n<h3 id=\"6-download-openbts5-0\"><a href=\"#6-download-openbts5-0\" class=\"headerlink\" title=\"6:download openbts5.0\"></a>6:download openbts5.0</h3><pre>    sudo apt-get install software-properties-common python-software-properties\n        sudo add-apt-repository ppa:git-core/ppa #(press enter to continue)\n        sudo apt-get update\n        sudo apt-get remove git && apt-get install git\n        cd /root/armtoolchain\n        git clone https://github.com/RangeNetworks/dev.git\n</pre>\n\n<p><br><br></p>\n<h3 id=\"7-then-install-a-series-of-dependency\"><a href=\"#7-then-install-a-series-of-dependency\" class=\"headerlink\" title=\"7:then install a series of dependency\"></a>7:then install a series of dependency</h3><pre>    sudo apt-get install ntp bind9 libboost-dev\n</pre>\n\n<p><br><br></p>\n<h3 id=\"8-git-ssh-key\"><a href=\"#8-git-ssh-key\" class=\"headerlink\" title=\"8:git ssh key\"></a>8:git ssh key</h3><pre>\n    ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" #主题显示有问题，这里是英文的双引号，下同\n    eval \"$(ssh-agent -s)\"\n    ssh-add ~/.ssh/id_rsa\n    more ~/.ssh/id_rsa.pub\n</pre>\n\n<p><a href=\"https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/\" target=\"_blank\">在GitHub账户添加你的SSH-KEYS</a></p>\n<pre>\n    ssh -T git@github.com \n</pre>\n\n<p>输入yes<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/ssh_T.png\" alt=\"ssh_T\" /><br>若有其他问题请参考<a href=\"https://help.github.com/categories/ssh/\" target=\"_blank\">GitHub–Help</a><br><br><br></p>\n<h3 id=\"9-install-openbts5-0\"><a href=\"#9-install-openbts5-0\" class=\"headerlink\" title=\"9:install openbts5.0\"></a>9:install openbts5.0</h3><pre>\n    cd /root/armtoolchain/dev\n    ./clone.sh #这里建议用梯子\n    ./switchto.sh 5.0 \n</pre>\n\n\n<h3 id=\"download-asterisk-11-7-0-tar-gz-and-coredumper-1-2-1-tar-gz\"><a href=\"#download-asterisk-11-7-0-tar-gz-and-coredumper-1-2-1-tar-gz\" class=\"headerlink\" title=\"download asterisk-11.7.0.tar.gz and coredumper-1.2.1.tar.gz\"></a>download asterisk-11.7.0.tar.gz and coredumper-1.2.1.tar.gz</h3><p>因为GFW的缘故这两个文件在执    ./build.sh的时候下载不能（#若是有梯子可以直接执行）<br>百度盘：<a href=\"http://pan.baidu.com/s/1bptBPVL\" target=\"_blank\">http://pan.baidu.com/s/1bptBPVL 密码：e72m</a></p>\n<h3 id=\"墙外的官方连接\"><a href=\"#墙外的官方连接\" class=\"headerlink\" title=\"墙外的官方连接\"></a>墙外的官方连接</h3><p><a href=\"http://downloads.asterisk.org/pub/telephony/asterisk/releaasterisk-11.7.0.tar.gz\" target=\"_blank\">http://downloads.asterisk.org/pub/telephony/asterisk/releaasterisk-11.7.0.tar.gz</a><br><a href=\"https://storage.googleapis.com/google-code-archive-downloadscode.google.com/google-coredumper/coredumper-1.2.1.tar.gz\" target=\"_blank\"> https://storage.googleapis.com/google-code-archive-downloadscode.google.com/google-coredumper/coredumper-1.2.1.tar.gz</a></p>\n<pre><code># 将asterisk-11.7.0.tar.gz复制到dev/asterisk\n# 将coredumper-1.2.1.tar.gz复制到dev/libcoredumper\n</code></pre><p>在dev目录下注释掉bulid.sh的一些命令，否则会影响编译（要不下那两个文件干嘛= w =）</p>\n<p><code>gedit build.sh</code>   </p>\n<pre> \n    #installIfMissing libzmq5 \n    #rm -rf range-asterisk* asterisk-*\n</pre>\n\n<p><code>gedit asterisk/build.sh</code></p>\n<pre>\n    #if [ ! -f asterisk-$VERSION.tar.gz ] \n    #then \n    #    sayAndDo wget  http://downloads.asterisk.org/pub/telephony/aste    releases/asterisk-  $VERSION.tar.gz \n    #fi \n    #if [ -d asterisk-$VERSION ] \n    #then \n    #   sayAndDo rm -rf asterisk-$VERSION \n    #fi\n</pre>\n\n<p><code>gedit libcoredumper/build.sh</code></p>\n<pre>\n    #if [ ! -f coredumper-$VERSION.tar.gz ] \n    #then \n    #    sayAndDo wget http://google-coredumper.googlecode.com/files/coredumper-$VERSION.tar.gz \n    #fi \n    #if [ -d coredumper-$VERSION ] \n    #then \n    #   sayAndDo rm -rf coredumper-$VERSION \n    #fi\n</pre>\n\n<p><br></p>\n<pre>\n    cd /root/armtoolchain/dev/liba53\n    sudo make install\n    cd ../ #回到dev目录\n    ./build.sh SDR1 #按照SDR1形式编译\n</pre>\n\n<p>如果一切顺利,编译成功,会在/dev/BUILDS/下生成 2016-xx-xx–xx-xx-xx文件夹 以时间命名,如下图<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/bulid_timestamp.png\" alt=\"bulid_timestamp\" /></p>\n<p><br><br></p>\n<h3 id=\"10-open-bts\"><a href=\"#10-open-bts\" class=\"headerlink\" title=\"10:open bts\"></a>10:open bts</h3><pre>\n    cd /root/armtoolchain/dev/BUIDLS/2016-xx-xx--xx-xx-xx/    \n    sudo dpkg -i *.deb\n    #如果此处会报错提示依赖不满足,我们修复一下之后再重新安装deb\n    sudo apt-get -f install && sudo dpkg -i *.deb\n    #现在我们可以运行OpenBTS了\n    sudo start asterisk \n    sudo start sipauthserve \n    sudo start smqueue \n    sudo start openbts\n</pre>\n\n<h4 id=\"创建Transceiver\"><a href=\"#创建Transceiver\" class=\"headerlink\" title=\"创建Transceiver\"></a>创建Transceiver</h4><p>在/dev/openbts/apps/文件夹中创建一个文件，名为transceiver.sh， 打开后将以下两行代码贴入： </p>\n<pre>\n    #!/bin/bash \n    exec /root/armtoolchain/osmocom-bb/src/host/layer23/src/transceiver/transceiver 115\n</pre>\n\n<p>其中结尾的“115”是指手机用来同步的ARFCN编号，这个需要测量后选取信号最好的ARFCN </p>\n<h4 id=\"进入osmocom-bb目录\"><a href=\"#进入osmocom-bb目录\" class=\"headerlink\" title=\"进入osmocom-bb目录\"></a>进入osmocom-bb目录</h4><pre>\n\n    cd /root/armtoolchain/osmocom-bb/src/host/osmocon \n</pre>\n\n\n<h4 id=\"以下是通过给手机刷入rssi-bin来进行ARFCN测量的方法\"><a href=\"#以下是通过给手机刷入rssi-bin来进行ARFCN测量的方法\" class=\"headerlink\" title=\"以下是通过给手机刷入rssi.bin来进行ARFCN测量的方法\"></a>以下是通过给手机刷入rssi.bin来进行ARFCN测量的方法</h4><pre>\n    sudo ./osmocon -p /dev/ttyUSB0 -m c123xor -c ./src/target/firmware/board/compal_e88/rssi.highram.bin\n</pre>\n\n<p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/test_afrcn.png\" alt=\"test_arfcn\" /></p>\n<h4 id=\"下面需要修改OpenBTS-db设置\"><a href=\"#下面需要修改OpenBTS-db设置\" class=\"headerlink\" title=\"下面需要修改OpenBTS.db设置\"></a>下面需要修改OpenBTS.db设置</h4><h4 id=\"进入osmocon文件夹，并刷入trx的固件，运行完命令后按一下手机的开机键（不是长按，只用按一下），下图是正确的显示（LOST-xxxx！），如果卡在finish不动，那么ctrl-z停止进程然后抠电池重新刷\"><a href=\"#进入osmocon文件夹，并刷入trx的固件，运行完命令后按一下手机的开机键（不是长按，只用按一下），下图是正确的显示（LOST-xxxx！），如果卡在finish不动，那么ctrl-z停止进程然后抠电池重新刷\" class=\"headerlink\" title=\"进入osmocon文件夹，并刷入trx的固件，运行完命令后按一下手机的开机键（不是长按，只用按一下），下图是正确的显示（LOST -xxxx！），如果卡在finish不动，那么ctrl+z停止进程然后抠电池重新刷\"></a>进入osmocon文件夹，并刷入trx的固件，运行完命令后按一下手机的开机键（不是长按，只用按一下），下图是正确的显示（LOST -xxxx！），如果卡在finish不动，那么ctrl+z停止进程然后抠电池重新刷</h4><pre>\n    cd /root/armtoolchain/osmocom-bb/src/host/osmocon \n    sudo ./osmocon -p /dev/ttyUSB0 -m c123xor ../../target/firmware/board/compal_e88/trx.compalram.bin \n</pre>\n\n<p><br></p>\n<h4 id=\"此处另开一个终端（第二个），进入OpenBTS的运行文件夹-运行transceiver脚本，开始使用c118作为收发装置\"><a href=\"#此处另开一个终端（第二个），进入OpenBTS的运行文件夹-运行transceiver脚本，开始使用c118作为收发装置\" class=\"headerlink\" title=\"此处另开一个终端（第二个），进入OpenBTS的运行文件夹, 运行transceiver脚本，开始使用c118作为收发装置\"></a>此处另开一个终端（第二个），进入OpenBTS的运行文件夹, 运行transceiver脚本，开始使用c118作为收发装置</h4><pre>\n    cd /root/armtoolchain/dev/openbts/apps\n    chmod +x transceiver.sh\n    sudo ./transceiver.sh\n</pre>\n\n<p>正确的现实如下图<br><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/transeriver.png\" alt=\"transeriver\" /></p>\n<h4 id=\"此处再另开一个终端（第三个），同样进入OpenBTS的运行文件夹\"><a href=\"#此处再另开一个终端（第三个），同样进入OpenBTS的运行文件夹\" class=\"headerlink\" title=\"此处再另开一个终端（第三个），同样进入OpenBTS的运行文件夹\"></a>此处再另开一个终端（第三个），同样进入OpenBTS的运行文件夹</h4><pre>\n    cd /root/armtoolchain/dev/openbts/apps \n    ./OpenBTSCLI \n</pre>\n\n<p><br><br></p>\n<h3 id=\"11-config-openbts\"><a href=\"#11-config-openbts\" class=\"headerlink\" title=\"11:config openbts\"></a>11:config openbts</h3><pre> \n    config GSM.Radio.NeedBSIC 1 \n    config GSM.RACH.MaxRetrans 3 \n    config GSM.RACH.TxInteger 8 \n    config GSM.Radio.C0 #你设置的ARFCN\n    config Control.LUR.OpenRegistration .* \n    #config GSM.Identity.MCC 001\n    #config GSM.Identity.MNC 01\n</pre>\n\n\n<h4 id=\"重启，有些设置才能生效，重启后依然是重复1-刷机，2-transceiver，3-OpenBTS控制台\"><a href=\"#重启，有些设置才能生效，重启后依然是重复1-刷机，2-transceiver，3-OpenBTS控制台\" class=\"headerlink\" title=\"重启，有些设置才能生效，重启后依然是重复1.刷机，2.transceiver，3.OpenBTS控制台\"></a>重启，有些设置才能生效，重启后依然是重复1.刷机，2.transceiver，3.OpenBTS控制台</h4><pre>\n    sudo reboot \n</pre>\n\n<p><br><br></p>\n<h3 id=\"12-Mobile-search-and-access-OpenBTS\"><a href=\"#12-Mobile-search-and-access-OpenBTS\" class=\"headerlink\" title=\"12:Mobile search and access OpenBTS\"></a>12:Mobile search and access OpenBTS</h3><p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/join_openbts.jpg\" alt=\"join_openbts\" /></p>\n<h3 id=\"13-View-tmsis-控制台的命令，查看连接的手机IMSI\"><a href=\"#13-View-tmsis-控制台的命令，查看连接的手机IMSI\" class=\"headerlink\" title=\"13:View tmsis 控制台的命令，查看连接的手机IMSI\"></a>13:View tmsis 控制台的命令，查看连接的手机IMSI</h3><pre>\n    tmsis\n</pre>\n\n<p><br><br></p>\n<h3 id=\"14-try-send-sms-控制台的命令，给指定IMSI-发送短信，如下\"><a href=\"#14-try-send-sms-控制台的命令，给指定IMSI-发送短信，如下\" class=\"headerlink\" title=\"14:try send sms 控制台的命令，给指定IMSI 发送短信，如下\"></a>14:try send sms 控制台的命令，给指定IMSI 发送短信，如下</h3><pre>\n    sendsms YOUTMSIS number messege\n</pre>\n\n<p><img src=\"https://of4jd0bcc.qnssl.com/GsmSniffer/send_sms.png\" alt=\"send_sms\" /></p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E7%86%8A%E6%9C%AC%E7%86%8A%E8%B6%85%E5%B8%85_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>"},{"title":"RFID小测试","date":"2016-10-19T05:58:44.000Z","_content":"\n偶然看到FreeBuf上的关于RFID（Radio Frequency Identification）的文章，简单做了下笔记后......\n首先要说的是容易被混淆的概念：RFID和NFC\n**RFID:**\n　RFID是射频识别技术，它主要是通过无线电讯号识别特定目标，并可读写数据，但仅仅是单向的读取。RFID有低频（几mm的传输距离）、高频（13.56Mhz）、超高频、微波频段等，频段不同，导致功率不同，导致传输的距离不同。\n\n**NFC:**\n　NFC是近距离无线通讯技术，芯片具有相互通信能力，并有计算能力。NFC可以看作是RFID的子集，用的是RFID的高频（13.56MHz）的标准，但却是双向过程。\n\n**结论**：\n>NFC ∈ RFID\n\n**安全性对比：**\n>在一些设计现金支付、信用卡的应用中，RFID的通信距离情况下，其他设备也可以收到个人RFID信息，存在不安全因素；而NFC工作有效距离约10cm，所以具有很高的安全性\n\n\n<!--more-->\n\n**一图胜千言：**\n![RFID与NFC对比](https://of4jd0bcc.qnssl.com/Rfid/RFID_NFC.jpg)\n\n</br>\n\n**破解分析：**\n![mifare芯片结构图](https://of4jd0bcc.qnssl.com/Rfid/mifare%20classic%E8%8A%AF%E7%89%87%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n![mifare扇区块](https://of4jd0bcc.qnssl.com/Rfid/%E6%89%87%E5%8C%BA%E5%9D%97.png)\n</ul>\n\n可以看到M1卡的内部结构如上图所示\nMifare Classic card提供1k-4k的容量，我们经常见到的是Mifare Classic 1k(S50)，也就是所谓的M1卡。M1卡有从0到15共16个扇区，并且每个扇区都有独立的密码，每个扇区配备了从0到3共4个段，每个段可以保存16字节的内容。0扇区不建议更改是因为储存了制造商的机器检验信息。\n\n所以我们的目标就是剩下的15个储存金额数据的信息的扇区\n\n**破解方式:**\n1.使用默认的密码攻击(弱密和初始密码永远都是第一位)\n2.nested authentication(验证漏洞攻击，多用于已知某一扇区密码后碰撞出其他扇区的密码)\n3.darkside攻击:(PM3神器啊)\n\n**实战:**\n\n**APK：Mifare Classic Tool**\n支持设备：\n\n更多设备看这里:\n[http://www.shopnfc.it/en/content/7-nfc-device-compatibility](http://www.shopnfc.it/en/content/7-nfc-device-compatibility)\n\n某Evilmass天真的抱着吾等学校的热水卡密码一定是12个f或者12个0的想法(●'◡'●)，购入了一台ACR122U    ￥125\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n然后就出二手了    ￥100\n\n(╯°口°)╯︵┴─┴\n鉴于原版PM3太贵，那还是买个好(山)看(寨)点的吧\n\n说到底还是穷\n(╯°口°)╯︵┴─┴\n就是这货:\n![PM3Device](https://of4jd0bcc.qnssl.com/Rfid/PM3.jpg)\n\n**操作界面:**\n![PM3Client](https://of4jd0bcc.qnssl.com/Rfid/pm3Client.jpg)\n\n命令行输入:`hf mf mifare`进行Darkside Attack拿到密码\n\n**用得到的密码继续输入：**`hf mf nested 1 0 A 1986527***   d`\n\n**利用Nested碰撞出其他扇区密码**\n![hf mf](https://of4jd0bcc.qnssl.com/Rfid/dump1.jpg)\n\n获取水卡dumpdata.bin: `hf mf dump 1`\n**Dump后拿到数据对白卡进行复制:** `hf mf restore 1`\n![水卡复制](https://of4jd0bcc.qnssl.com/Rfid/copy2.jpg)\n\n![白卡复制](https://of4jd0bcc.qnssl.com/Rfid/copy1.jpg)\n成功~\n\n然而我们的最终目标是修改金额(手动斜眼←_←)\n分析金额变动数据:\n**软件:UltraCompare**\n![UltraCompare](https://of4jd0bcc.qnssl.com/Rfid/compare.jpg)\n第一次的金额是31.62\n第二次的金额是31.52\n第三次的金额是31.07\n第四次的金额是29.77\n\n**整理如下:**\n> 5A0C 0000 A5F3 FFFF 5A0C 000011EE11EE \n> 5A0C 0000 A5F3 FFFF 5A0C 000012ED12ED——————31.62 \n> \n> 500C 0000 AFF3 FFFF 500C 000011EE11EE\n> 500C 0000 AFF3 FFFF 500C 000012ED12ED——————31.52 \n> \n> 230C 0000 DCF3 FFFF 230C 000011EE11EE\n> 230C 0000 DCF3 FFFF 230C 000012ED12ED——————31.07  \n> \n> A10B 0000 5EF4 FFFF A10B 000011EE11EE  \n> A10B 0000 5EF4 FFFF A10B 000012ED12ED——————29.77\n\n经测试:最后的11EE和12ED只是单纯的补正为FF而已\n即\n\n_————>F_\n**所以决定金额的就是 5A0C 和 A5F3**\n这里感谢黑手党群里的Feng大神给了个重要的信息：3162(10进制金额)转换为16进制正好是0C5A，上面需要倒序输入\n那么后面的A5F3是否为校检位呢---->Bingo!\n\n_————>F_\n那么剩下就是修改金额数据了:\n比如：\n\n> 520.13\n> ————————>16进制\n> ————————>CB2D\n> ————————>倒序2DCB\n> ————————>校检位D234\n\n执行数据块写入\n17行:\n`hf mf wrbl 17 A 1986527*** 2DCB0000D234FFFF2DCB000011EE11EE`\n18行:\n`hf mf wrbl 18 A 1986527*** 2DCB0000D234FFFF2DCB000012ED12ED`\nDONE~\n![52013](https://of4jd0bcc.qnssl.com/Rfid/52013.jpg)\n\n同理修改为655.25\n![65525](https://of4jd0bcc.qnssl.com/Rfid/65525.jpg)\n至此，总算告一段落了~\n\nQ1：数学不好(比如我)，搞不定金额计算方式怎么办？\nA1：复制什么的。或者找个数学好的宿友（Special Thanks To某贤同学）\n\nQ2：整个过程用了多久？\nA2:一个星期，计算用了5天૮(༼༼Ծ◞◟Ծ༽༽)ა，所以大家一定要好好学数学\n\nQ3:能不能教我破解热水卡？能不能把这个卖给我？能不能。。。。。。\nA3：不约!\n\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_alipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200","source":"_posts/RFID小测试.md","raw":"---\ntitle: RFID小测试\ndate: 2016-10-19 13:58:44\ntags: Hack\n---\n\n偶然看到FreeBuf上的关于RFID（Radio Frequency Identification）的文章，简单做了下笔记后......\n首先要说的是容易被混淆的概念：RFID和NFC\n**RFID:**\n　RFID是射频识别技术，它主要是通过无线电讯号识别特定目标，并可读写数据，但仅仅是单向的读取。RFID有低频（几mm的传输距离）、高频（13.56Mhz）、超高频、微波频段等，频段不同，导致功率不同，导致传输的距离不同。\n\n**NFC:**\n　NFC是近距离无线通讯技术，芯片具有相互通信能力，并有计算能力。NFC可以看作是RFID的子集，用的是RFID的高频（13.56MHz）的标准，但却是双向过程。\n\n**结论**：\n>NFC ∈ RFID\n\n**安全性对比：**\n>在一些设计现金支付、信用卡的应用中，RFID的通信距离情况下，其他设备也可以收到个人RFID信息，存在不安全因素；而NFC工作有效距离约10cm，所以具有很高的安全性\n\n\n<!--more-->\n\n**一图胜千言：**\n![RFID与NFC对比](https://of4jd0bcc.qnssl.com/Rfid/RFID_NFC.jpg)\n\n</br>\n\n**破解分析：**\n![mifare芯片结构图](https://of4jd0bcc.qnssl.com/Rfid/mifare%20classic%E8%8A%AF%E7%89%87%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n![mifare扇区块](https://of4jd0bcc.qnssl.com/Rfid/%E6%89%87%E5%8C%BA%E5%9D%97.png)\n</ul>\n\n可以看到M1卡的内部结构如上图所示\nMifare Classic card提供1k-4k的容量，我们经常见到的是Mifare Classic 1k(S50)，也就是所谓的M1卡。M1卡有从0到15共16个扇区，并且每个扇区都有独立的密码，每个扇区配备了从0到3共4个段，每个段可以保存16字节的内容。0扇区不建议更改是因为储存了制造商的机器检验信息。\n\n所以我们的目标就是剩下的15个储存金额数据的信息的扇区\n\n**破解方式:**\n1.使用默认的密码攻击(弱密和初始密码永远都是第一位)\n2.nested authentication(验证漏洞攻击，多用于已知某一扇区密码后碰撞出其他扇区的密码)\n3.darkside攻击:(PM3神器啊)\n\n**实战:**\n\n**APK：Mifare Classic Tool**\n支持设备：\n\n更多设备看这里:\n[http://www.shopnfc.it/en/content/7-nfc-device-compatibility](http://www.shopnfc.it/en/content/7-nfc-device-compatibility)\n\n某Evilmass天真的抱着吾等学校的热水卡密码一定是12个f或者12个0的想法(●'◡'●)，购入了一台ACR122U    ￥125\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n然后就出二手了    ￥100\n\n(╯°口°)╯︵┴─┴\n鉴于原版PM3太贵，那还是买个好(山)看(寨)点的吧\n\n说到底还是穷\n(╯°口°)╯︵┴─┴\n就是这货:\n![PM3Device](https://of4jd0bcc.qnssl.com/Rfid/PM3.jpg)\n\n**操作界面:**\n![PM3Client](https://of4jd0bcc.qnssl.com/Rfid/pm3Client.jpg)\n\n命令行输入:`hf mf mifare`进行Darkside Attack拿到密码\n\n**用得到的密码继续输入：**`hf mf nested 1 0 A 1986527***   d`\n\n**利用Nested碰撞出其他扇区密码**\n![hf mf](https://of4jd0bcc.qnssl.com/Rfid/dump1.jpg)\n\n获取水卡dumpdata.bin: `hf mf dump 1`\n**Dump后拿到数据对白卡进行复制:** `hf mf restore 1`\n![水卡复制](https://of4jd0bcc.qnssl.com/Rfid/copy2.jpg)\n\n![白卡复制](https://of4jd0bcc.qnssl.com/Rfid/copy1.jpg)\n成功~\n\n然而我们的最终目标是修改金额(手动斜眼←_←)\n分析金额变动数据:\n**软件:UltraCompare**\n![UltraCompare](https://of4jd0bcc.qnssl.com/Rfid/compare.jpg)\n第一次的金额是31.62\n第二次的金额是31.52\n第三次的金额是31.07\n第四次的金额是29.77\n\n**整理如下:**\n> 5A0C 0000 A5F3 FFFF 5A0C 000011EE11EE \n> 5A0C 0000 A5F3 FFFF 5A0C 000012ED12ED——————31.62 \n> \n> 500C 0000 AFF3 FFFF 500C 000011EE11EE\n> 500C 0000 AFF3 FFFF 500C 000012ED12ED——————31.52 \n> \n> 230C 0000 DCF3 FFFF 230C 000011EE11EE\n> 230C 0000 DCF3 FFFF 230C 000012ED12ED——————31.07  \n> \n> A10B 0000 5EF4 FFFF A10B 000011EE11EE  \n> A10B 0000 5EF4 FFFF A10B 000012ED12ED——————29.77\n\n经测试:最后的11EE和12ED只是单纯的补正为FF而已\n即\n\n_————>F_\n**所以决定金额的就是 5A0C 和 A5F3**\n这里感谢黑手党群里的Feng大神给了个重要的信息：3162(10进制金额)转换为16进制正好是0C5A，上面需要倒序输入\n那么后面的A5F3是否为校检位呢---->Bingo!\n\n_————>F_\n那么剩下就是修改金额数据了:\n比如：\n\n> 520.13\n> ————————>16进制\n> ————————>CB2D\n> ————————>倒序2DCB\n> ————————>校检位D234\n\n执行数据块写入\n17行:\n`hf mf wrbl 17 A 1986527*** 2DCB0000D234FFFF2DCB000011EE11EE`\n18行:\n`hf mf wrbl 18 A 1986527*** 2DCB0000D234FFFF2DCB000012ED12ED`\nDONE~\n![52013](https://of4jd0bcc.qnssl.com/Rfid/52013.jpg)\n\n同理修改为655.25\n![65525](https://of4jd0bcc.qnssl.com/Rfid/65525.jpg)\n至此，总算告一段落了~\n\nQ1：数学不好(比如我)，搞不定金额计算方式怎么办？\nA1：复制什么的。或者找个数学好的宿友（Special Thanks To某贤同学）\n\nQ2：整个过程用了多久？\nA2:一个星期，计算用了5天૮(༼༼Ծ◞◟Ծ༽༽)ა，所以大家一定要好好学数学\n\nQ3:能不能教我破解热水卡？能不能把这个卖给我？能不能。。。。。。\nA3：不约!\n\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_alipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200","slug":"RFID小测试","published":1,"updated":"2017-01-31T11:03:29.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv5dxzv0008poogivdhluvt","content":"<p>偶然看到FreeBuf上的关于RFID（Radio Frequency Identification）的文章，简单做了下笔记后……<br>首先要说的是容易被混淆的概念：RFID和NFC<br><strong>RFID:</strong><br>　RFID是射频识别技术，它主要是通过无线电讯号识别特定目标，并可读写数据，但仅仅是单向的读取。RFID有低频（几mm的传输距离）、高频（13.56Mhz）、超高频、微波频段等，频段不同，导致功率不同，导致传输的距离不同。</p>\n<p><strong>NFC:</strong><br>　NFC是近距离无线通讯技术，芯片具有相互通信能力，并有计算能力。NFC可以看作是RFID的子集，用的是RFID的高频（13.56MHz）的标准，但却是双向过程。</p>\n<p><strong>结论</strong>：</p>\n<blockquote>\n<p>NFC ∈ RFID</p>\n</blockquote>\n<p><strong>安全性对比：</strong></p>\n<blockquote>\n<p>在一些设计现金支付、信用卡的应用中，RFID的通信距离情况下，其他设备也可以收到个人RFID信息，存在不安全因素；而NFC工作有效距离约10cm，所以具有很高的安全性</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><strong>一图胜千言：</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/RFID_NFC.jpg\" alt=\"RFID与NFC对比\"></p>\n<p><br></p>\n<p><strong>破解分析：</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/mifare%20classic%E8%8A%AF%E7%89%87%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"mifare芯片结构图\"><br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/%E6%89%87%E5%8C%BA%E5%9D%97.png\" alt=\"mifare扇区块\"><br></p>\n<p>可以看到M1卡的内部结构如上图所示<br>Mifare Classic card提供1k-4k的容量，我们经常见到的是Mifare Classic 1k(S50)，也就是所谓的M1卡。M1卡有从0到15共16个扇区，并且每个扇区都有独立的密码，每个扇区配备了从0到3共4个段，每个段可以保存16字节的内容。0扇区不建议更改是因为储存了制造商的机器检验信息。</p>\n<p>所以我们的目标就是剩下的15个储存金额数据的信息的扇区</p>\n<p><strong>破解方式:</strong><br>1.使用默认的密码攻击(弱密和初始密码永远都是第一位)<br>2.nested authentication(验证漏洞攻击，多用于已知某一扇区密码后碰撞出其他扇区的密码)<br>3.darkside攻击:(PM3神器啊)</p>\n<p><strong>实战:</strong></p>\n<p><strong>APK：Mifare Classic Tool</strong><br>支持设备：</p>\n<p>更多设备看这里:<br><a href=\"http://www.shopnfc.it/en/content/7-nfc-device-compatibility\" target=\"_blank\" rel=\"external\">http://www.shopnfc.it/en/content/7-nfc-device-compatibility</a></p>\n<p>某Evilmass天真的抱着吾等学校的热水卡密码一定是12个f或者12个0的想法(●’◡’●)，购入了一台ACR122U    ￥125</p>\n<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>\n<p>然后就出二手了    ￥100</p>\n<p>(╯°口°)╯︵┴─┴<br>鉴于原版PM3太贵，那还是买个好(山)看(寨)点的吧</p>\n<p>说到底还是穷<br>(╯°口°)╯︵┴─┴<br>就是这货:<br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/PM3.jpg\" alt=\"PM3Device\"></p>\n<p><strong>操作界面:</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/pm3Client.jpg\" alt=\"PM3Client\"></p>\n<p>命令行输入:<code>hf mf mifare</code>进行Darkside Attack拿到密码</p>\n<p><strong>用得到的密码继续输入：</strong><code>hf mf nested 1 0 A 1986527***   d</code></p>\n<p><strong>利用Nested碰撞出其他扇区密码</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/dump1.jpg\" alt=\"hf mf\"></p>\n<p>获取水卡dumpdata.bin: <code>hf mf dump 1</code><br><strong>Dump后拿到数据对白卡进行复制:</strong> <code>hf mf restore 1</code><br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/copy2.jpg\" alt=\"水卡复制\"></p>\n<p><img src=\"https://of4jd0bcc.qnssl.com/Rfid/copy1.jpg\" alt=\"白卡复制\"><br>成功~</p>\n<p>然而我们的最终目标是修改金额(手动斜眼←_←)<br>分析金额变动数据:<br><strong>软件:UltraCompare</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/compare.jpg\" alt=\"UltraCompare\"><br>第一次的金额是31.62<br>第二次的金额是31.52<br>第三次的金额是31.07<br>第四次的金额是29.77</p>\n<p><strong>整理如下:</strong></p>\n<blockquote>\n<p>5A0C 0000 A5F3 FFFF 5A0C 000011EE11EE<br>5A0C 0000 A5F3 FFFF 5A0C 000012ED12ED——————31.62 </p>\n<p>500C 0000 AFF3 FFFF 500C 000011EE11EE<br>500C 0000 AFF3 FFFF 500C 000012ED12ED——————31.52 </p>\n<p>230C 0000 DCF3 FFFF 230C 000011EE11EE<br>230C 0000 DCF3 FFFF 230C 000012ED12ED——————31.07  </p>\n<p>A10B 0000 5EF4 FFFF A10B 000011EE11EE<br>A10B 0000 5EF4 FFFF A10B 000012ED12ED——————29.77</p>\n</blockquote>\n<p>经测试:最后的11EE和12ED只是单纯的补正为FF而已<br>即</p>\n<p><em>————&gt;F</em><br><strong>所以决定金额的就是 5A0C 和 A5F3</strong><br>这里感谢黑手党群里的Feng大神给了个重要的信息：3162(10进制金额)转换为16进制正好是0C5A，上面需要倒序输入<br>那么后面的A5F3是否为校检位呢—-&gt;Bingo!</p>\n<p><em>————&gt;F</em><br>那么剩下就是修改金额数据了:<br>比如：</p>\n<blockquote>\n<p>520.13<br>————————&gt;16进制<br>————————&gt;CB2D<br>————————&gt;倒序2DCB<br>————————&gt;校检位D234</p>\n</blockquote>\n<p>执行数据块写入<br>17行:<br><code>hf mf wrbl 17 A 1986527*** 2DCB0000D234FFFF2DCB000011EE11EE</code><br>18行:<br><code>hf mf wrbl 18 A 1986527*** 2DCB0000D234FFFF2DCB000012ED12ED</code><br>DONE~<br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/52013.jpg\" alt=\"52013\"></p>\n<p>同理修改为655.25<br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/65525.jpg\" alt=\"65525\"><br>至此，总算告一段落了~</p>\n<p>Q1：数学不好(比如我)，搞不定金额计算方式怎么办？<br>A1：复制什么的。或者找个数学好的宿友（Special Thanks To某贤同学）</p>\n<p>Q2：整个过程用了多久？<br>A2:一个星期，计算用了5天૮(༼༼Ծ◞◟Ծ༽༽)ა，所以大家一定要好好学数学</p>\n<p>Q3:能不能教我破解热水卡？能不能把这个卖给我？能不能。。。。。。<br>A3：不约!</p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>\n","excerpt":"<p>偶然看到FreeBuf上的关于RFID（Radio Frequency Identification）的文章，简单做了下笔记后……<br>首先要说的是容易被混淆的概念：RFID和NFC<br><strong>RFID:</strong><br>　RFID是射频识别技术，它主要是通过无线电讯号识别特定目标，并可读写数据，但仅仅是单向的读取。RFID有低频（几mm的传输距离）、高频（13.56Mhz）、超高频、微波频段等，频段不同，导致功率不同，导致传输的距离不同。</p>\n<p><strong>NFC:</strong><br>　NFC是近距离无线通讯技术，芯片具有相互通信能力，并有计算能力。NFC可以看作是RFID的子集，用的是RFID的高频（13.56MHz）的标准，但却是双向过程。</p>\n<p><strong>结论</strong>：</p>\n<blockquote>\n<p>NFC ∈ RFID</p>\n</blockquote>\n<p><strong>安全性对比：</strong></p>\n<blockquote>\n<p>在一些设计现金支付、信用卡的应用中，RFID的通信距离情况下，其他设备也可以收到个人RFID信息，存在不安全因素；而NFC工作有效距离约10cm，所以具有很高的安全性</p>\n</blockquote>","more":"<p><strong>一图胜千言：</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/RFID_NFC.jpg\" alt=\"RFID与NFC对比\"></p>\n<p></br></p>\n<p><strong>破解分析：</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/mifare%20classic%E8%8A%AF%E7%89%87%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"mifare芯片结构图\"><br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/%E6%89%87%E5%8C%BA%E5%9D%97.png\" alt=\"mifare扇区块\"><br></ul></p>\n<p>可以看到M1卡的内部结构如上图所示<br>Mifare Classic card提供1k-4k的容量，我们经常见到的是Mifare Classic 1k(S50)，也就是所谓的M1卡。M1卡有从0到15共16个扇区，并且每个扇区都有独立的密码，每个扇区配备了从0到3共4个段，每个段可以保存16字节的内容。0扇区不建议更改是因为储存了制造商的机器检验信息。</p>\n<p>所以我们的目标就是剩下的15个储存金额数据的信息的扇区</p>\n<p><strong>破解方式:</strong><br>1.使用默认的密码攻击(弱密和初始密码永远都是第一位)<br>2.nested authentication(验证漏洞攻击，多用于已知某一扇区密码后碰撞出其他扇区的密码)<br>3.darkside攻击:(PM3神器啊)</p>\n<p><strong>实战:</strong></p>\n<p><strong>APK：Mifare Classic Tool</strong><br>支持设备：</p>\n<p>更多设备看这里:<br><a href=\"http://www.shopnfc.it/en/content/7-nfc-device-compatibility\">http://www.shopnfc.it/en/content/7-nfc-device-compatibility</a></p>\n<p>某Evilmass天真的抱着吾等学校的热水卡密码一定是12个f或者12个0的想法(●’◡’●)，购入了一台ACR122U    ￥125</p>\n<p></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br></p>\n<p>然后就出二手了    ￥100</p>\n<p>(╯°口°)╯︵┴─┴<br>鉴于原版PM3太贵，那还是买个好(山)看(寨)点的吧</p>\n<p>说到底还是穷<br>(╯°口°)╯︵┴─┴<br>就是这货:<br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/PM3.jpg\" alt=\"PM3Device\"></p>\n<p><strong>操作界面:</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/pm3Client.jpg\" alt=\"PM3Client\"></p>\n<p>命令行输入:<code>hf mf mifare</code>进行Darkside Attack拿到密码</p>\n<p><strong>用得到的密码继续输入：</strong><code>hf mf nested 1 0 A 1986527***   d</code></p>\n<p><strong>利用Nested碰撞出其他扇区密码</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/dump1.jpg\" alt=\"hf mf\"></p>\n<p>获取水卡dumpdata.bin: <code>hf mf dump 1</code><br><strong>Dump后拿到数据对白卡进行复制:</strong> <code>hf mf restore 1</code><br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/copy2.jpg\" alt=\"水卡复制\"></p>\n<p><img src=\"https://of4jd0bcc.qnssl.com/Rfid/copy1.jpg\" alt=\"白卡复制\"><br>成功~</p>\n<p>然而我们的最终目标是修改金额(手动斜眼←_←)<br>分析金额变动数据:<br><strong>软件:UltraCompare</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/compare.jpg\" alt=\"UltraCompare\"><br>第一次的金额是31.62<br>第二次的金额是31.52<br>第三次的金额是31.07<br>第四次的金额是29.77</p>\n<p><strong>整理如下:</strong></p>\n<blockquote>\n<p>5A0C 0000 A5F3 FFFF 5A0C 000011EE11EE<br>5A0C 0000 A5F3 FFFF 5A0C 000012ED12ED——————31.62 </p>\n<p>500C 0000 AFF3 FFFF 500C 000011EE11EE<br>500C 0000 AFF3 FFFF 500C 000012ED12ED——————31.52 </p>\n<p>230C 0000 DCF3 FFFF 230C 000011EE11EE<br>230C 0000 DCF3 FFFF 230C 000012ED12ED——————31.07  </p>\n<p>A10B 0000 5EF4 FFFF A10B 000011EE11EE<br>A10B 0000 5EF4 FFFF A10B 000012ED12ED——————29.77</p>\n</blockquote>\n<p>经测试:最后的11EE和12ED只是单纯的补正为FF而已<br>即</p>\n<p><em>————&gt;F</em><br><strong>所以决定金额的就是 5A0C 和 A5F3</strong><br>这里感谢黑手党群里的Feng大神给了个重要的信息：3162(10进制金额)转换为16进制正好是0C5A，上面需要倒序输入<br>那么后面的A5F3是否为校检位呢—-&gt;Bingo!</p>\n<p><em>————&gt;F</em><br>那么剩下就是修改金额数据了:<br>比如：</p>\n<blockquote>\n<p>520.13<br>————————&gt;16进制<br>————————&gt;CB2D<br>————————&gt;倒序2DCB<br>————————&gt;校检位D234</p>\n</blockquote>\n<p>执行数据块写入<br>17行:<br><code>hf mf wrbl 17 A 1986527*** 2DCB0000D234FFFF2DCB000011EE11EE</code><br>18行:<br><code>hf mf wrbl 18 A 1986527*** 2DCB0000D234FFFF2DCB000012ED12ED</code><br>DONE~<br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/52013.jpg\" alt=\"52013\"></p>\n<p>同理修改为655.25<br><img src=\"https://of4jd0bcc.qnssl.com/Rfid/65525.jpg\" alt=\"65525\"><br>至此，总算告一段落了~</p>\n<p>Q1：数学不好(比如我)，搞不定金额计算方式怎么办？<br>A1：复制什么的。或者找个数学好的宿友（Special Thanks To某贤同学）</p>\n<p>Q2：整个过程用了多久？<br>A2:一个星期，计算用了5天૮(༼༼Ծ◞◟Ծ༽༽)ა，所以大家一定要好好学数学</p>\n<p>Q3:能不能教我破解热水卡？能不能把这个卖给我？能不能。。。。。。<br>A3：不约!</p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>"},{"title":"SQLite简明教程","date":"2017-01-13T17:39:34.000Z","_content":"\n| Python type        | SQLite type |\n| :----------------- | :---------- |\n| None               | NULL        |\n| int                | INTEGER     |\n| long               | INTEGER     |\n| float              | REAL        |\n| str (UTF8-encoded) | TEXT        |\n| unicode            | TEXT        |\n| buffer             | BLOB        |\n<br>\n<!--more-->\n\n> 数据库操作无外乎\"**增改删查**\"\n\n## 增\n\n    import sqlite3\n    con = sqlite3.connect(':memory:')  # con = sqlite3.connect(\":memory:\") create a database in RAM\n    con.cursor()  # 游标, 类似指针, 执行数据处理操作\n    \n    con.execute('''CREATE TABLE Test (Company text NOT NULL, OrderNumber real NOT NULL)''')  # 创建一个数据表, PRIMARY KEY 为定义约束主键的关键字\n    \n    con.execute('INSERT INTO Test VALUES (?, ?)', ('Apple', 100))  # 插入一组数据\n    con.execute('INSERT INTO Test VALUES (?, ?)', ('Bot', 200))\n    con.execute('INSERT INTO Test VALUES (?, ?)', ('Apple', 300)) # 若有约束主键的情况下, 插入与主键相同的元素组, 相当于无效操作\n    \n    temp = [('Cherry', 600), ('DigitalOcean', 1000)]  # 该形式可以用executemany一次插入多组数据\n    con.executemany('INSERT INTO Test VALUES (?, ?)', temp) \n    \n    con.commit()  # 执行后数据表才会变更(提交)\n    \n**数据表图**\n\n| Company        | OrderNumber |\n|----------------|-------------|\n| 'Apple'        | 100         |\n| 'Bot'          | 200         |\n| 'Apple'        | 300         |\n| 'Cherry'       | 600         |\n| 'DigitalOcean' | 10000       |\n<br>\n\n## 改\n\n    con.execute('UPDATE Test SET OrderNumber=666 WHERE Company=\"Cherry\"')\n    \n    \n**修改后数据表图**\n\n| Company        | OrderNumber |\n|----------------|-------------|\n| 'Apple'        | 100         |\n| 'Bot'          | 200         |\n| 'Apple'        | 300         |\n| 'Cherry'       | 666         |\n| 'DigitalOcean' | 10000       |\n<br>\n\n\n## 删\n> SQLite 的 DISTINCT 关键字与 SELECT 语句一起使用，来消除所有重复的记录，并只获取唯一一次记录\n\n    con.execute('DELETE FROM Test WHERE Company=\"Apple\" AND OrderNumber=300')  # 除了AND还有OR关键字操作\n\n**修改后数据表图**\n\n| Company        | OrderNumber |\n|----------------|-------------|\n| 'Apple'        | 100         |\n| 'Bot'          | 200         |\n| 'Cherry'       | 666         |\n| 'DigitalOcean' | 10000       |\n<br>\n\n## 查\n\n> WHERE 用于指定从一个表或多个表中获取数据的条件\n  ORDER BY 基于一个或多个列按升序或降序顺序排列数据\n  SELECT 取数据, 或添加条件筛选数据\n\n\n    c = con.cursor()\n    c.execute('SELECT * FROM Test') # 获取表中所有数据\n    c.fetchall()\n    c.execute('SELECT Company, OrderNumber FROM Test ORDER BY Company ASC, OrderNumber DESC')  # 根据Company升序, OrderNumber降序\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]:  https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_alipay.gif?imageView2/1/w/200/h/200\n  [100]:  https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200","source":"_posts/SQLite简明教程.md","raw":"---\ntitle: SQLite简明教程\ndate: 2017-01-14 01:39:34\ntags: 爬虫\n---\n\n| Python type        | SQLite type |\n| :----------------- | :---------- |\n| None               | NULL        |\n| int                | INTEGER     |\n| long               | INTEGER     |\n| float              | REAL        |\n| str (UTF8-encoded) | TEXT        |\n| unicode            | TEXT        |\n| buffer             | BLOB        |\n<br>\n<!--more-->\n\n> 数据库操作无外乎\"**增改删查**\"\n\n## 增\n\n    import sqlite3\n    con = sqlite3.connect(':memory:')  # con = sqlite3.connect(\":memory:\") create a database in RAM\n    con.cursor()  # 游标, 类似指针, 执行数据处理操作\n    \n    con.execute('''CREATE TABLE Test (Company text NOT NULL, OrderNumber real NOT NULL)''')  # 创建一个数据表, PRIMARY KEY 为定义约束主键的关键字\n    \n    con.execute('INSERT INTO Test VALUES (?, ?)', ('Apple', 100))  # 插入一组数据\n    con.execute('INSERT INTO Test VALUES (?, ?)', ('Bot', 200))\n    con.execute('INSERT INTO Test VALUES (?, ?)', ('Apple', 300)) # 若有约束主键的情况下, 插入与主键相同的元素组, 相当于无效操作\n    \n    temp = [('Cherry', 600), ('DigitalOcean', 1000)]  # 该形式可以用executemany一次插入多组数据\n    con.executemany('INSERT INTO Test VALUES (?, ?)', temp) \n    \n    con.commit()  # 执行后数据表才会变更(提交)\n    \n**数据表图**\n\n| Company        | OrderNumber |\n|----------------|-------------|\n| 'Apple'        | 100         |\n| 'Bot'          | 200         |\n| 'Apple'        | 300         |\n| 'Cherry'       | 600         |\n| 'DigitalOcean' | 10000       |\n<br>\n\n## 改\n\n    con.execute('UPDATE Test SET OrderNumber=666 WHERE Company=\"Cherry\"')\n    \n    \n**修改后数据表图**\n\n| Company        | OrderNumber |\n|----------------|-------------|\n| 'Apple'        | 100         |\n| 'Bot'          | 200         |\n| 'Apple'        | 300         |\n| 'Cherry'       | 666         |\n| 'DigitalOcean' | 10000       |\n<br>\n\n\n## 删\n> SQLite 的 DISTINCT 关键字与 SELECT 语句一起使用，来消除所有重复的记录，并只获取唯一一次记录\n\n    con.execute('DELETE FROM Test WHERE Company=\"Apple\" AND OrderNumber=300')  # 除了AND还有OR关键字操作\n\n**修改后数据表图**\n\n| Company        | OrderNumber |\n|----------------|-------------|\n| 'Apple'        | 100         |\n| 'Bot'          | 200         |\n| 'Cherry'       | 666         |\n| 'DigitalOcean' | 10000       |\n<br>\n\n## 查\n\n> WHERE 用于指定从一个表或多个表中获取数据的条件\n  ORDER BY 基于一个或多个列按升序或降序顺序排列数据\n  SELECT 取数据, 或添加条件筛选数据\n\n\n    c = con.cursor()\n    c.execute('SELECT * FROM Test') # 获取表中所有数据\n    c.fetchall()\n    c.execute('SELECT Company, OrderNumber FROM Test ORDER BY Company ASC, OrderNumber DESC')  # 根据Company升序, OrderNumber降序\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]:  https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_alipay.gif?imageView2/1/w/200/h/200\n  [100]:  https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200","slug":"SQLite简明教程","published":1,"updated":"2017-01-18T10:13:08.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv5dxzx000apoogez0dn4xx","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Python type</th>\n<th style=\"text-align:left\">SQLite type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">None</td>\n<td style=\"text-align:left\">NULL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">INTEGER</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\">INTEGER</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">REAL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">str (UTF8-encoded)</td>\n<td style=\"text-align:left\">TEXT</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unicode</td>\n<td style=\"text-align:left\">TEXT</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">buffer</td>\n<td style=\"text-align:left\">BLOB</td>\n</tr>\n</tbody>\n</table>\n<p><br><br><a id=\"more\"></a></p>\n<blockquote>\n<p>数据库操作无外乎”<strong>增改删查</strong>“</p>\n</blockquote>\n<h2 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h2><pre><code>import sqlite3\ncon = sqlite3.connect(&apos;:memory:&apos;)  # con = sqlite3.connect(&quot;:memory:&quot;) create a database in RAM\ncon.cursor()  # 游标, 类似指针, 执行数据处理操作\n\ncon.execute(&apos;&apos;&apos;CREATE TABLE Test (Company text NOT NULL, OrderNumber real NOT NULL)&apos;&apos;&apos;)  # 创建一个数据表, PRIMARY KEY 为定义约束主键的关键字\n\ncon.execute(&apos;INSERT INTO Test VALUES (?, ?)&apos;, (&apos;Apple&apos;, 100))  # 插入一组数据\ncon.execute(&apos;INSERT INTO Test VALUES (?, ?)&apos;, (&apos;Bot&apos;, 200))\ncon.execute(&apos;INSERT INTO Test VALUES (?, ?)&apos;, (&apos;Apple&apos;, 300)) # 若有约束主键的情况下, 插入与主键相同的元素组, 相当于无效操作\n\ntemp = [(&apos;Cherry&apos;, 600), (&apos;DigitalOcean&apos;, 1000)]  # 该形式可以用executemany一次插入多组数据\ncon.executemany(&apos;INSERT INTO Test VALUES (?, ?)&apos;, temp) \n\ncon.commit()  # 执行后数据表才会变更(提交)\n</code></pre><p><strong>数据表图</strong></p>\n<table>\n<thead>\n<tr>\n<th>Company</th>\n<th>OrderNumber</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘Apple’</td>\n<td>100</td>\n</tr>\n<tr>\n<td>‘Bot’</td>\n<td>200</td>\n</tr>\n<tr>\n<td>‘Apple’</td>\n<td>300</td>\n</tr>\n<tr>\n<td>‘Cherry’</td>\n<td>600</td>\n</tr>\n<tr>\n<td>‘DigitalOcean’</td>\n<td>10000</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h2 id=\"改\"><a href=\"#改\" class=\"headerlink\" title=\"改\"></a>改</h2><pre><code>con.execute(&apos;UPDATE Test SET OrderNumber=666 WHERE Company=&quot;Cherry&quot;&apos;)\n</code></pre><p><strong>修改后数据表图</strong></p>\n<table>\n<thead>\n<tr>\n<th>Company</th>\n<th>OrderNumber</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘Apple’</td>\n<td>100</td>\n</tr>\n<tr>\n<td>‘Bot’</td>\n<td>200</td>\n</tr>\n<tr>\n<td>‘Apple’</td>\n<td>300</td>\n</tr>\n<tr>\n<td>‘Cherry’</td>\n<td>666</td>\n</tr>\n<tr>\n<td>‘DigitalOcean’</td>\n<td>10000</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h2 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h2><blockquote>\n<p>SQLite 的 DISTINCT 关键字与 SELECT 语句一起使用，来消除所有重复的记录，并只获取唯一一次记录</p>\n</blockquote>\n<pre><code>con.execute(&apos;DELETE FROM Test WHERE Company=&quot;Apple&quot; AND OrderNumber=300&apos;)  # 除了AND还有OR关键字操作\n</code></pre><p><strong>修改后数据表图</strong></p>\n<table>\n<thead>\n<tr>\n<th>Company</th>\n<th>OrderNumber</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘Apple’</td>\n<td>100</td>\n</tr>\n<tr>\n<td>‘Bot’</td>\n<td>200</td>\n</tr>\n<tr>\n<td>‘Cherry’</td>\n<td>666</td>\n</tr>\n<tr>\n<td>‘DigitalOcean’</td>\n<td>10000</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h2 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"查\"></a>查</h2><blockquote>\n<p>WHERE 用于指定从一个表或多个表中获取数据的条件<br>  ORDER BY 基于一个或多个列按升序或降序顺序排列数据<br>  SELECT 取数据, 或添加条件筛选数据</p>\n</blockquote>\n<pre><code>c = con.cursor()\nc.execute(&apos;SELECT * FROM Test&apos;) # 获取表中所有数据\nc.fetchall()\nc.execute(&apos;SELECT Company, OrderNumber FROM Test ORDER BY Company ASC, OrderNumber DESC&apos;)  # 根据Company升序, OrderNumber降序\n</code></pre><p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>\n","excerpt":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Python type</th>\n<th style=\"text-align:left\">SQLite type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">None</td>\n<td style=\"text-align:left\">NULL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">INTEGER</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\">INTEGER</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">REAL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">str (UTF8-encoded)</td>\n<td style=\"text-align:left\">TEXT</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unicode</td>\n<td style=\"text-align:left\">TEXT</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">buffer</td>\n<td style=\"text-align:left\">BLOB</td>\n</tr>\n</tbody>\n</table>\n<p><br><br>","more":"</p>\n<blockquote>\n<p>数据库操作无外乎”<strong>增改删查</strong>“</p>\n</blockquote>\n<h2 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h2><pre><code>import sqlite3\ncon = sqlite3.connect(&apos;:memory:&apos;)  # con = sqlite3.connect(&quot;:memory:&quot;) create a database in RAM\ncon.cursor()  # 游标, 类似指针, 执行数据处理操作\n\ncon.execute(&apos;&apos;&apos;CREATE TABLE Test (Company text NOT NULL, OrderNumber real NOT NULL)&apos;&apos;&apos;)  # 创建一个数据表, PRIMARY KEY 为定义约束主键的关键字\n\ncon.execute(&apos;INSERT INTO Test VALUES (?, ?)&apos;, (&apos;Apple&apos;, 100))  # 插入一组数据\ncon.execute(&apos;INSERT INTO Test VALUES (?, ?)&apos;, (&apos;Bot&apos;, 200))\ncon.execute(&apos;INSERT INTO Test VALUES (?, ?)&apos;, (&apos;Apple&apos;, 300)) # 若有约束主键的情况下, 插入与主键相同的元素组, 相当于无效操作\n\ntemp = [(&apos;Cherry&apos;, 600), (&apos;DigitalOcean&apos;, 1000)]  # 该形式可以用executemany一次插入多组数据\ncon.executemany(&apos;INSERT INTO Test VALUES (?, ?)&apos;, temp) \n\ncon.commit()  # 执行后数据表才会变更(提交)\n</code></pre><p><strong>数据表图</strong></p>\n<table>\n<thead>\n<tr>\n<th>Company</th>\n<th>OrderNumber</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘Apple’</td>\n<td>100</td>\n</tr>\n<tr>\n<td>‘Bot’</td>\n<td>200</td>\n</tr>\n<tr>\n<td>‘Apple’</td>\n<td>300</td>\n</tr>\n<tr>\n<td>‘Cherry’</td>\n<td>600</td>\n</tr>\n<tr>\n<td>‘DigitalOcean’</td>\n<td>10000</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h2 id=\"改\"><a href=\"#改\" class=\"headerlink\" title=\"改\"></a>改</h2><pre><code>con.execute(&apos;UPDATE Test SET OrderNumber=666 WHERE Company=&quot;Cherry&quot;&apos;)\n</code></pre><p><strong>修改后数据表图</strong></p>\n<table>\n<thead>\n<tr>\n<th>Company</th>\n<th>OrderNumber</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘Apple’</td>\n<td>100</td>\n</tr>\n<tr>\n<td>‘Bot’</td>\n<td>200</td>\n</tr>\n<tr>\n<td>‘Apple’</td>\n<td>300</td>\n</tr>\n<tr>\n<td>‘Cherry’</td>\n<td>666</td>\n</tr>\n<tr>\n<td>‘DigitalOcean’</td>\n<td>10000</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h2 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h2><blockquote>\n<p>SQLite 的 DISTINCT 关键字与 SELECT 语句一起使用，来消除所有重复的记录，并只获取唯一一次记录</p>\n</blockquote>\n<pre><code>con.execute(&apos;DELETE FROM Test WHERE Company=&quot;Apple&quot; AND OrderNumber=300&apos;)  # 除了AND还有OR关键字操作\n</code></pre><p><strong>修改后数据表图</strong></p>\n<table>\n<thead>\n<tr>\n<th>Company</th>\n<th>OrderNumber</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘Apple’</td>\n<td>100</td>\n</tr>\n<tr>\n<td>‘Bot’</td>\n<td>200</td>\n</tr>\n<tr>\n<td>‘Cherry’</td>\n<td>666</td>\n</tr>\n<tr>\n<td>‘DigitalOcean’</td>\n<td>10000</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h2 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"查\"></a>查</h2><blockquote>\n<p>WHERE 用于指定从一个表或多个表中获取数据的条件<br>  ORDER BY 基于一个或多个列按升序或降序顺序排列数据<br>  SELECT 取数据, 或添加条件筛选数据</p>\n</blockquote>\n<pre><code>c = con.cursor()\nc.execute(&apos;SELECT * FROM Test&apos;) # 获取表中所有数据\nc.fetchall()\nc.execute(&apos;SELECT Company, OrderNumber FROM Test ORDER BY Company ASC, OrderNumber DESC&apos;)  # 根据Company升序, OrderNumber降序\n</code></pre><p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E9%85%9A%E9%85%9E%E7%93%9C%E6%95%B2%E7%A2%97_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>"},{"title":"WordPress博客添加返回顶部按钮","date":"2017-01-24T15:22:58.000Z","_content":"\n当Wordpress文章较长或者评论较多导致页面较长时，如果要从下端位置返回顶端，使用鼠标滚轮是非常不方便的，这时就需要添加一个返回顶部按钮\n\n<!--more-->\n\n进入WordPress 控制面板-“外观”-“编辑”，找到footer.php，在之前添加以下代码:\n\n    <div id=”full” style=”width:50px; height:95px;position:fixed; left:50%; top:490px; margin-left:540px; z-index:100; text-align:center; cursor:pointer;”> <a><img src=”这里换成你图片的绝对地址” border=0 alt=”返回顶部“></a> </div><script type=”text/javascript”>var isie6 = window.XMLHttpRequest ? false : true; function newtoponload() { var c = document.getElementById(“full”); function b() { var a = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop; if (a > 0) { if (isie6) { c.style.display = “none”; clearTimeout(window.show); window.show = setTimeout(function () { var d = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop; if (d > 0) { c.style.display = “block”; c.style.top = (400 + d) + “px” } }, 300) } else { c.style.display = “block” } } else { c.style.display = “none” } } if (isie6) { c.style.position = “absolute” } window.onscroll = b; b() } if (window.attachEvent) { window.attachEvent(“onload”, newtoponload) } else { window.addEventListener(“load”, newtoponload, false) } document.getElementById(“full”).onclick = function () { window.scrollTo(0, 0) };</script>\n\n<br>\n\n推荐一个:\n![0][0]\n\n如果发现返回按钮的样式跟自己的博客不太协调，可以尝试修改步骤一中代码的style的值以自定义按钮位置\n<br><br>\n[0]: https://of4jd0bcc.qnssl.com/Blog/gotop.jpg\n\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]:  https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/shakalaka_ailipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200","source":"_posts/WordPress博客添加返回顶部按钮.md","raw":"---\ntitle: WordPress博客添加返回顶部按钮\ndate: 2017-01-24 23:22:58\ntags: 杂\n---\n\n当Wordpress文章较长或者评论较多导致页面较长时，如果要从下端位置返回顶端，使用鼠标滚轮是非常不方便的，这时就需要添加一个返回顶部按钮\n\n<!--more-->\n\n进入WordPress 控制面板-“外观”-“编辑”，找到footer.php，在之前添加以下代码:\n\n    <div id=”full” style=”width:50px; height:95px;position:fixed; left:50%; top:490px; margin-left:540px; z-index:100; text-align:center; cursor:pointer;”> <a><img src=”这里换成你图片的绝对地址” border=0 alt=”返回顶部“></a> </div><script type=”text/javascript”>var isie6 = window.XMLHttpRequest ? false : true; function newtoponload() { var c = document.getElementById(“full”); function b() { var a = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop; if (a > 0) { if (isie6) { c.style.display = “none”; clearTimeout(window.show); window.show = setTimeout(function () { var d = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop; if (d > 0) { c.style.display = “block”; c.style.top = (400 + d) + “px” } }, 300) } else { c.style.display = “block” } } else { c.style.display = “none” } } if (isie6) { c.style.position = “absolute” } window.onscroll = b; b() } if (window.attachEvent) { window.attachEvent(“onload”, newtoponload) } else { window.addEventListener(“load”, newtoponload, false) } document.getElementById(“full”).onclick = function () { window.scrollTo(0, 0) };</script>\n\n<br>\n\n推荐一个:\n![0][0]\n\n如果发现返回按钮的样式跟自己的博客不太协调，可以尝试修改步骤一中代码的style的值以自定义按钮位置\n<br><br>\n[0]: https://of4jd0bcc.qnssl.com/Blog/gotop.jpg\n\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]:  https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/shakalaka_ailipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200","slug":"WordPress博客添加返回顶部按钮","published":1,"updated":"2017-01-24T15:30:28.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv5dy00000dpoog0gwj3gkq","content":"<p>当Wordpress文章较长或者评论较多导致页面较长时，如果要从下端位置返回顶端，使用鼠标滚轮是非常不方便的，这时就需要添加一个返回顶部按钮</p>\n<a id=\"more\"></a>\n<p>进入WordPress 控制面板-“外观”-“编辑”，找到footer.php，在之前添加以下代码:</p>\n<pre><code>&lt;div id=”full” style=”width:50px; height:95px;position:fixed; left:50%; top:490px; margin-left:540px; z-index:100; text-align:center; cursor:pointer;”&gt; &lt;a&gt;&lt;img src=”这里换成你图片的绝对地址” border=0 alt=”返回顶部“&gt;&lt;/a&gt; &lt;/div&gt;&lt;script type=”text/javascript”&gt;var isie6 = window.XMLHttpRequest ? false : true; function newtoponload() { var c = document.getElementById(“full”); function b() { var a = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop; if (a &gt; 0) { if (isie6) { c.style.display = “none”; clearTimeout(window.show); window.show = setTimeout(function () { var d = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop; if (d &gt; 0) { c.style.display = “block”; c.style.top = (400 + d) + “px” } }, 300) } else { c.style.display = “block” } } else { c.style.display = “none” } } if (isie6) { c.style.position = “absolute” } window.onscroll = b; b() } if (window.attachEvent) { window.attachEvent(“onload”, newtoponload) } else { window.addEventListener(“load”, newtoponload, false) } document.getElementById(“full”).onclick = function () { window.scrollTo(0, 0) };&lt;/script&gt;\n</code></pre><p><br></p>\n<p>推荐一个:<br><img src=\"https://of4jd0bcc.qnssl.com/Blog/gotop.jpg\" alt=\"0\"></p>\n<p>如果发现返回按钮的样式跟自己的博客不太协调，可以尝试修改步骤一中代码的style的值以自定义按钮位置<br><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/shakalaka_ailipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>\n","excerpt":"<p>当Wordpress文章较长或者评论较多导致页面较长时，如果要从下端位置返回顶端，使用鼠标滚轮是非常不方便的，这时就需要添加一个返回顶部按钮</p>","more":"<p>进入WordPress 控制面板-“外观”-“编辑”，找到footer.php，在之前添加以下代码:</p>\n<pre><code>&lt;div id=”full” style=”width:50px; height:95px;position:fixed; left:50%; top:490px; margin-left:540px; z-index:100; text-align:center; cursor:pointer;”&gt; &lt;a&gt;&lt;img src=”这里换成你图片的绝对地址” border=0 alt=”返回顶部“&gt;&lt;/a&gt; &lt;/div&gt;&lt;script type=”text/javascript”&gt;var isie6 = window.XMLHttpRequest ? false : true; function newtoponload() { var c = document.getElementById(“full”); function b() { var a = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop; if (a &gt; 0) { if (isie6) { c.style.display = “none”; clearTimeout(window.show); window.show = setTimeout(function () { var d = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop; if (d &gt; 0) { c.style.display = “block”; c.style.top = (400 + d) + “px” } }, 300) } else { c.style.display = “block” } } else { c.style.display = “none” } } if (isie6) { c.style.position = “absolute” } window.onscroll = b; b() } if (window.attachEvent) { window.attachEvent(“onload”, newtoponload) } else { window.addEventListener(“load”, newtoponload, false) } document.getElementById(“full”).onclick = function () { window.scrollTo(0, 0) };&lt;/script&gt;\n</code></pre><p><br></p>\n<p>推荐一个:<br><img src=\"https://of4jd0bcc.qnssl.com/Blog/gotop.jpg\" alt=\"0\"></p>\n<p>如果发现返回按钮的样式跟自己的博客不太协调，可以尝试修改步骤一中代码的style的值以自定义按钮位置<br><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/shakalaka_ailipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>"},{"title":"从Wordpress迁移到Hexo","date":"2017-02-05T16:34:48.000Z","_content":"\n### 前言\n之前有一个cc域名是Wordpress的，而me域名则是GithubPage + Hexo，可惜me域名过期没钱续费了，两边更新文章也挺麻烦，遂切换到VPS + Hexo + Webhooks\n\n<!--more-->\n\n一时手贱注册N多一年免费域名，前排出（赠）售（送）以下域名，还有个Namecheap的SSL证书\n> [evil0mass.tk][1]\n  [evil0mass.me][2]\n  [evilmass.xyz----这个拿来做MHP Tunnel的服务器了][3]\n  [evilmass.tk][5]\n  [evilmass.ml][6]\n  [evilmass.cn----这个没有实名认证白送了一块钱给腾讯][7]\n  \n<br>\n\n### Getting Start\nVPS：Bandwagonhost China-Direct\nSystem Version： Centos 7 x86_64（之前Centos的脚本开机启动怎么都设置不好，残念～～\n关键字：**systemctl enable**\n<br>\n#### Shadowsocks\n    yum update -y\n    yum install python-setuptools m2crypto libtool gcc && easy_install pip\n    pip install shadowsocks\n\n<br>\n##### libsodium依赖\n    curl -O -L https://download.libsodium.org/libsodium/releases/LATEST.tar.gz\n    tar zxf LATEST.tar.gz\n    cd libsodium*\n    ./configure\n    make && make install\n    # 修复关联\n    echo /usr/local/lib > /etc/ld.so.conf.d/usr_local_lib.conf\n    ldconfig\n    rm -rfv ../LATEST.tar.gz ../libsodium* && cd ~\n    \n<br>\n##### 多端口配置\n    {\n        \"server\":\"0.0.0.0\",\n        \"local_address\":\"127.0.0.1\",\n        \"local_port\":1080,\n        \"port_password\":{\n            \"9000\":\"password0\",\n            \"9001\":\"password1\",\n            \"9002\":\"password2\",\n            \"9003\":\"password3\"\n        },\n        \"timeout\":600,\n        \"method\":\"chacha20\",\n        \"fast_open\": true\n    }\n<br>\n###### 配置自启动\n新建启动脚本文件/etc/systemd/system/shadowsocks.service，内容如下：\n\n    [Unit]\n    Description=Shadowsocks\n\n    [Service]\n    TimeoutStartSec=0\n    ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json\n    \n    [Install]\n    WantedBy=multi-user.target\n    \n<br>\n##### 启动 shadowsocks\n\n    systemctl enable shadowsocks  #开机启动\n    systemctl start shadowsocks  #开启服务\n\n为了检查 shadowsocks服务是否已成功启动，可以执行以下命令查看服务的状态：\n\n    systemctl status shadowsocks -l\n    \n <br>   \n##### Shadowsocks优化\n**Openvz用户可以不用看这部分的优化**\n\n[shadowsocks参数优化][8]\n    \n**KVM架构的VPS建议安装** [Google_BBR][9] \n目前看来是BBR比锐速强势\n\n> [Kcptun--Openvz的救星][10]\n  [FinalSpeed--同上][11]\n\n\n<br>\n#### [Git][13]\n建议手动编译安装较新版本的Git，以便配置ngrok\n<br>\n#### [SSH-Keygen][14]\n<br>\n#### [Nginx][15]\n \n    yum install nginx\n    systemctl start nginx\n    systemctl enable nginx\n    \n**喜欢手动编译安装Nginx是病，得治（雾**\n\n手动编译安装参考\n> Zlib：http://zlib.net/\n  pcre：https://ftp.pcre.org/pub/pcre/\n  Open-SSL：https://www.openssl.org/source/\n \n<br>\n#### [NodeJS][16]\n##### 二进制包安装\n    cd /home\n    wget https://nodejs.org/dist/v7.5.0/node-v7.5.0-linux-x64.tar.xz\n    tar -xf node-v7.5.0-linux-x64.tar.xz\n    ./node-v7.5.0-linux-x64/bin/node -v\n输出`v7.5.0`即可\n###### 软连接\n    ln -s /home/node-v7.5.0-linux-x64/bin/node /usr/local/bin/node\n    ln -s /home/node-v7.5.0-linux-x64/bin/npm /usr/local/bin/npm\n    \n<br>\n###### 添加到PATH\n    vim /etc/profile\n    \n    #添加到最后\n    PATH=$PATH:/home/node-v7.5.0-linux-x64/bin\n    \n    #即刻生效\n    source /etc/profile \n\n<br>\n##### 源码编译安装（你这样是要被电的。。。\n\n    yum install gcc-c++ screen  #在耗时较多的任务又怕shell断开连接，可以开启screen\n    wget https://nodejs.org/dist/v7.5.0/node-v7.5.0.tar.gz\n    tar -zxvf node-v7.5.0.tar.gz\n    cd node-v7.5.0\n    ./configure\n    make && make install  #我试过用树莓派编译，6个多小时\n    \n<br>\n#### [Hexo][17]\n\n    npm install hexo-cli -g\n    hexo init blog\n    cd blog\n    npm install\n    npm install hexo-deployer-git --save\n\n##### [Next主题][18]\n\n<br>\n#### 让hexo在后台运行\n这里提供两种方式： `forever` `supervisord`\n##### **推荐forever**\n\n    npm install forever -g\n    vim hexo_run.js\n    \n<br>    \n###### 脚本内容\n    var spawn = require('child_process').spawn;\n    free = spawn('hexo', ['server']);\n    \n    free.stdout.on('data', function (data) {\n            console.log('standard output:\\n' + data);\n    });\n    \n    free.stderr.on('data', function (data) {\n            console.log('standard error output:\\n' + data);\n    });\n    \n    free.on('exit', function (code, signal) {\n            console.log('child process exit, exit: ' + code);\n    });\n    \n<br>    \n###### 常用命令\n    forever list                 # 查看forever已经运行的应用\n    forever start hexo_run.js    # 启动hexo\n    forever stop hexo_run.js     # 停止hexo\n\n<br>\n##### **supervisor**\n使用 hexo server 启动的 Hexo 服务是非 Daemon 模式的。\n创建 Supervisor 配置文件： `vi /etc/supervisor/conf.d/blog.conf`\n\n    [program:blog]\n    command=/your_path_to/hexo/node_modules/hexo server\n    directory=/your_path_to/hexo/\n    autostart=true\n    autorestart=true\n    startsecs=5\n    stopsignal=HUP\n    stopasgroup=true\n    stopwaitsecs=5\n    stdout_logfile_maxbytes=20MB\n    stdout_logfile=/var/log/supervisor/%(program_name)s.log\n    stderr_logfile_maxbytes=20MB\n    stderr_logfile=/var/log/supervisor/%(program_name)s.log\n启动 Supervisor 守护进程\n\n    supervisord\n 如果出现以下错误，输入`sudo unlink /tmp/supervisor.sock`。然后启动supervisor服务。\n > Error: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord\n \n查看 blog 程序（即 Hexo 服务）的状态：\n\n    supervisorctl status\n> blog                             RUNNING    pid 28974, uptime 0:00:32\n\n可以看出，blog 程序已经处于运行状态，监听端口为 hexo server 命令的默认端口 4000。在浏览器中访问 http://VPS-IP:4000 可以看到博客的运行效果。\n\n<br>\n#### [Let's Encrypt][19]\n##### 证书自动续期\n    vim /home/ssl_renew.sh\n    \n    #!/bin/bash\n    /home/letsencrypt/certbot-auto renew\n    \n    #添加到crontab每月运行一次\n    crontab -e\n    \n    * * 1 * * sh /home/ssl_renew.sh\n<br>\n##### 配置 Nginx 代理\n作为一个对外公开的网站，使用 4000 端口显然是不合适的。可以直接改成 80 端口，但是这样直接把 Hexo 服务暴露给用户，并不恰当。更好的办法是使用 Nginx 做代理。\n    \n    vim /etc/nginx/nginx.conf\n\n    server {\n    location / {\n        proxy_pass http://localhost:4000;\n    }\n    access_log  /var/log/nginx/blog.access.log;\n    error_log /var/log/nginx/blog.error.log;\n    }\n\n重启 Nginx：\n    service nginx restart\n<br>\n#### Webhooks\n**请勿在vps上面执行git push或者hexo d之类的操作，容易产生conflict，设置好wenhooks之后更新文章都在本地进行**\n\n##### github上面webhooks地址填： http://your-vps-ip:8888/ 以及下面config.json用到的your secret\n    cd hexo安装路径\n    git clone 你的github-page仓库\n    mv 仓库/.git . && rm -rfv 仓库  #实际上我们就只要仓库那个.git而已\n\n##### auto-publish-hexo\n    cd hexo安装路径\n    git clone https://github.com/zhipengyan/auto-publish-hexo\n    cd auto-publish-hexo\n    npm install\n\n##### 打开目录下的config.json进行修改\n\n    {\n        \"time_zone\": \"Asia/Shanghai\", //所在时区，在log中显示时间了，vps一般不是本地时区\n        \"webhook_secret\": \"your secret\", //github webhooks设置的secret\n        \"path\": { //如果hexo的配置为默认的话不用修改下面的\n        \"hexo_path\": \"../\", //hexo目录相对路径\n        \"hexo_source_path\": \"../source\" //hexo source目录的相对路径，也就是文章目录\n        },\n        \"listen_port\": 8888 //监听的端口\n    }\n##### 开启screen使用`npm start`或者`node index.js`运行\n<br>\n####  [**在Centos配置ngrok**][20]\n<br>\n#### [**服务器监控 UptimeRobot 简明使用手册**][12]\n\n<br>\n\n  [1]: http://evil0mass.tk\n  [2]: http://evil0mass.me\n  [3]: http://evilmass.xyz\n  [4]: http://evilmass.cc\n  [5]: http://evilmass.tk\n  [6]: http://evilmass.ml\n  [7]: http://evilmass.cn\n  [8]: https://github.com/iMeiji/shadowsocks_install/wiki/shadowsocks-optimize\n  [9]: https://github.com/iMeiji/shadowsocks_install/wiki/%E5%BC%80%E5%90%AFTCP-BBR%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95\n  [10]: https://blog.kuoruan.com/110.html\n  [11]: https://www.91yun.org/archives/2775\n  [12]: https://liyuans.com/archives/uptimerobot.html/\n  [13]:  https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\n  [14]: https://help.github.com/articles/connecting-to-github-with-ssh/\n  [15]: http://nginx.org/en/docs/install.html\n  [16]: https://nodejs.org/en/download/current/\n  [17]: https://hexo.io/\n  [18]: http://theme-next.iissnan.com/getting-started.html\n  [19]: https://ksmx.me/letsencrypt-ssl-https/\n  [20]: https://evilmass.cc/2017/01/25/%E5%9C%A8CentOS%E4%B8%8B%E9%85%8D%E7%BD%AEngrok/","source":"_posts/从Wordpress迁移到Hexo.md","raw":"---\ntitle: 从Wordpress迁移到Hexo\ndate: 2017-02-06 00:34:48\ntags: Linux\n---\n\n### 前言\n之前有一个cc域名是Wordpress的，而me域名则是GithubPage + Hexo，可惜me域名过期没钱续费了，两边更新文章也挺麻烦，遂切换到VPS + Hexo + Webhooks\n\n<!--more-->\n\n一时手贱注册N多一年免费域名，前排出（赠）售（送）以下域名，还有个Namecheap的SSL证书\n> [evil0mass.tk][1]\n  [evil0mass.me][2]\n  [evilmass.xyz----这个拿来做MHP Tunnel的服务器了][3]\n  [evilmass.tk][5]\n  [evilmass.ml][6]\n  [evilmass.cn----这个没有实名认证白送了一块钱给腾讯][7]\n  \n<br>\n\n### Getting Start\nVPS：Bandwagonhost China-Direct\nSystem Version： Centos 7 x86_64（之前Centos的脚本开机启动怎么都设置不好，残念～～\n关键字：**systemctl enable**\n<br>\n#### Shadowsocks\n    yum update -y\n    yum install python-setuptools m2crypto libtool gcc && easy_install pip\n    pip install shadowsocks\n\n<br>\n##### libsodium依赖\n    curl -O -L https://download.libsodium.org/libsodium/releases/LATEST.tar.gz\n    tar zxf LATEST.tar.gz\n    cd libsodium*\n    ./configure\n    make && make install\n    # 修复关联\n    echo /usr/local/lib > /etc/ld.so.conf.d/usr_local_lib.conf\n    ldconfig\n    rm -rfv ../LATEST.tar.gz ../libsodium* && cd ~\n    \n<br>\n##### 多端口配置\n    {\n        \"server\":\"0.0.0.0\",\n        \"local_address\":\"127.0.0.1\",\n        \"local_port\":1080,\n        \"port_password\":{\n            \"9000\":\"password0\",\n            \"9001\":\"password1\",\n            \"9002\":\"password2\",\n            \"9003\":\"password3\"\n        },\n        \"timeout\":600,\n        \"method\":\"chacha20\",\n        \"fast_open\": true\n    }\n<br>\n###### 配置自启动\n新建启动脚本文件/etc/systemd/system/shadowsocks.service，内容如下：\n\n    [Unit]\n    Description=Shadowsocks\n\n    [Service]\n    TimeoutStartSec=0\n    ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json\n    \n    [Install]\n    WantedBy=multi-user.target\n    \n<br>\n##### 启动 shadowsocks\n\n    systemctl enable shadowsocks  #开机启动\n    systemctl start shadowsocks  #开启服务\n\n为了检查 shadowsocks服务是否已成功启动，可以执行以下命令查看服务的状态：\n\n    systemctl status shadowsocks -l\n    \n <br>   \n##### Shadowsocks优化\n**Openvz用户可以不用看这部分的优化**\n\n[shadowsocks参数优化][8]\n    \n**KVM架构的VPS建议安装** [Google_BBR][9] \n目前看来是BBR比锐速强势\n\n> [Kcptun--Openvz的救星][10]\n  [FinalSpeed--同上][11]\n\n\n<br>\n#### [Git][13]\n建议手动编译安装较新版本的Git，以便配置ngrok\n<br>\n#### [SSH-Keygen][14]\n<br>\n#### [Nginx][15]\n \n    yum install nginx\n    systemctl start nginx\n    systemctl enable nginx\n    \n**喜欢手动编译安装Nginx是病，得治（雾**\n\n手动编译安装参考\n> Zlib：http://zlib.net/\n  pcre：https://ftp.pcre.org/pub/pcre/\n  Open-SSL：https://www.openssl.org/source/\n \n<br>\n#### [NodeJS][16]\n##### 二进制包安装\n    cd /home\n    wget https://nodejs.org/dist/v7.5.0/node-v7.5.0-linux-x64.tar.xz\n    tar -xf node-v7.5.0-linux-x64.tar.xz\n    ./node-v7.5.0-linux-x64/bin/node -v\n输出`v7.5.0`即可\n###### 软连接\n    ln -s /home/node-v7.5.0-linux-x64/bin/node /usr/local/bin/node\n    ln -s /home/node-v7.5.0-linux-x64/bin/npm /usr/local/bin/npm\n    \n<br>\n###### 添加到PATH\n    vim /etc/profile\n    \n    #添加到最后\n    PATH=$PATH:/home/node-v7.5.0-linux-x64/bin\n    \n    #即刻生效\n    source /etc/profile \n\n<br>\n##### 源码编译安装（你这样是要被电的。。。\n\n    yum install gcc-c++ screen  #在耗时较多的任务又怕shell断开连接，可以开启screen\n    wget https://nodejs.org/dist/v7.5.0/node-v7.5.0.tar.gz\n    tar -zxvf node-v7.5.0.tar.gz\n    cd node-v7.5.0\n    ./configure\n    make && make install  #我试过用树莓派编译，6个多小时\n    \n<br>\n#### [Hexo][17]\n\n    npm install hexo-cli -g\n    hexo init blog\n    cd blog\n    npm install\n    npm install hexo-deployer-git --save\n\n##### [Next主题][18]\n\n<br>\n#### 让hexo在后台运行\n这里提供两种方式： `forever` `supervisord`\n##### **推荐forever**\n\n    npm install forever -g\n    vim hexo_run.js\n    \n<br>    \n###### 脚本内容\n    var spawn = require('child_process').spawn;\n    free = spawn('hexo', ['server']);\n    \n    free.stdout.on('data', function (data) {\n            console.log('standard output:\\n' + data);\n    });\n    \n    free.stderr.on('data', function (data) {\n            console.log('standard error output:\\n' + data);\n    });\n    \n    free.on('exit', function (code, signal) {\n            console.log('child process exit, exit: ' + code);\n    });\n    \n<br>    \n###### 常用命令\n    forever list                 # 查看forever已经运行的应用\n    forever start hexo_run.js    # 启动hexo\n    forever stop hexo_run.js     # 停止hexo\n\n<br>\n##### **supervisor**\n使用 hexo server 启动的 Hexo 服务是非 Daemon 模式的。\n创建 Supervisor 配置文件： `vi /etc/supervisor/conf.d/blog.conf`\n\n    [program:blog]\n    command=/your_path_to/hexo/node_modules/hexo server\n    directory=/your_path_to/hexo/\n    autostart=true\n    autorestart=true\n    startsecs=5\n    stopsignal=HUP\n    stopasgroup=true\n    stopwaitsecs=5\n    stdout_logfile_maxbytes=20MB\n    stdout_logfile=/var/log/supervisor/%(program_name)s.log\n    stderr_logfile_maxbytes=20MB\n    stderr_logfile=/var/log/supervisor/%(program_name)s.log\n启动 Supervisor 守护进程\n\n    supervisord\n 如果出现以下错误，输入`sudo unlink /tmp/supervisor.sock`。然后启动supervisor服务。\n > Error: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord\n \n查看 blog 程序（即 Hexo 服务）的状态：\n\n    supervisorctl status\n> blog                             RUNNING    pid 28974, uptime 0:00:32\n\n可以看出，blog 程序已经处于运行状态，监听端口为 hexo server 命令的默认端口 4000。在浏览器中访问 http://VPS-IP:4000 可以看到博客的运行效果。\n\n<br>\n#### [Let's Encrypt][19]\n##### 证书自动续期\n    vim /home/ssl_renew.sh\n    \n    #!/bin/bash\n    /home/letsencrypt/certbot-auto renew\n    \n    #添加到crontab每月运行一次\n    crontab -e\n    \n    * * 1 * * sh /home/ssl_renew.sh\n<br>\n##### 配置 Nginx 代理\n作为一个对外公开的网站，使用 4000 端口显然是不合适的。可以直接改成 80 端口，但是这样直接把 Hexo 服务暴露给用户，并不恰当。更好的办法是使用 Nginx 做代理。\n    \n    vim /etc/nginx/nginx.conf\n\n    server {\n    location / {\n        proxy_pass http://localhost:4000;\n    }\n    access_log  /var/log/nginx/blog.access.log;\n    error_log /var/log/nginx/blog.error.log;\n    }\n\n重启 Nginx：\n    service nginx restart\n<br>\n#### Webhooks\n**请勿在vps上面执行git push或者hexo d之类的操作，容易产生conflict，设置好wenhooks之后更新文章都在本地进行**\n\n##### github上面webhooks地址填： http://your-vps-ip:8888/ 以及下面config.json用到的your secret\n    cd hexo安装路径\n    git clone 你的github-page仓库\n    mv 仓库/.git . && rm -rfv 仓库  #实际上我们就只要仓库那个.git而已\n\n##### auto-publish-hexo\n    cd hexo安装路径\n    git clone https://github.com/zhipengyan/auto-publish-hexo\n    cd auto-publish-hexo\n    npm install\n\n##### 打开目录下的config.json进行修改\n\n    {\n        \"time_zone\": \"Asia/Shanghai\", //所在时区，在log中显示时间了，vps一般不是本地时区\n        \"webhook_secret\": \"your secret\", //github webhooks设置的secret\n        \"path\": { //如果hexo的配置为默认的话不用修改下面的\n        \"hexo_path\": \"../\", //hexo目录相对路径\n        \"hexo_source_path\": \"../source\" //hexo source目录的相对路径，也就是文章目录\n        },\n        \"listen_port\": 8888 //监听的端口\n    }\n##### 开启screen使用`npm start`或者`node index.js`运行\n<br>\n####  [**在Centos配置ngrok**][20]\n<br>\n#### [**服务器监控 UptimeRobot 简明使用手册**][12]\n\n<br>\n\n  [1]: http://evil0mass.tk\n  [2]: http://evil0mass.me\n  [3]: http://evilmass.xyz\n  [4]: http://evilmass.cc\n  [5]: http://evilmass.tk\n  [6]: http://evilmass.ml\n  [7]: http://evilmass.cn\n  [8]: https://github.com/iMeiji/shadowsocks_install/wiki/shadowsocks-optimize\n  [9]: https://github.com/iMeiji/shadowsocks_install/wiki/%E5%BC%80%E5%90%AFTCP-BBR%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95\n  [10]: https://blog.kuoruan.com/110.html\n  [11]: https://www.91yun.org/archives/2775\n  [12]: https://liyuans.com/archives/uptimerobot.html/\n  [13]:  https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\n  [14]: https://help.github.com/articles/connecting-to-github-with-ssh/\n  [15]: http://nginx.org/en/docs/install.html\n  [16]: https://nodejs.org/en/download/current/\n  [17]: https://hexo.io/\n  [18]: http://theme-next.iissnan.com/getting-started.html\n  [19]: https://ksmx.me/letsencrypt-ssl-https/\n  [20]: https://evilmass.cc/2017/01/25/%E5%9C%A8CentOS%E4%B8%8B%E9%85%8D%E7%BD%AEngrok/","slug":"从Wordpress迁移到Hexo","published":1,"updated":"2017-02-07T06:34:16.945Z","_id":"ciyv5dy01000fpoog6hcgc6cc","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>之前有一个cc域名是Wordpress的，而me域名则是GithubPage + Hexo，可惜me域名过期没钱续费了，两边更新文章也挺麻烦，遂切换到VPS + Hexo + Webhooks</p>\n<a id=\"more\"></a>\n<p>一时手贱注册N多一年免费域名，前排出（赠）售（送）以下域名，还有个Namecheap的SSL证书</p>\n<blockquote>\n<p><a href=\"http://evil0mass.tk\" target=\"_blank\" rel=\"external\">evil0mass.tk</a><br>  <a href=\"http://evil0mass.me\" target=\"_blank\" rel=\"external\">evil0mass.me</a><br>  <a href=\"http://evilmass.xyz\" target=\"_blank\" rel=\"external\">evilmass.xyz—-这个拿来做MHP Tunnel的服务器了</a><br>  <a href=\"http://evilmass.tk\" target=\"_blank\" rel=\"external\">evilmass.tk</a><br>  <a href=\"http://evilmass.ml\" target=\"_blank\" rel=\"external\">evilmass.ml</a><br>  <a href=\"http://evilmass.cn\" target=\"_blank\" rel=\"external\">evilmass.cn—-这个没有实名认证白送了一块钱给腾讯</a></p>\n</blockquote>\n<p><br></p>\n<h3 id=\"Getting-Start\"><a href=\"#Getting-Start\" class=\"headerlink\" title=\"Getting Start\"></a>Getting Start</h3><p>VPS：Bandwagonhost China-Direct<br>System Version： Centos 7 x86_64（之前Centos的脚本开机启动怎么都设置不好，残念～～<br>关键字：<strong>systemctl enable</strong><br><br></p>\n<h4 id=\"Shadowsocks\"><a href=\"#Shadowsocks\" class=\"headerlink\" title=\"Shadowsocks\"></a>Shadowsocks</h4><pre><code>yum update -y\nyum install python-setuptools m2crypto libtool gcc &amp;&amp; easy_install pip\npip install shadowsocks\n</code></pre><p><br></p>\n<h5 id=\"libsodium依赖\"><a href=\"#libsodium依赖\" class=\"headerlink\" title=\"libsodium依赖\"></a>libsodium依赖</h5><pre><code>curl -O -L https://download.libsodium.org/libsodium/releases/LATEST.tar.gz\ntar zxf LATEST.tar.gz\ncd libsodium*\n./configure\nmake &amp;&amp; make install\n# 修复关联\necho /usr/local/lib &gt; /etc/ld.so.conf.d/usr_local_lib.conf\nldconfig\nrm -rfv ../LATEST.tar.gz ../libsodium* &amp;&amp; cd ~\n</code></pre><p><br></p>\n<h5 id=\"多端口配置\"><a href=\"#多端口配置\" class=\"headerlink\" title=\"多端口配置\"></a>多端口配置</h5><pre><code>{\n    &quot;server&quot;:&quot;0.0.0.0&quot;,\n    &quot;local_address&quot;:&quot;127.0.0.1&quot;,\n    &quot;local_port&quot;:1080,\n    &quot;port_password&quot;:{\n        &quot;9000&quot;:&quot;password0&quot;,\n        &quot;9001&quot;:&quot;password1&quot;,\n        &quot;9002&quot;:&quot;password2&quot;,\n        &quot;9003&quot;:&quot;password3&quot;\n    },\n    &quot;timeout&quot;:600,\n    &quot;method&quot;:&quot;chacha20&quot;,\n    &quot;fast_open&quot;: true\n}\n</code></pre><p><br></p>\n<h6 id=\"配置自启动\"><a href=\"#配置自启动\" class=\"headerlink\" title=\"配置自启动\"></a>配置自启动</h6><p>新建启动脚本文件/etc/systemd/system/shadowsocks.service，内容如下：</p>\n<pre><code>[Unit]\nDescription=Shadowsocks\n\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json\n\n[Install]\nWantedBy=multi-user.target\n</code></pre><p><br></p>\n<h5 id=\"启动-shadowsocks\"><a href=\"#启动-shadowsocks\" class=\"headerlink\" title=\"启动 shadowsocks\"></a>启动 shadowsocks</h5><pre><code>systemctl enable shadowsocks  #开机启动\nsystemctl start shadowsocks  #开启服务\n</code></pre><p>为了检查 shadowsocks服务是否已成功启动，可以执行以下命令查看服务的状态：</p>\n<pre><code>systemctl status shadowsocks -l\n</code></pre><p> <br>   </p>\n<h5 id=\"Shadowsocks优化\"><a href=\"#Shadowsocks优化\" class=\"headerlink\" title=\"Shadowsocks优化\"></a>Shadowsocks优化</h5><p><strong>Openvz用户可以不用看这部分的优化</strong></p>\n<p><a href=\"https://github.com/iMeiji/shadowsocks_install/wiki/shadowsocks-optimize\" target=\"_blank\" rel=\"external\">shadowsocks参数优化</a></p>\n<p><strong>KVM架构的VPS建议安装</strong> <a href=\"https://github.com/iMeiji/shadowsocks_install/wiki/%E5%BC%80%E5%90%AFTCP-BBR%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"external\">Google_BBR</a><br>目前看来是BBR比锐速强势</p>\n<blockquote>\n<p><a href=\"https://blog.kuoruan.com/110.html\" target=\"_blank\" rel=\"external\">Kcptun–Openvz的救星</a><br>  <a href=\"https://www.91yun.org/archives/2775\" target=\"_blank\" rel=\"external\">FinalSpeed–同上</a></p>\n</blockquote>\n<p><br></p>\n<h4 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a><a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\" target=\"_blank\" rel=\"external\">Git</a></h4><p>建议手动编译安装较新版本的Git，以便配置ngrok<br><br></p>\n<h4 id=\"SSH-Keygen\"><a href=\"#SSH-Keygen\" class=\"headerlink\" title=\"SSH-Keygen\"></a><a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\" target=\"_blank\" rel=\"external\">SSH-Keygen</a></h4><p><br></p>\n<h4 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a><a href=\"http://nginx.org/en/docs/install.html\" target=\"_blank\" rel=\"external\">Nginx</a></h4><pre><code>yum install nginx\nsystemctl start nginx\nsystemctl enable nginx\n</code></pre><p><strong>喜欢手动编译安装Nginx是病，得治（雾</strong></p>\n<p>手动编译安装参考</p>\n<blockquote>\n<p>Zlib：<a href=\"http://zlib.net/\" target=\"_blank\" rel=\"external\">http://zlib.net/</a><br>  pcre：<a href=\"https://ftp.pcre.org/pub/pcre/\" target=\"_blank\" rel=\"external\">https://ftp.pcre.org/pub/pcre/</a><br>  Open-SSL：<a href=\"https://www.openssl.org/source/\" target=\"_blank\" rel=\"external\">https://www.openssl.org/source/</a></p>\n</blockquote>\n<p><br></p>\n<h4 id=\"NodeJS\"><a href=\"#NodeJS\" class=\"headerlink\" title=\"NodeJS\"></a><a href=\"https://nodejs.org/en/download/current/\" target=\"_blank\" rel=\"external\">NodeJS</a></h4><h5 id=\"二进制包安装\"><a href=\"#二进制包安装\" class=\"headerlink\" title=\"二进制包安装\"></a>二进制包安装</h5><pre><code>cd /home\nwget https://nodejs.org/dist/v7.5.0/node-v7.5.0-linux-x64.tar.xz\ntar -xf node-v7.5.0-linux-x64.tar.xz\n./node-v7.5.0-linux-x64/bin/node -v\n</code></pre><p>输出<code>v7.5.0</code>即可</p>\n<h6 id=\"软连接\"><a href=\"#软连接\" class=\"headerlink\" title=\"软连接\"></a>软连接</h6><pre><code>ln -s /home/node-v7.5.0-linux-x64/bin/node /usr/local/bin/node\nln -s /home/node-v7.5.0-linux-x64/bin/npm /usr/local/bin/npm\n</code></pre><p><br></p>\n<h6 id=\"添加到PATH\"><a href=\"#添加到PATH\" class=\"headerlink\" title=\"添加到PATH\"></a>添加到PATH</h6><pre><code>vim /etc/profile\n\n#添加到最后\nPATH=$PATH:/home/node-v7.5.0-linux-x64/bin\n\n#即刻生效\nsource /etc/profile \n</code></pre><p><br></p>\n<h5 id=\"源码编译安装（你这样是要被电的。。。\"><a href=\"#源码编译安装（你这样是要被电的。。。\" class=\"headerlink\" title=\"源码编译安装（你这样是要被电的。。。\"></a>源码编译安装（你这样是要被电的。。。</h5><pre><code>yum install gcc-c++ screen  #在耗时较多的任务又怕shell断开连接，可以开启screen\nwget https://nodejs.org/dist/v7.5.0/node-v7.5.0.tar.gz\ntar -zxvf node-v7.5.0.tar.gz\ncd node-v7.5.0\n./configure\nmake &amp;&amp; make install  #我试过用树莓派编译，6个多小时\n</code></pre><p><br></p>\n<h4 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a></h4><pre><code>npm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nnpm install hexo-deployer-git --save\n</code></pre><h5 id=\"Next主题\"><a href=\"#Next主题\" class=\"headerlink\" title=\"Next主题\"></a><a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">Next主题</a></h5><p><br></p>\n<h4 id=\"让hexo在后台运行\"><a href=\"#让hexo在后台运行\" class=\"headerlink\" title=\"让hexo在后台运行\"></a>让hexo在后台运行</h4><p>这里提供两种方式： <code>forever</code> <code>supervisord</code></p>\n<h5 id=\"推荐forever\"><a href=\"#推荐forever\" class=\"headerlink\" title=\"推荐forever\"></a><strong>推荐forever</strong></h5><pre><code>npm install forever -g\nvim hexo_run.js\n</code></pre><p><br>    </p>\n<h6 id=\"脚本内容\"><a href=\"#脚本内容\" class=\"headerlink\" title=\"脚本内容\"></a>脚本内容</h6><pre><code>var spawn = require(&apos;child_process&apos;).spawn;\nfree = spawn(&apos;hexo&apos;, [&apos;server&apos;]);\n\nfree.stdout.on(&apos;data&apos;, function (data) {\n        console.log(&apos;standard output:\\n&apos; + data);\n});\n\nfree.stderr.on(&apos;data&apos;, function (data) {\n        console.log(&apos;standard error output:\\n&apos; + data);\n});\n\nfree.on(&apos;exit&apos;, function (code, signal) {\n        console.log(&apos;child process exit, exit: &apos; + code);\n});\n</code></pre><p><br>    </p>\n<h6 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h6><pre><code>forever list                 # 查看forever已经运行的应用\nforever start hexo_run.js    # 启动hexo\nforever stop hexo_run.js     # 停止hexo\n</code></pre><p><br></p>\n<h5 id=\"supervisor\"><a href=\"#supervisor\" class=\"headerlink\" title=\"supervisor\"></a><strong>supervisor</strong></h5><p>使用 hexo server 启动的 Hexo 服务是非 Daemon 模式的。<br>创建 Supervisor 配置文件： <code>vi /etc/supervisor/conf.d/blog.conf</code></p>\n<pre><code>[program:blog]\ncommand=/your_path_to/hexo/node_modules/hexo server\ndirectory=/your_path_to/hexo/\nautostart=true\nautorestart=true\nstartsecs=5\nstopsignal=HUP\nstopasgroup=true\nstopwaitsecs=5\nstdout_logfile_maxbytes=20MB\nstdout_logfile=/var/log/supervisor/%(program_name)s.log\nstderr_logfile_maxbytes=20MB\nstderr_logfile=/var/log/supervisor/%(program_name)s.log\n</code></pre><p>启动 Supervisor 守护进程</p>\n<pre><code>supervisord\n</code></pre><p> 如果出现以下错误，输入<code>sudo unlink /tmp/supervisor.sock</code>。然后启动supervisor服务。</p>\n<blockquote>\n<p>Error: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord</p>\n</blockquote>\n<p>查看 blog 程序（即 Hexo 服务）的状态：</p>\n<pre><code>supervisorctl status\n</code></pre><blockquote>\n<p>blog                             RUNNING    pid 28974, uptime 0:00:32</p>\n</blockquote>\n<p>可以看出，blog 程序已经处于运行状态，监听端口为 hexo server 命令的默认端口 4000。在浏览器中访问 <a href=\"http://VPS-IP:4000\" target=\"_blank\" rel=\"external\">http://VPS-IP:4000</a> 可以看到博客的运行效果。</p>\n<p><br></p>\n<h4 id=\"Let’s-Encrypt\"><a href=\"#Let’s-Encrypt\" class=\"headerlink\" title=\"Let’s Encrypt\"></a><a href=\"https://ksmx.me/letsencrypt-ssl-https/\" target=\"_blank\" rel=\"external\">Let’s Encrypt</a></h4><h5 id=\"证书自动续期\"><a href=\"#证书自动续期\" class=\"headerlink\" title=\"证书自动续期\"></a>证书自动续期</h5><pre><code>vim /home/ssl_renew.sh\n\n#!/bin/bash\n/home/letsencrypt/certbot-auto renew\n\n#添加到crontab每月运行一次\ncrontab -e\n\n* * 1 * * sh /home/ssl_renew.sh\n</code></pre><p><br></p>\n<h5 id=\"配置-Nginx-代理\"><a href=\"#配置-Nginx-代理\" class=\"headerlink\" title=\"配置 Nginx 代理\"></a>配置 Nginx 代理</h5><p>作为一个对外公开的网站，使用 4000 端口显然是不合适的。可以直接改成 80 端口，但是这样直接把 Hexo 服务暴露给用户，并不恰当。更好的办法是使用 Nginx 做代理。</p>\n<pre><code>vim /etc/nginx/nginx.conf\n\nserver {\nlocation / {\n    proxy_pass http://localhost:4000;\n}\naccess_log  /var/log/nginx/blog.access.log;\nerror_log /var/log/nginx/blog.error.log;\n}\n</code></pre><p>重启 Nginx：<br>    service nginx restart<br><br></p>\n<h4 id=\"Webhooks\"><a href=\"#Webhooks\" class=\"headerlink\" title=\"Webhooks\"></a>Webhooks</h4><p><strong>请勿在vps上面执行git push或者hexo d之类的操作，容易产生conflict，设置好wenhooks之后更新文章都在本地进行</strong></p>\n<h5 id=\"github上面webhooks地址填：-http-your-vps-ip-8888-以及下面config-json用到的your-secret\"><a href=\"#github上面webhooks地址填：-http-your-vps-ip-8888-以及下面config-json用到的your-secret\" class=\"headerlink\" title=\"github上面webhooks地址填： http://your-vps-ip:8888/ 以及下面config.json用到的your secret\"></a>github上面webhooks地址填： <a href=\"http://your-vps-ip:8888/\" target=\"_blank\" rel=\"external\">http://your-vps-ip:8888/</a> 以及下面config.json用到的your secret</h5><pre><code>cd hexo安装路径\ngit clone 你的github-page仓库\nmv 仓库/.git . &amp;&amp; rm -rfv 仓库  #实际上我们就只要仓库那个.git而已\n</code></pre><h5 id=\"auto-publish-hexo\"><a href=\"#auto-publish-hexo\" class=\"headerlink\" title=\"auto-publish-hexo\"></a>auto-publish-hexo</h5><pre><code>cd hexo安装路径\ngit clone https://github.com/zhipengyan/auto-publish-hexo\ncd auto-publish-hexo\nnpm install\n</code></pre><h5 id=\"打开目录下的config-json进行修改\"><a href=\"#打开目录下的config-json进行修改\" class=\"headerlink\" title=\"打开目录下的config.json进行修改\"></a>打开目录下的config.json进行修改</h5><pre><code>{\n    &quot;time_zone&quot;: &quot;Asia/Shanghai&quot;, //所在时区，在log中显示时间了，vps一般不是本地时区\n    &quot;webhook_secret&quot;: &quot;your secret&quot;, //github webhooks设置的secret\n    &quot;path&quot;: { //如果hexo的配置为默认的话不用修改下面的\n    &quot;hexo_path&quot;: &quot;../&quot;, //hexo目录相对路径\n    &quot;hexo_source_path&quot;: &quot;../source&quot; //hexo source目录的相对路径，也就是文章目录\n    },\n    &quot;listen_port&quot;: 8888 //监听的端口\n}\n</code></pre><h5 id=\"开启screen使用npm-start或者node-index-js运行\"><a href=\"#开启screen使用npm-start或者node-index-js运行\" class=\"headerlink\" title=\"开启screen使用npm start或者node index.js运行\"></a>开启screen使用<code>npm start</code>或者<code>node index.js</code>运行</h5><p><br></p>\n<h4 id=\"在Centos配置ngrok\"><a href=\"#在Centos配置ngrok\" class=\"headerlink\" title=\"在Centos配置ngrok\"></a><a href=\"https://evilmass.cc/2017/01/25/%E5%9C%A8CentOS%E4%B8%8B%E9%85%8D%E7%BD%AEngrok/\"><strong>在Centos配置ngrok</strong></a></h4><p><br></p>\n<h4 id=\"服务器监控-UptimeRobot-简明使用手册\"><a href=\"#服务器监控-UptimeRobot-简明使用手册\" class=\"headerlink\" title=\"服务器监控 UptimeRobot 简明使用手册\"></a><a href=\"https://liyuans.com/archives/uptimerobot.html/\" target=\"_blank\" rel=\"external\"><strong>服务器监控 UptimeRobot 简明使用手册</strong></a></h4><p><br></p>\n","excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>之前有一个cc域名是Wordpress的，而me域名则是GithubPage + Hexo，可惜me域名过期没钱续费了，两边更新文章也挺麻烦，遂切换到VPS + Hexo + Webhooks</p>","more":"<p>一时手贱注册N多一年免费域名，前排出（赠）售（送）以下域名，还有个Namecheap的SSL证书</p>\n<blockquote>\n<p><a href=\"http://evil0mass.tk\">evil0mass.tk</a><br>  <a href=\"http://evil0mass.me\">evil0mass.me</a><br>  <a href=\"http://evilmass.xyz\">evilmass.xyz—-这个拿来做MHP Tunnel的服务器了</a><br>  <a href=\"http://evilmass.tk\">evilmass.tk</a><br>  <a href=\"http://evilmass.ml\">evilmass.ml</a><br>  <a href=\"http://evilmass.cn\">evilmass.cn—-这个没有实名认证白送了一块钱给腾讯</a></p>\n</blockquote>\n<p><br></p>\n<h3 id=\"Getting-Start\"><a href=\"#Getting-Start\" class=\"headerlink\" title=\"Getting Start\"></a>Getting Start</h3><p>VPS：Bandwagonhost China-Direct<br>System Version： Centos 7 x86_64（之前Centos的脚本开机启动怎么都设置不好，残念～～<br>关键字：<strong>systemctl enable</strong><br><br></p>\n<h4 id=\"Shadowsocks\"><a href=\"#Shadowsocks\" class=\"headerlink\" title=\"Shadowsocks\"></a>Shadowsocks</h4><pre><code>yum update -y\nyum install python-setuptools m2crypto libtool gcc &amp;&amp; easy_install pip\npip install shadowsocks\n</code></pre><p><br></p>\n<h5 id=\"libsodium依赖\"><a href=\"#libsodium依赖\" class=\"headerlink\" title=\"libsodium依赖\"></a>libsodium依赖</h5><pre><code>curl -O -L https://download.libsodium.org/libsodium/releases/LATEST.tar.gz\ntar zxf LATEST.tar.gz\ncd libsodium*\n./configure\nmake &amp;&amp; make install\n# 修复关联\necho /usr/local/lib &gt; /etc/ld.so.conf.d/usr_local_lib.conf\nldconfig\nrm -rfv ../LATEST.tar.gz ../libsodium* &amp;&amp; cd ~\n</code></pre><p><br></p>\n<h5 id=\"多端口配置\"><a href=\"#多端口配置\" class=\"headerlink\" title=\"多端口配置\"></a>多端口配置</h5><pre><code>{\n    &quot;server&quot;:&quot;0.0.0.0&quot;,\n    &quot;local_address&quot;:&quot;127.0.0.1&quot;,\n    &quot;local_port&quot;:1080,\n    &quot;port_password&quot;:{\n        &quot;9000&quot;:&quot;password0&quot;,\n        &quot;9001&quot;:&quot;password1&quot;,\n        &quot;9002&quot;:&quot;password2&quot;,\n        &quot;9003&quot;:&quot;password3&quot;\n    },\n    &quot;timeout&quot;:600,\n    &quot;method&quot;:&quot;chacha20&quot;,\n    &quot;fast_open&quot;: true\n}\n</code></pre><p><br></p>\n<h6 id=\"配置自启动\"><a href=\"#配置自启动\" class=\"headerlink\" title=\"配置自启动\"></a>配置自启动</h6><p>新建启动脚本文件/etc/systemd/system/shadowsocks.service，内容如下：</p>\n<pre><code>[Unit]\nDescription=Shadowsocks\n\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json\n\n[Install]\nWantedBy=multi-user.target\n</code></pre><p><br></p>\n<h5 id=\"启动-shadowsocks\"><a href=\"#启动-shadowsocks\" class=\"headerlink\" title=\"启动 shadowsocks\"></a>启动 shadowsocks</h5><pre><code>systemctl enable shadowsocks  #开机启动\nsystemctl start shadowsocks  #开启服务\n</code></pre><p>为了检查 shadowsocks服务是否已成功启动，可以执行以下命令查看服务的状态：</p>\n<pre><code>systemctl status shadowsocks -l\n</code></pre><p> <br>   </p>\n<h5 id=\"Shadowsocks优化\"><a href=\"#Shadowsocks优化\" class=\"headerlink\" title=\"Shadowsocks优化\"></a>Shadowsocks优化</h5><p><strong>Openvz用户可以不用看这部分的优化</strong></p>\n<p><a href=\"https://github.com/iMeiji/shadowsocks_install/wiki/shadowsocks-optimize\">shadowsocks参数优化</a></p>\n<p><strong>KVM架构的VPS建议安装</strong> <a href=\"https://github.com/iMeiji/shadowsocks_install/wiki/%E5%BC%80%E5%90%AFTCP-BBR%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95\">Google_BBR</a><br>目前看来是BBR比锐速强势</p>\n<blockquote>\n<p><a href=\"https://blog.kuoruan.com/110.html\">Kcptun–Openvz的救星</a><br>  <a href=\"https://www.91yun.org/archives/2775\">FinalSpeed–同上</a></p>\n</blockquote>\n<p><br></p>\n<h4 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a><a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\">Git</a></h4><p>建议手动编译安装较新版本的Git，以便配置ngrok<br><br></p>\n<h4 id=\"SSH-Keygen\"><a href=\"#SSH-Keygen\" class=\"headerlink\" title=\"SSH-Keygen\"></a><a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\">SSH-Keygen</a></h4><p><br></p>\n<h4 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a><a href=\"http://nginx.org/en/docs/install.html\">Nginx</a></h4><pre><code>yum install nginx\nsystemctl start nginx\nsystemctl enable nginx\n</code></pre><p><strong>喜欢手动编译安装Nginx是病，得治（雾</strong></p>\n<p>手动编译安装参考</p>\n<blockquote>\n<p>Zlib：<a href=\"http://zlib.net/\">http://zlib.net/</a><br>  pcre：<a href=\"https://ftp.pcre.org/pub/pcre/\">https://ftp.pcre.org/pub/pcre/</a><br>  Open-SSL：<a href=\"https://www.openssl.org/source/\">https://www.openssl.org/source/</a></p>\n</blockquote>\n<p><br></p>\n<h4 id=\"NodeJS\"><a href=\"#NodeJS\" class=\"headerlink\" title=\"NodeJS\"></a><a href=\"https://nodejs.org/en/download/current/\">NodeJS</a></h4><h5 id=\"二进制包安装\"><a href=\"#二进制包安装\" class=\"headerlink\" title=\"二进制包安装\"></a>二进制包安装</h5><pre><code>cd /home\nwget https://nodejs.org/dist/v7.5.0/node-v7.5.0-linux-x64.tar.xz\ntar -xf node-v7.5.0-linux-x64.tar.xz\n./node-v7.5.0-linux-x64/bin/node -v\n</code></pre><p>输出<code>v7.5.0</code>即可</p>\n<h6 id=\"软连接\"><a href=\"#软连接\" class=\"headerlink\" title=\"软连接\"></a>软连接</h6><pre><code>ln -s /home/node-v7.5.0-linux-x64/bin/node /usr/local/bin/node\nln -s /home/node-v7.5.0-linux-x64/bin/npm /usr/local/bin/npm\n</code></pre><p><br></p>\n<h6 id=\"添加到PATH\"><a href=\"#添加到PATH\" class=\"headerlink\" title=\"添加到PATH\"></a>添加到PATH</h6><pre><code>vim /etc/profile\n\n#添加到最后\nPATH=$PATH:/home/node-v7.5.0-linux-x64/bin\n\n#即刻生效\nsource /etc/profile \n</code></pre><p><br></p>\n<h5 id=\"源码编译安装（你这样是要被电的。。。\"><a href=\"#源码编译安装（你这样是要被电的。。。\" class=\"headerlink\" title=\"源码编译安装（你这样是要被电的。。。\"></a>源码编译安装（你这样是要被电的。。。</h5><pre><code>yum install gcc-c++ screen  #在耗时较多的任务又怕shell断开连接，可以开启screen\nwget https://nodejs.org/dist/v7.5.0/node-v7.5.0.tar.gz\ntar -zxvf node-v7.5.0.tar.gz\ncd node-v7.5.0\n./configure\nmake &amp;&amp; make install  #我试过用树莓派编译，6个多小时\n</code></pre><p><br></p>\n<h4 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a><a href=\"https://hexo.io/\">Hexo</a></h4><pre><code>npm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nnpm install hexo-deployer-git --save\n</code></pre><h5 id=\"Next主题\"><a href=\"#Next主题\" class=\"headerlink\" title=\"Next主题\"></a><a href=\"http://theme-next.iissnan.com/getting-started.html\">Next主题</a></h5><p><br></p>\n<h4 id=\"让hexo在后台运行\"><a href=\"#让hexo在后台运行\" class=\"headerlink\" title=\"让hexo在后台运行\"></a>让hexo在后台运行</h4><p>这里提供两种方式： <code>forever</code> <code>supervisord</code></p>\n<h5 id=\"推荐forever\"><a href=\"#推荐forever\" class=\"headerlink\" title=\"推荐forever\"></a><strong>推荐forever</strong></h5><pre><code>npm install forever -g\nvim hexo_run.js\n</code></pre><p><br>    </p>\n<h6 id=\"脚本内容\"><a href=\"#脚本内容\" class=\"headerlink\" title=\"脚本内容\"></a>脚本内容</h6><pre><code>var spawn = require(&apos;child_process&apos;).spawn;\nfree = spawn(&apos;hexo&apos;, [&apos;server&apos;]);\n\nfree.stdout.on(&apos;data&apos;, function (data) {\n        console.log(&apos;standard output:\\n&apos; + data);\n});\n\nfree.stderr.on(&apos;data&apos;, function (data) {\n        console.log(&apos;standard error output:\\n&apos; + data);\n});\n\nfree.on(&apos;exit&apos;, function (code, signal) {\n        console.log(&apos;child process exit, exit: &apos; + code);\n});\n</code></pre><p><br>    </p>\n<h6 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h6><pre><code>forever list                 # 查看forever已经运行的应用\nforever start hexo_run.js    # 启动hexo\nforever stop hexo_run.js     # 停止hexo\n</code></pre><p><br></p>\n<h5 id=\"supervisor\"><a href=\"#supervisor\" class=\"headerlink\" title=\"supervisor\"></a><strong>supervisor</strong></h5><p>使用 hexo server 启动的 Hexo 服务是非 Daemon 模式的。<br>创建 Supervisor 配置文件： <code>vi /etc/supervisor/conf.d/blog.conf</code></p>\n<pre><code>[program:blog]\ncommand=/your_path_to/hexo/node_modules/hexo server\ndirectory=/your_path_to/hexo/\nautostart=true\nautorestart=true\nstartsecs=5\nstopsignal=HUP\nstopasgroup=true\nstopwaitsecs=5\nstdout_logfile_maxbytes=20MB\nstdout_logfile=/var/log/supervisor/%(program_name)s.log\nstderr_logfile_maxbytes=20MB\nstderr_logfile=/var/log/supervisor/%(program_name)s.log\n</code></pre><p>启动 Supervisor 守护进程</p>\n<pre><code>supervisord\n</code></pre><p> 如果出现以下错误，输入<code>sudo unlink /tmp/supervisor.sock</code>。然后启动supervisor服务。</p>\n<blockquote>\n<p>Error: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord</p>\n</blockquote>\n<p>查看 blog 程序（即 Hexo 服务）的状态：</p>\n<pre><code>supervisorctl status\n</code></pre><blockquote>\n<p>blog                             RUNNING    pid 28974, uptime 0:00:32</p>\n</blockquote>\n<p>可以看出，blog 程序已经处于运行状态，监听端口为 hexo server 命令的默认端口 4000。在浏览器中访问 <a href=\"http://VPS-IP:4000\">http://VPS-IP:4000</a> 可以看到博客的运行效果。</p>\n<p><br></p>\n<h4 id=\"Let’s-Encrypt\"><a href=\"#Let’s-Encrypt\" class=\"headerlink\" title=\"Let’s Encrypt\"></a><a href=\"https://ksmx.me/letsencrypt-ssl-https/\">Let’s Encrypt</a></h4><h5 id=\"证书自动续期\"><a href=\"#证书自动续期\" class=\"headerlink\" title=\"证书自动续期\"></a>证书自动续期</h5><pre><code>vim /home/ssl_renew.sh\n\n#!/bin/bash\n/home/letsencrypt/certbot-auto renew\n\n#添加到crontab每月运行一次\ncrontab -e\n\n* * 1 * * sh /home/ssl_renew.sh\n</code></pre><p><br></p>\n<h5 id=\"配置-Nginx-代理\"><a href=\"#配置-Nginx-代理\" class=\"headerlink\" title=\"配置 Nginx 代理\"></a>配置 Nginx 代理</h5><p>作为一个对外公开的网站，使用 4000 端口显然是不合适的。可以直接改成 80 端口，但是这样直接把 Hexo 服务暴露给用户，并不恰当。更好的办法是使用 Nginx 做代理。</p>\n<pre><code>vim /etc/nginx/nginx.conf\n\nserver {\nlocation / {\n    proxy_pass http://localhost:4000;\n}\naccess_log  /var/log/nginx/blog.access.log;\nerror_log /var/log/nginx/blog.error.log;\n}\n</code></pre><p>重启 Nginx：<br>    service nginx restart<br><br></p>\n<h4 id=\"Webhooks\"><a href=\"#Webhooks\" class=\"headerlink\" title=\"Webhooks\"></a>Webhooks</h4><p><strong>请勿在vps上面执行git push或者hexo d之类的操作，容易产生conflict，设置好wenhooks之后更新文章都在本地进行</strong></p>\n<h5 id=\"github上面webhooks地址填：-http-your-vps-ip-8888-以及下面config-json用到的your-secret\"><a href=\"#github上面webhooks地址填：-http-your-vps-ip-8888-以及下面config-json用到的your-secret\" class=\"headerlink\" title=\"github上面webhooks地址填： http://your-vps-ip:8888/ 以及下面config.json用到的your secret\"></a>github上面webhooks地址填： <a href=\"http://your-vps-ip:8888/\">http://your-vps-ip:8888/</a> 以及下面config.json用到的your secret</h5><pre><code>cd hexo安装路径\ngit clone 你的github-page仓库\nmv 仓库/.git . &amp;&amp; rm -rfv 仓库  #实际上我们就只要仓库那个.git而已\n</code></pre><h5 id=\"auto-publish-hexo\"><a href=\"#auto-publish-hexo\" class=\"headerlink\" title=\"auto-publish-hexo\"></a>auto-publish-hexo</h5><pre><code>cd hexo安装路径\ngit clone https://github.com/zhipengyan/auto-publish-hexo\ncd auto-publish-hexo\nnpm install\n</code></pre><h5 id=\"打开目录下的config-json进行修改\"><a href=\"#打开目录下的config-json进行修改\" class=\"headerlink\" title=\"打开目录下的config.json进行修改\"></a>打开目录下的config.json进行修改</h5><pre><code>{\n    &quot;time_zone&quot;: &quot;Asia/Shanghai&quot;, //所在时区，在log中显示时间了，vps一般不是本地时区\n    &quot;webhook_secret&quot;: &quot;your secret&quot;, //github webhooks设置的secret\n    &quot;path&quot;: { //如果hexo的配置为默认的话不用修改下面的\n    &quot;hexo_path&quot;: &quot;../&quot;, //hexo目录相对路径\n    &quot;hexo_source_path&quot;: &quot;../source&quot; //hexo source目录的相对路径，也就是文章目录\n    },\n    &quot;listen_port&quot;: 8888 //监听的端口\n}\n</code></pre><h5 id=\"开启screen使用npm-start或者node-index-js运行\"><a href=\"#开启screen使用npm-start或者node-index-js运行\" class=\"headerlink\" title=\"开启screen使用npm start或者node index.js运行\"></a>开启screen使用<code>npm start</code>或者<code>node index.js</code>运行</h5><p><br></p>\n<h4 id=\"在Centos配置ngrok\"><a href=\"#在Centos配置ngrok\" class=\"headerlink\" title=\"在Centos配置ngrok\"></a><a href=\"https://evilmass.cc/2017/01/25/%E5%9C%A8CentOS%E4%B8%8B%E9%85%8D%E7%BD%AEngrok/\"><strong>在Centos配置ngrok</strong></a></h4><p><br></p>\n<h4 id=\"服务器监控-UptimeRobot-简明使用手册\"><a href=\"#服务器监控-UptimeRobot-简明使用手册\" class=\"headerlink\" title=\"服务器监控 UptimeRobot 简明使用手册\"></a><a href=\"https://liyuans.com/archives/uptimerobot.html/\"><strong>服务器监控 UptimeRobot 简明使用手册</strong></a></h4><p><br></p>"},{"title":"Selenium + Python + Windows = Automated Test Environment","date":"2017-01-15T08:09:44.000Z","_content":"\n### Selenium\n[Selenium][1] \n\nDownload **selenium-3.0.2.tar.gz**, Unarchive it, and run:\n\n    python setup.py install\n<br>\n\n<!--more-->\n\n### ChromeDriver\n[ChromeDriver][2]\n\n> 1. Download **chromedriver_win32.zip**\n2. Unarchive it to the chrome.exe directory\n3. Set the **path** into system environment variables\n\n![ChromeDriver][3]\n \n<br>\n\n### FirefoxDriver\n[FirefoxDriver][4]\n\n> Same as the above operation\n\n<br>\n\n### Run\n    # !/usr/bin/env python\n    # -*- coding:utf-8 -*-\n\n    driver = webdriver.Chrome()\n    driver.get(\"https://www.baidu.com\")  # open url\n    driver.find_element_by_link_text(u'地图').click()  # match the text and click\n    driver.implicitly_wait(10)  # wait 10s for next operation\n    print(driver.title)\n    driver.close()\n<br>\n\n### Reference\n> [Selenium with Python][5]\n\n[1]:https://pypi.python.org/pypi/selenium\n[2]:https://sites.google.com/a/chromium.org/chromedriver/downloads\n[3]:https://of4jd0bcc.qnssl.com/Selenium/chromeDriver.png\n[4]:https://github.com/mozilla/geckodriver/releases\n[5]:http://selenium-python.readthedocs.io/index.html\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/dmc.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/patapon_wechat.gif?imageView2/1/w/200/h/200","source":"_posts/Selenium-Python-Windows-Automated-Test-Environment.md","raw":"---\ntitle: Selenium + Python + Windows = Automated Test Environment\ndate: 2017-01-15 16:09:44\ntags: 爬虫\n---\n\n### Selenium\n[Selenium][1] \n\nDownload **selenium-3.0.2.tar.gz**, Unarchive it, and run:\n\n    python setup.py install\n<br>\n\n<!--more-->\n\n### ChromeDriver\n[ChromeDriver][2]\n\n> 1. Download **chromedriver_win32.zip**\n2. Unarchive it to the chrome.exe directory\n3. Set the **path** into system environment variables\n\n![ChromeDriver][3]\n \n<br>\n\n### FirefoxDriver\n[FirefoxDriver][4]\n\n> Same as the above operation\n\n<br>\n\n### Run\n    # !/usr/bin/env python\n    # -*- coding:utf-8 -*-\n\n    driver = webdriver.Chrome()\n    driver.get(\"https://www.baidu.com\")  # open url\n    driver.find_element_by_link_text(u'地图').click()  # match the text and click\n    driver.implicitly_wait(10)  # wait 10s for next operation\n    print(driver.title)\n    driver.close()\n<br>\n\n### Reference\n> [Selenium with Python][5]\n\n[1]:https://pypi.python.org/pypi/selenium\n[2]:https://sites.google.com/a/chromium.org/chromedriver/downloads\n[3]:https://of4jd0bcc.qnssl.com/Selenium/chromeDriver.png\n[4]:https://github.com/mozilla/geckodriver/releases\n[5]:http://selenium-python.readthedocs.io/index.html\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/dmc.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/patapon_wechat.gif?imageView2/1/w/200/h/200","slug":"Selenium-Python-Windows-Automated-Test-Environment","published":1,"updated":"2017-01-31T10:32:44.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv5dy04000ipoogctpl93st","content":"<h3 id=\"Selenium\"><a href=\"#Selenium\" class=\"headerlink\" title=\"Selenium\"></a>Selenium</h3><p><a href=\"https://pypi.python.org/pypi/selenium\" target=\"_blank\" rel=\"external\">Selenium</a> </p>\n<p>Download <strong>selenium-3.0.2.tar.gz</strong>, Unarchive it, and run:</p>\n<pre><code>python setup.py install\n</code></pre><p><br></p>\n<a id=\"more\"></a>\n<h3 id=\"ChromeDriver\"><a href=\"#ChromeDriver\" class=\"headerlink\" title=\"ChromeDriver\"></a>ChromeDriver</h3><p><a href=\"https://sites.google.com/a/chromium.org/chromedriver/downloads\" target=\"_blank\" rel=\"external\">ChromeDriver</a></p>\n<blockquote>\n<ol>\n<li>Download <strong>chromedriver_win32.zip</strong></li>\n<li>Unarchive it to the chrome.exe directory</li>\n<li>Set the <strong>path</strong> into system environment variables</li>\n</ol>\n</blockquote>\n<p><img src=\"https://of4jd0bcc.qnssl.com/Selenium/chromeDriver.png\" alt=\"ChromeDriver\"></p>\n<p><br></p>\n<h3 id=\"FirefoxDriver\"><a href=\"#FirefoxDriver\" class=\"headerlink\" title=\"FirefoxDriver\"></a>FirefoxDriver</h3><p><a href=\"https://github.com/mozilla/geckodriver/releases\" target=\"_blank\" rel=\"external\">FirefoxDriver</a></p>\n<blockquote>\n<p>Same as the above operation</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run\"></a>Run</h3><pre><code># !/usr/bin/env python\n# -*- coding:utf-8 -*-\n\ndriver = webdriver.Chrome()\ndriver.get(&quot;https://www.baidu.com&quot;)  # open url\ndriver.find_element_by_link_text(u&apos;地图&apos;).click()  # match the text and click\ndriver.implicitly_wait(10)  # wait 10s for next operation\nprint(driver.title)\ndriver.close()\n</code></pre><p><br></p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><blockquote>\n<p><a href=\"http://selenium-python.readthedocs.io/index.html\" target=\"_blank\" rel=\"external\">Selenium with Python</a></p>\n</blockquote>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/dmc.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/patapon_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>\n","excerpt":"<h3 id=\"Selenium\"><a href=\"#Selenium\" class=\"headerlink\" title=\"Selenium\"></a>Selenium</h3><p><a href=\"https://pypi.python.org/pypi/selenium\">Selenium</a> </p>\n<p>Download <strong>selenium-3.0.2.tar.gz</strong>, Unarchive it, and run:</p>\n<pre><code>python setup.py install\n</code></pre><p><br></p>","more":"<h3 id=\"ChromeDriver\"><a href=\"#ChromeDriver\" class=\"headerlink\" title=\"ChromeDriver\"></a>ChromeDriver</h3><p><a href=\"https://sites.google.com/a/chromium.org/chromedriver/downloads\">ChromeDriver</a></p>\n<blockquote>\n<ol>\n<li>Download <strong>chromedriver_win32.zip</strong></li>\n<li>Unarchive it to the chrome.exe directory</li>\n<li>Set the <strong>path</strong> into system environment variables</li>\n</ol>\n</blockquote>\n<p><img src=\"https://of4jd0bcc.qnssl.com/Selenium/chromeDriver.png\" alt=\"ChromeDriver\"></p>\n<p><br></p>\n<h3 id=\"FirefoxDriver\"><a href=\"#FirefoxDriver\" class=\"headerlink\" title=\"FirefoxDriver\"></a>FirefoxDriver</h3><p><a href=\"https://github.com/mozilla/geckodriver/releases\">FirefoxDriver</a></p>\n<blockquote>\n<p>Same as the above operation</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run\"></a>Run</h3><pre><code># !/usr/bin/env python\n# -*- coding:utf-8 -*-\n\ndriver = webdriver.Chrome()\ndriver.get(&quot;https://www.baidu.com&quot;)  # open url\ndriver.find_element_by_link_text(u&apos;地图&apos;).click()  # match the text and click\ndriver.implicitly_wait(10)  # wait 10s for next operation\nprint(driver.title)\ndriver.close()\n</code></pre><p><br></p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><blockquote>\n<p><a href=\"http://selenium-python.readthedocs.io/index.html\">Selenium with Python</a></p>\n</blockquote>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/dmc.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/patapon_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>"},{"title":"Wordpress全站切换到HTTPS","date":"2017-01-31T12:07:30.000Z","_content":"这也算个大坑了,之前一直被dalao吐槽我的网站为什么还是HTTP,然后我知道原来还有Let's Encrypt这东西,apt-get之后一直pass就可以了,这年头弄个HTTPS比之前省事多了。。。然而最后我用了StartSSL（滑稽\n<br>\n\n<!--more-->\n\n### 首先,来玩玩自行签证\n试试这个懒人版的脚本: [给Nginx配置一个自签名的SSL证书](http://www.liaoxuefeng.com/article/0014189023237367e8d42829de24b6eaf893ca47df4fb5e000)\n然后用Chrome打开站点就会发现证书错误![https-error](https://of4jd0bcc.qnssl.com/Https/https-error.png)(强行黑了一波Chrome233\n<br>\n\n### StartSSL\n注册帐号,然后得到一个ClientLogin证书,导入后就可以直接登录了\n![client-login](https://of4jd0bcc.qnssl.com/Https/StartSSL-client-login.jpg)\n\n配置Validations Wizard之前需要Certificates Wizard,在FreeUser那一栏下面选DV SSL Certificate就好了\n然后按这里操作: [Startssl 现在就启用 HTTPS,免费的！](http://www.vincentguo.cn/default/130.html?flag=recommend)\n\n有一点需要提一下,如果你开启了**域名隐私保护**,那么你需要先关闭这个功能才能接收到验证邮件\n密匙建议放在你wordpress的站点文件夹或者nginx/ssl下面（没有ssl文件夹自己mkdir一个）\n如无意外,我们就拿到一个为期一年的HTTPS证书了,解压证书到你的VPS\n<br>\n\n### 导入证书到站点\n找到nginx.conf这个文件,做如下更改: \n\n    server{\n        listen 80 default_server;\n        listen 443 default ssl; #开启HTTPS\n        ssl on;\n        ssl_certificate /your-path-to/StartSSL颁发给你的.crt; #解压得到的csr文件\n        ssl_certificate_key /your-path-to/your-name.key; #ssl文件夹下自己生成的key\n        \n        #重定向\n        if ($server_port = 80) {\n            return 301 https://$server_name$request_uri;\n        }\n        if ($scheme = http) {\n            return 301 https://$server_name$request_uri;\n        }\n        error_page 497 https://$server_name$request_uri;\n        server_name your-domain; #你的站点地址\n    \n        root  /your-path-to/your-domain; #wordpress下的域名文件夹\n\n重启Nginx: `service nginx restart`\n应该是可以免输入密码的,但是不嫌麻烦的话还是输两次吧,哪天忘了key也是件很蛋疼的事。。。\n\n基本上完成上述步骤后,网站就能够实现全站强制HTTPS访问了。但是按照Chrome的标准的话,此时只能得到一个灰锁或带三角的灰锁而非完全的绿锁。\n**这其中可能有两个原因:**\n    一个是未使用新型加密套件\n 另一个是网站加载了不安全的脚本。前者是服务器的问题,后者是主题的问题\n \n![https站点显示](https://of4jd0bcc.qnssl.com/Https/https%E7%AB%99%E7%82%B9%E5%B1%95%E7%A4%BA.jpg)\n<br>\n\n### WordPress相关设置\n#### 登录后台更改站点固定链接为https\n![更改固定链接为https](https://of4jd0bcc.qnssl.com/Https/%E5%9B%BA%E5%AE%9A%E9%93%BE%E6%8E%A5%E6%9B%B4%E6%94%B9.jpg)\n<br>\n配置完https后你会发现打开原有文章会显示404 not found,那是因为网上教程大多为修改.htaccess文件或者修改Apache设置,而本人的服务器后台是LNMP,故网上查找到了以下解决方案:\n修改nginx.conf，在server{下添加下代码\n\n    location / {\n        try_files $uri $uri/ /index.php?$args;\n    }\n    rewrite /wp-admin$ $scheme://$host$uri/ permanent;\n</br>\n\n然后据说WordPress后台的https登录可能会造成循环跳转,**没有这个问题的话请无视**\n把这段代码添加到wp-config.php的php标签之后即可\n\n    $_SERVER['HTTPS'] = 'on';\n    define('FORCE_SSL_LOGIN', true);\n    define('FORCE_SSL_ADMIN', true);\n\n如图: \n![https后台跳转](https://of4jd0bcc.qnssl.com/Https/wordpress%E5%90%8E%E5%8F%B0%E8%AE%BF%E9%97%AE403.png)\n<br>\n\n### 还有什么？\n你可以在[SSL-Test](https://www.ssllabs.com/ssltest/)测试下你的评分\n一开始看到这个分数我是大写的懵逼: \n![SSL-Test-B](https://of4jd0bcc.qnssl.com/Https/SSL-Test-B.jpg)\n</br>\n不能忍,来提高下分数吧,参考[提升服务器 SSL 安全性](https://molun.net/https-access-to-the-whole-site/)\n在ssl文件在下输入：`openssl dhparam -out dhparam.pem 4096`\n\n然后在nginx.conf下添加\n\n    ssl_dhparam /your-path-to/dhparam.pem; #刚才生成的dhparam.pem\n    ssl_session_cache shared:SSL:10m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers \"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA\";\n    \n    add_header Strict-Transport-Security max-age=15768000;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 10s;\n    \n重启Nginx后再测试一次,应该能得到不错的分数:\n![SSL-Test-A+](https://of4jd0bcc.qnssl.com/Https/SSL-Test-A+.jpg)\n\n**然后文章里面所有图片或者文件资源要自行切换到https链接,否则打开文章页面Chrome还是会提示有不安全的资源**\n\n七牛图床的图片用https地址访问：[如何通过SSL的形式来访问七牛云存储上的资源](https://support.qiniu.com/hc/kb/article/73535/)\n\n添加个https域名,然后设置成默认地址,以后访问图片就是https\n\nCDN的话:谁打赏个面包钱,我攒起来上CDN。。。\n<br>\n\n以上,全部,WordPress全站切换到HTTPS结束\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E6%B3%A2%E5%B0%94%E5%BE%B3_alipay.gif?imageView2/1/w/200/h/200\n  [100]:  https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/patapon_wechat.gif?imageView2/1/w/200/h/200","source":"_posts/Wordpress全站切换到HTTPS.md","raw":"---\ntitle: Wordpress全站切换到HTTPS\ndate: 2017-01-31 20:07:30\ntags: 杂\n---\n这也算个大坑了,之前一直被dalao吐槽我的网站为什么还是HTTP,然后我知道原来还有Let's Encrypt这东西,apt-get之后一直pass就可以了,这年头弄个HTTPS比之前省事多了。。。然而最后我用了StartSSL（滑稽\n<br>\n\n<!--more-->\n\n### 首先,来玩玩自行签证\n试试这个懒人版的脚本: [给Nginx配置一个自签名的SSL证书](http://www.liaoxuefeng.com/article/0014189023237367e8d42829de24b6eaf893ca47df4fb5e000)\n然后用Chrome打开站点就会发现证书错误![https-error](https://of4jd0bcc.qnssl.com/Https/https-error.png)(强行黑了一波Chrome233\n<br>\n\n### StartSSL\n注册帐号,然后得到一个ClientLogin证书,导入后就可以直接登录了\n![client-login](https://of4jd0bcc.qnssl.com/Https/StartSSL-client-login.jpg)\n\n配置Validations Wizard之前需要Certificates Wizard,在FreeUser那一栏下面选DV SSL Certificate就好了\n然后按这里操作: [Startssl 现在就启用 HTTPS,免费的！](http://www.vincentguo.cn/default/130.html?flag=recommend)\n\n有一点需要提一下,如果你开启了**域名隐私保护**,那么你需要先关闭这个功能才能接收到验证邮件\n密匙建议放在你wordpress的站点文件夹或者nginx/ssl下面（没有ssl文件夹自己mkdir一个）\n如无意外,我们就拿到一个为期一年的HTTPS证书了,解压证书到你的VPS\n<br>\n\n### 导入证书到站点\n找到nginx.conf这个文件,做如下更改: \n\n    server{\n        listen 80 default_server;\n        listen 443 default ssl; #开启HTTPS\n        ssl on;\n        ssl_certificate /your-path-to/StartSSL颁发给你的.crt; #解压得到的csr文件\n        ssl_certificate_key /your-path-to/your-name.key; #ssl文件夹下自己生成的key\n        \n        #重定向\n        if ($server_port = 80) {\n            return 301 https://$server_name$request_uri;\n        }\n        if ($scheme = http) {\n            return 301 https://$server_name$request_uri;\n        }\n        error_page 497 https://$server_name$request_uri;\n        server_name your-domain; #你的站点地址\n    \n        root  /your-path-to/your-domain; #wordpress下的域名文件夹\n\n重启Nginx: `service nginx restart`\n应该是可以免输入密码的,但是不嫌麻烦的话还是输两次吧,哪天忘了key也是件很蛋疼的事。。。\n\n基本上完成上述步骤后,网站就能够实现全站强制HTTPS访问了。但是按照Chrome的标准的话,此时只能得到一个灰锁或带三角的灰锁而非完全的绿锁。\n**这其中可能有两个原因:**\n    一个是未使用新型加密套件\n 另一个是网站加载了不安全的脚本。前者是服务器的问题,后者是主题的问题\n \n![https站点显示](https://of4jd0bcc.qnssl.com/Https/https%E7%AB%99%E7%82%B9%E5%B1%95%E7%A4%BA.jpg)\n<br>\n\n### WordPress相关设置\n#### 登录后台更改站点固定链接为https\n![更改固定链接为https](https://of4jd0bcc.qnssl.com/Https/%E5%9B%BA%E5%AE%9A%E9%93%BE%E6%8E%A5%E6%9B%B4%E6%94%B9.jpg)\n<br>\n配置完https后你会发现打开原有文章会显示404 not found,那是因为网上教程大多为修改.htaccess文件或者修改Apache设置,而本人的服务器后台是LNMP,故网上查找到了以下解决方案:\n修改nginx.conf，在server{下添加下代码\n\n    location / {\n        try_files $uri $uri/ /index.php?$args;\n    }\n    rewrite /wp-admin$ $scheme://$host$uri/ permanent;\n</br>\n\n然后据说WordPress后台的https登录可能会造成循环跳转,**没有这个问题的话请无视**\n把这段代码添加到wp-config.php的php标签之后即可\n\n    $_SERVER['HTTPS'] = 'on';\n    define('FORCE_SSL_LOGIN', true);\n    define('FORCE_SSL_ADMIN', true);\n\n如图: \n![https后台跳转](https://of4jd0bcc.qnssl.com/Https/wordpress%E5%90%8E%E5%8F%B0%E8%AE%BF%E9%97%AE403.png)\n<br>\n\n### 还有什么？\n你可以在[SSL-Test](https://www.ssllabs.com/ssltest/)测试下你的评分\n一开始看到这个分数我是大写的懵逼: \n![SSL-Test-B](https://of4jd0bcc.qnssl.com/Https/SSL-Test-B.jpg)\n</br>\n不能忍,来提高下分数吧,参考[提升服务器 SSL 安全性](https://molun.net/https-access-to-the-whole-site/)\n在ssl文件在下输入：`openssl dhparam -out dhparam.pem 4096`\n\n然后在nginx.conf下添加\n\n    ssl_dhparam /your-path-to/dhparam.pem; #刚才生成的dhparam.pem\n    ssl_session_cache shared:SSL:10m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers \"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA\";\n    \n    add_header Strict-Transport-Security max-age=15768000;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 10s;\n    \n重启Nginx后再测试一次,应该能得到不错的分数:\n![SSL-Test-A+](https://of4jd0bcc.qnssl.com/Https/SSL-Test-A+.jpg)\n\n**然后文章里面所有图片或者文件资源要自行切换到https链接,否则打开文章页面Chrome还是会提示有不安全的资源**\n\n七牛图床的图片用https地址访问：[如何通过SSL的形式来访问七牛云存储上的资源](https://support.qiniu.com/hc/kb/article/73535/)\n\n添加个https域名,然后设置成默认地址,以后访问图片就是https\n\nCDN的话:谁打赏个面包钱,我攒起来上CDN。。。\n<br>\n\n以上,全部,WordPress全站切换到HTTPS结束\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E6%B3%A2%E5%B0%94%E5%BE%B3_alipay.gif?imageView2/1/w/200/h/200\n  [100]:  https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/patapon_wechat.gif?imageView2/1/w/200/h/200","slug":"Wordpress全站切换到HTTPS","published":1,"updated":"2017-01-31T12:11:52.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv5dy07000lpoogroikfm1x","content":"<p>这也算个大坑了,之前一直被dalao吐槽我的网站为什么还是HTTP,然后我知道原来还有Let’s Encrypt这东西,apt-get之后一直pass就可以了,这年头弄个HTTPS比之前省事多了。。。然而最后我用了StartSSL（滑稽<br><br></p>\n<a id=\"more\"></a>\n<h3 id=\"首先-来玩玩自行签证\"><a href=\"#首先-来玩玩自行签证\" class=\"headerlink\" title=\"首先,来玩玩自行签证\"></a>首先,来玩玩自行签证</h3><p>试试这个懒人版的脚本: <a href=\"http://www.liaoxuefeng.com/article/0014189023237367e8d42829de24b6eaf893ca47df4fb5e000\" target=\"_blank\" rel=\"external\">给Nginx配置一个自签名的SSL证书</a><br>然后用Chrome打开站点就会发现证书错误<img src=\"https://of4jd0bcc.qnssl.com/Https/https-error.png\" alt=\"https-error\">(强行黑了一波Chrome233<br><br></p>\n<h3 id=\"StartSSL\"><a href=\"#StartSSL\" class=\"headerlink\" title=\"StartSSL\"></a>StartSSL</h3><p>注册帐号,然后得到一个ClientLogin证书,导入后就可以直接登录了<br><img src=\"https://of4jd0bcc.qnssl.com/Https/StartSSL-client-login.jpg\" alt=\"client-login\"></p>\n<p>配置Validations Wizard之前需要Certificates Wizard,在FreeUser那一栏下面选DV SSL Certificate就好了<br>然后按这里操作: <a href=\"http://www.vincentguo.cn/default/130.html?flag=recommend\" target=\"_blank\" rel=\"external\">Startssl 现在就启用 HTTPS,免费的！</a></p>\n<p>有一点需要提一下,如果你开启了<strong>域名隐私保护</strong>,那么你需要先关闭这个功能才能接收到验证邮件<br>密匙建议放在你wordpress的站点文件夹或者nginx/ssl下面（没有ssl文件夹自己mkdir一个）<br>如无意外,我们就拿到一个为期一年的HTTPS证书了,解压证书到你的VPS<br><br></p>\n<h3 id=\"导入证书到站点\"><a href=\"#导入证书到站点\" class=\"headerlink\" title=\"导入证书到站点\"></a>导入证书到站点</h3><p>找到nginx.conf这个文件,做如下更改: </p>\n<pre><code>server{\n    listen 80 default_server;\n    listen 443 default ssl; #开启HTTPS\n    ssl on;\n    ssl_certificate /your-path-to/StartSSL颁发给你的.crt; #解压得到的csr文件\n    ssl_certificate_key /your-path-to/your-name.key; #ssl文件夹下自己生成的key\n\n    #重定向\n    if ($server_port = 80) {\n        return 301 https://$server_name$request_uri;\n    }\n    if ($scheme = http) {\n        return 301 https://$server_name$request_uri;\n    }\n    error_page 497 https://$server_name$request_uri;\n    server_name your-domain; #你的站点地址\n\n    root  /your-path-to/your-domain; #wordpress下的域名文件夹\n</code></pre><p>重启Nginx: <code>service nginx restart</code><br>应该是可以免输入密码的,但是不嫌麻烦的话还是输两次吧,哪天忘了key也是件很蛋疼的事。。。</p>\n<p>基本上完成上述步骤后,网站就能够实现全站强制HTTPS访问了。但是按照Chrome的标准的话,此时只能得到一个灰锁或带三角的灰锁而非完全的绿锁。<br><strong>这其中可能有两个原因:</strong><br>    一个是未使用新型加密套件<br> 另一个是网站加载了不安全的脚本。前者是服务器的问题,后者是主题的问题</p>\n<p><img src=\"https://of4jd0bcc.qnssl.com/Https/https%E7%AB%99%E7%82%B9%E5%B1%95%E7%A4%BA.jpg\" alt=\"https站点显示\"><br><br></p>\n<h3 id=\"WordPress相关设置\"><a href=\"#WordPress相关设置\" class=\"headerlink\" title=\"WordPress相关设置\"></a>WordPress相关设置</h3><h4 id=\"登录后台更改站点固定链接为https\"><a href=\"#登录后台更改站点固定链接为https\" class=\"headerlink\" title=\"登录后台更改站点固定链接为https\"></a>登录后台更改站点固定链接为https</h4><p><img src=\"https://of4jd0bcc.qnssl.com/Https/%E5%9B%BA%E5%AE%9A%E9%93%BE%E6%8E%A5%E6%9B%B4%E6%94%B9.jpg\" alt=\"更改固定链接为https\"><br><br><br>配置完https后你会发现打开原有文章会显示404 not found,那是因为网上教程大多为修改.htaccess文件或者修改Apache设置,而本人的服务器后台是LNMP,故网上查找到了以下解决方案:<br>修改nginx.conf，在server{下添加下代码</p>\n<pre><code>location / {\n    try_files $uri $uri/ /index.php?$args;\n}\nrewrite /wp-admin$ $scheme://$host$uri/ permanent;\n</code></pre><p><br></p>\n<p>然后据说WordPress后台的https登录可能会造成循环跳转,<strong>没有这个问题的话请无视</strong><br>把这段代码添加到wp-config.php的php标签之后即可</p>\n<pre><code>$_SERVER[&apos;HTTPS&apos;] = &apos;on&apos;;\ndefine(&apos;FORCE_SSL_LOGIN&apos;, true);\ndefine(&apos;FORCE_SSL_ADMIN&apos;, true);\n</code></pre><p>如图:<br><img src=\"https://of4jd0bcc.qnssl.com/Https/wordpress%E5%90%8E%E5%8F%B0%E8%AE%BF%E9%97%AE403.png\" alt=\"https后台跳转\"><br><br></p>\n<h3 id=\"还有什么？\"><a href=\"#还有什么？\" class=\"headerlink\" title=\"还有什么？\"></a>还有什么？</h3><p>你可以在<a href=\"https://www.ssllabs.com/ssltest/\" target=\"_blank\" rel=\"external\">SSL-Test</a>测试下你的评分<br>一开始看到这个分数我是大写的懵逼:<br><img src=\"https://of4jd0bcc.qnssl.com/Https/SSL-Test-B.jpg\" alt=\"SSL-Test-B\"><br><br><br>不能忍,来提高下分数吧,参考<a href=\"https://molun.net/https-access-to-the-whole-site/\" target=\"_blank\" rel=\"external\">提升服务器 SSL 安全性</a><br>在ssl文件在下输入：<code>openssl dhparam -out dhparam.pem 4096</code></p>\n<p>然后在nginx.conf下添加</p>\n<pre><code>ssl_dhparam /your-path-to/dhparam.pem; #刚才生成的dhparam.pem\nssl_session_cache shared:SSL:10m;\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\nssl_prefer_server_ciphers on;\nssl_ciphers &quot;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&quot;;\n\nadd_header Strict-Transport-Security max-age=15768000;\nssl_stapling on;\nssl_stapling_verify on;\nresolver 8.8.8.8 8.8.4.4 valid=300s;\nresolver_timeout 10s;\n</code></pre><p>重启Nginx后再测试一次,应该能得到不错的分数:<br><img src=\"https://of4jd0bcc.qnssl.com/Https/SSL-Test-A+.jpg\" alt=\"SSL-Test-A+\"></p>\n<p><strong>然后文章里面所有图片或者文件资源要自行切换到https链接,否则打开文章页面Chrome还是会提示有不安全的资源</strong></p>\n<p>七牛图床的图片用https地址访问：<a href=\"https://support.qiniu.com/hc/kb/article/73535/\" target=\"_blank\" rel=\"external\">如何通过SSL的形式来访问七牛云存储上的资源</a></p>\n<p>添加个https域名,然后设置成默认地址,以后访问图片就是https</p>\n<p>CDN的话:谁打赏个面包钱,我攒起来上CDN。。。<br><br></p>\n<p>以上,全部,WordPress全站切换到HTTPS结束</p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E6%B3%A2%E5%B0%94%E5%BE%B3_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/patapon_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>\n","excerpt":"<p>这也算个大坑了,之前一直被dalao吐槽我的网站为什么还是HTTP,然后我知道原来还有Let’s Encrypt这东西,apt-get之后一直pass就可以了,这年头弄个HTTPS比之前省事多了。。。然而最后我用了StartSSL（滑稽<br><br></p>","more":"<h3 id=\"首先-来玩玩自行签证\"><a href=\"#首先-来玩玩自行签证\" class=\"headerlink\" title=\"首先,来玩玩自行签证\"></a>首先,来玩玩自行签证</h3><p>试试这个懒人版的脚本: <a href=\"http://www.liaoxuefeng.com/article/0014189023237367e8d42829de24b6eaf893ca47df4fb5e000\">给Nginx配置一个自签名的SSL证书</a><br>然后用Chrome打开站点就会发现证书错误<img src=\"https://of4jd0bcc.qnssl.com/Https/https-error.png\" alt=\"https-error\">(强行黑了一波Chrome233<br><br></p>\n<h3 id=\"StartSSL\"><a href=\"#StartSSL\" class=\"headerlink\" title=\"StartSSL\"></a>StartSSL</h3><p>注册帐号,然后得到一个ClientLogin证书,导入后就可以直接登录了<br><img src=\"https://of4jd0bcc.qnssl.com/Https/StartSSL-client-login.jpg\" alt=\"client-login\"></p>\n<p>配置Validations Wizard之前需要Certificates Wizard,在FreeUser那一栏下面选DV SSL Certificate就好了<br>然后按这里操作: <a href=\"http://www.vincentguo.cn/default/130.html?flag=recommend\">Startssl 现在就启用 HTTPS,免费的！</a></p>\n<p>有一点需要提一下,如果你开启了<strong>域名隐私保护</strong>,那么你需要先关闭这个功能才能接收到验证邮件<br>密匙建议放在你wordpress的站点文件夹或者nginx/ssl下面（没有ssl文件夹自己mkdir一个）<br>如无意外,我们就拿到一个为期一年的HTTPS证书了,解压证书到你的VPS<br><br></p>\n<h3 id=\"导入证书到站点\"><a href=\"#导入证书到站点\" class=\"headerlink\" title=\"导入证书到站点\"></a>导入证书到站点</h3><p>找到nginx.conf这个文件,做如下更改: </p>\n<pre><code>server{\n    listen 80 default_server;\n    listen 443 default ssl; #开启HTTPS\n    ssl on;\n    ssl_certificate /your-path-to/StartSSL颁发给你的.crt; #解压得到的csr文件\n    ssl_certificate_key /your-path-to/your-name.key; #ssl文件夹下自己生成的key\n\n    #重定向\n    if ($server_port = 80) {\n        return 301 https://$server_name$request_uri;\n    }\n    if ($scheme = http) {\n        return 301 https://$server_name$request_uri;\n    }\n    error_page 497 https://$server_name$request_uri;\n    server_name your-domain; #你的站点地址\n\n    root  /your-path-to/your-domain; #wordpress下的域名文件夹\n</code></pre><p>重启Nginx: <code>service nginx restart</code><br>应该是可以免输入密码的,但是不嫌麻烦的话还是输两次吧,哪天忘了key也是件很蛋疼的事。。。</p>\n<p>基本上完成上述步骤后,网站就能够实现全站强制HTTPS访问了。但是按照Chrome的标准的话,此时只能得到一个灰锁或带三角的灰锁而非完全的绿锁。<br><strong>这其中可能有两个原因:</strong><br>    一个是未使用新型加密套件<br> 另一个是网站加载了不安全的脚本。前者是服务器的问题,后者是主题的问题</p>\n<p><img src=\"https://of4jd0bcc.qnssl.com/Https/https%E7%AB%99%E7%82%B9%E5%B1%95%E7%A4%BA.jpg\" alt=\"https站点显示\"><br><br></p>\n<h3 id=\"WordPress相关设置\"><a href=\"#WordPress相关设置\" class=\"headerlink\" title=\"WordPress相关设置\"></a>WordPress相关设置</h3><h4 id=\"登录后台更改站点固定链接为https\"><a href=\"#登录后台更改站点固定链接为https\" class=\"headerlink\" title=\"登录后台更改站点固定链接为https\"></a>登录后台更改站点固定链接为https</h4><p><img src=\"https://of4jd0bcc.qnssl.com/Https/%E5%9B%BA%E5%AE%9A%E9%93%BE%E6%8E%A5%E6%9B%B4%E6%94%B9.jpg\" alt=\"更改固定链接为https\"><br><br><br>配置完https后你会发现打开原有文章会显示404 not found,那是因为网上教程大多为修改.htaccess文件或者修改Apache设置,而本人的服务器后台是LNMP,故网上查找到了以下解决方案:<br>修改nginx.conf，在server{下添加下代码</p>\n<pre><code>location / {\n    try_files $uri $uri/ /index.php?$args;\n}\nrewrite /wp-admin$ $scheme://$host$uri/ permanent;\n</code></pre><p></br></p>\n<p>然后据说WordPress后台的https登录可能会造成循环跳转,<strong>没有这个问题的话请无视</strong><br>把这段代码添加到wp-config.php的php标签之后即可</p>\n<pre><code>$_SERVER[&apos;HTTPS&apos;] = &apos;on&apos;;\ndefine(&apos;FORCE_SSL_LOGIN&apos;, true);\ndefine(&apos;FORCE_SSL_ADMIN&apos;, true);\n</code></pre><p>如图:<br><img src=\"https://of4jd0bcc.qnssl.com/Https/wordpress%E5%90%8E%E5%8F%B0%E8%AE%BF%E9%97%AE403.png\" alt=\"https后台跳转\"><br><br></p>\n<h3 id=\"还有什么？\"><a href=\"#还有什么？\" class=\"headerlink\" title=\"还有什么？\"></a>还有什么？</h3><p>你可以在<a href=\"https://www.ssllabs.com/ssltest/\">SSL-Test</a>测试下你的评分<br>一开始看到这个分数我是大写的懵逼:<br><img src=\"https://of4jd0bcc.qnssl.com/Https/SSL-Test-B.jpg\" alt=\"SSL-Test-B\"><br></br><br>不能忍,来提高下分数吧,参考<a href=\"https://molun.net/https-access-to-the-whole-site/\">提升服务器 SSL 安全性</a><br>在ssl文件在下输入：<code>openssl dhparam -out dhparam.pem 4096</code></p>\n<p>然后在nginx.conf下添加</p>\n<pre><code>ssl_dhparam /your-path-to/dhparam.pem; #刚才生成的dhparam.pem\nssl_session_cache shared:SSL:10m;\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\nssl_prefer_server_ciphers on;\nssl_ciphers &quot;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&quot;;\n\nadd_header Strict-Transport-Security max-age=15768000;\nssl_stapling on;\nssl_stapling_verify on;\nresolver 8.8.8.8 8.8.4.4 valid=300s;\nresolver_timeout 10s;\n</code></pre><p>重启Nginx后再测试一次,应该能得到不错的分数:<br><img src=\"https://of4jd0bcc.qnssl.com/Https/SSL-Test-A+.jpg\" alt=\"SSL-Test-A+\"></p>\n<p><strong>然后文章里面所有图片或者文件资源要自行切换到https链接,否则打开文章页面Chrome还是会提示有不安全的资源</strong></p>\n<p>七牛图床的图片用https地址访问：<a href=\"https://support.qiniu.com/hc/kb/article/73535/\">如何通过SSL的形式来访问七牛云存储上的资源</a></p>\n<p>添加个https域名,然后设置成默认地址,以后访问图片就是https</p>\n<p>CDN的话:谁打赏个面包钱,我攒起来上CDN。。。<br><br></p>\n<p>以上,全部,WordPress全站切换到HTTPS结束</p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E6%B3%A2%E5%B0%94%E5%BE%B3_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/patapon_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>"},{"title":"关于Python入门以及爬虫的一些想法","date":"2017-01-18T15:58:10.000Z","_content":"\n### [在这之前请认真看看这篇文章][1]\n\n其中一句我很赞同：**遗憾地是，很多初学者的问题是：想对一门技术快速入门，却使用了系统学习的方法，还未入门，便倒在了艰苦修行的路上**\n<br>\n\n<!--more-->\n\n### ？？？\n>为什么C语言的书貌似翻了几次下来，还是从入门到放弃？\n 为什么学了xx跟没学一样？\n 我应该去学这个吗？\n 学这个有什么用？\n \n<br>\n\n### 为什么是Python\n    友好，优雅，好学\n**Life Is Short, U Need Python**\n<br>\n\n### 我先看完Python再来写爬虫？\n\n如果你只想写一写简单的爬虫，不要炫技不考虑爬虫效率，你只需要掌握：\n\n1. 数据类型和变量\n2. 字符串和编码\n3. 使用list和tuple\n4. 条件判断、循环\n5. 使用dict和set\n\n<br><br>\n**你最大的问题是想得太多，而做得太少**\n\n1. 直奔主题，学了什么用什么\n2. 不懂就查，理解不能就跳过，回来再看\n3. 不要迷失\n4. 动手，反馈，总结\n\n> 第三点是要注意的：在入门的过程中会遇到越来越多的新知识，而这些新知识或许会令你困惑，或者新奇。一路查下去的结果就是你忘了自己到底要干什么\n\n<br>\n\n### 直接动手，看看Python近乎零基础的人稍稍Google之后来写出来的爬虫长什么样\n    import requests  # 导入requests库\n    url = 'http://sports.sina.com.cn/nba/'  # 要爬取的地址\n    print(requests.get(url).content)  # 打印出网页源代码\n> 这就是最简单的爬虫，3行\n\n这时候你会问：requests库是什么，源代码Chrome右键就有，为什么还要写三行Python代码？\n<br>\n\n### 让我们继续\n打开源代码大概是这样子的\n![2][2]\n<br>\nQ：假如我们要获取勇士队伍的所有新闻标题和链接，你会一行一行的Ctrl+C然后Ctrl+V么？\n![3][3]\n<br>\nA：当然不会啊。网页源代码，找到关键字，一排下来全都是，去掉那些标签属性不就可以了\n<br>\nQ：那如果网页有很多新闻呢？如果每一个板块的位置不一样呢？如果文章还有许多图片需要保存呢？\nA：。。。。。。\n![4][4]\n<br>\n\n### 改进一下代码\n\n    import requests\n    from lxml import etree\n    url = 'http://sports.sina.com.cn/nba/'\n    rsp = etree.HTML(requests.get(url).content)\n    title = rsp.xpath('//li[@class=\"item\"][5]/a/text()')\n    link = rsp.xpath('//li[@class=\"item\"][6]/a/@href')\n    for key, value in (zip(title, link)):\n        print(key + ': ' + value)\n\n![5][5]\n<br>\nQ：第二行是什麽？\nA：导入了新库：lxml，使用了xpath\n<br>\nQ：为什么不用正则表达式？\nA：正则表达式对新手来说实在是充满恶意。针对复杂的情况，仅靠正则匹配规则会浪费很多时间，而且我实际情况中用的最多还是(.*?)这种基础的用法\n<br>\nQ：Xpath怎么用？zip又是什么？\nA：不懂？赶紧去查啊\n<br>\n\n通过以上例子，你大概能猜到我想表达什么\n\n> 我对xx感兴趣，我要解决一个问题，目标有了。好，直接动手\n\n> Python也好，爬虫也好，快速学习编程语言也好，有兴趣只是第一步。当你在解决问题的时候将兴趣持续下来，拥有**很强目的性**的去动手，去实践，去踩坑：踩坑也是一种学习过程。\n\n> 这样不断地练习和获取反馈，你会学习的很快。很多非系统的知识和能力（甚至洞见）就是这样通过不断练习和试错在下意识间学到的----它们来得如此悄无声息，以至于除你之外，别人都将其视为你的一种天赋。\n\n> 最后总结：做好分类，用Markdown记录动手过程，OneNote收集你在动手过程无法解决的问题，如果你还能尝试去写出教程，去跟别人讲明白你学的东西，那么再回头看看一开始没能解决的问题：似乎又没有这么难理解了\n<br>\n\n### 兴趣?\n*如果是妹纸的话请自行查询感兴趣内容，...⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄....不要点开，不要打我*\n\n[妹子图][6]\n[Mzitu][7]\n[煎蛋网ooxx][8]\n>有动力了没？目的性够强了没？这下不难了吧？\n\n\n下一篇文章我再详细讲Python爬虫，你先动手写个文本爬虫，学得快的话或许你已经能用urllib.urlretrieve()模块下载图片了，但还不够。。。\n\n  [1]: http://mp.weixin.qq.com/s/XLP6K4Z4UwX8bLYeglTA_g\n  [2]: https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E6%BA%90%E4%BB%A3%E7%A0%81.png\n[3]: https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4.png\n  [4]:https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E5%8B%87%E5%A3%AB%E9%98%9F.png \n  [5]: https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E6%A0%87%E9%A2%98-%E9%93%BE%E6%8E%A5.png\n  [6]: http://meizitu.com/\n  [7]: http://www.mzitu.com\n  [8]: http://jandan.net/ooxx\n\n<br><br>\n> **这个打赏二维码好像没什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/shakalaka_ailipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\n\n","source":"_posts/关于Python入门以及爬虫的一些想法.md","raw":"---\ntitle: 关于Python入门以及爬虫的一些想法\ndate: 2017-01-18 23:58:10\ntags: 爬虫\n---\n\n### [在这之前请认真看看这篇文章][1]\n\n其中一句我很赞同：**遗憾地是，很多初学者的问题是：想对一门技术快速入门，却使用了系统学习的方法，还未入门，便倒在了艰苦修行的路上**\n<br>\n\n<!--more-->\n\n### ？？？\n>为什么C语言的书貌似翻了几次下来，还是从入门到放弃？\n 为什么学了xx跟没学一样？\n 我应该去学这个吗？\n 学这个有什么用？\n \n<br>\n\n### 为什么是Python\n    友好，优雅，好学\n**Life Is Short, U Need Python**\n<br>\n\n### 我先看完Python再来写爬虫？\n\n如果你只想写一写简单的爬虫，不要炫技不考虑爬虫效率，你只需要掌握：\n\n1. 数据类型和变量\n2. 字符串和编码\n3. 使用list和tuple\n4. 条件判断、循环\n5. 使用dict和set\n\n<br><br>\n**你最大的问题是想得太多，而做得太少**\n\n1. 直奔主题，学了什么用什么\n2. 不懂就查，理解不能就跳过，回来再看\n3. 不要迷失\n4. 动手，反馈，总结\n\n> 第三点是要注意的：在入门的过程中会遇到越来越多的新知识，而这些新知识或许会令你困惑，或者新奇。一路查下去的结果就是你忘了自己到底要干什么\n\n<br>\n\n### 直接动手，看看Python近乎零基础的人稍稍Google之后来写出来的爬虫长什么样\n    import requests  # 导入requests库\n    url = 'http://sports.sina.com.cn/nba/'  # 要爬取的地址\n    print(requests.get(url).content)  # 打印出网页源代码\n> 这就是最简单的爬虫，3行\n\n这时候你会问：requests库是什么，源代码Chrome右键就有，为什么还要写三行Python代码？\n<br>\n\n### 让我们继续\n打开源代码大概是这样子的\n![2][2]\n<br>\nQ：假如我们要获取勇士队伍的所有新闻标题和链接，你会一行一行的Ctrl+C然后Ctrl+V么？\n![3][3]\n<br>\nA：当然不会啊。网页源代码，找到关键字，一排下来全都是，去掉那些标签属性不就可以了\n<br>\nQ：那如果网页有很多新闻呢？如果每一个板块的位置不一样呢？如果文章还有许多图片需要保存呢？\nA：。。。。。。\n![4][4]\n<br>\n\n### 改进一下代码\n\n    import requests\n    from lxml import etree\n    url = 'http://sports.sina.com.cn/nba/'\n    rsp = etree.HTML(requests.get(url).content)\n    title = rsp.xpath('//li[@class=\"item\"][5]/a/text()')\n    link = rsp.xpath('//li[@class=\"item\"][6]/a/@href')\n    for key, value in (zip(title, link)):\n        print(key + ': ' + value)\n\n![5][5]\n<br>\nQ：第二行是什麽？\nA：导入了新库：lxml，使用了xpath\n<br>\nQ：为什么不用正则表达式？\nA：正则表达式对新手来说实在是充满恶意。针对复杂的情况，仅靠正则匹配规则会浪费很多时间，而且我实际情况中用的最多还是(.*?)这种基础的用法\n<br>\nQ：Xpath怎么用？zip又是什么？\nA：不懂？赶紧去查啊\n<br>\n\n通过以上例子，你大概能猜到我想表达什么\n\n> 我对xx感兴趣，我要解决一个问题，目标有了。好，直接动手\n\n> Python也好，爬虫也好，快速学习编程语言也好，有兴趣只是第一步。当你在解决问题的时候将兴趣持续下来，拥有**很强目的性**的去动手，去实践，去踩坑：踩坑也是一种学习过程。\n\n> 这样不断地练习和获取反馈，你会学习的很快。很多非系统的知识和能力（甚至洞见）就是这样通过不断练习和试错在下意识间学到的----它们来得如此悄无声息，以至于除你之外，别人都将其视为你的一种天赋。\n\n> 最后总结：做好分类，用Markdown记录动手过程，OneNote收集你在动手过程无法解决的问题，如果你还能尝试去写出教程，去跟别人讲明白你学的东西，那么再回头看看一开始没能解决的问题：似乎又没有这么难理解了\n<br>\n\n### 兴趣?\n*如果是妹纸的话请自行查询感兴趣内容，...⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄....不要点开，不要打我*\n\n[妹子图][6]\n[Mzitu][7]\n[煎蛋网ooxx][8]\n>有动力了没？目的性够强了没？这下不难了吧？\n\n\n下一篇文章我再详细讲Python爬虫，你先动手写个文本爬虫，学得快的话或许你已经能用urllib.urlretrieve()模块下载图片了，但还不够。。。\n\n  [1]: http://mp.weixin.qq.com/s/XLP6K4Z4UwX8bLYeglTA_g\n  [2]: https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E6%BA%90%E4%BB%A3%E7%A0%81.png\n[3]: https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4.png\n  [4]:https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E5%8B%87%E5%A3%AB%E9%98%9F.png \n  [5]: https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E6%A0%87%E9%A2%98-%E9%93%BE%E6%8E%A5.png\n  [6]: http://meizitu.com/\n  [7]: http://www.mzitu.com\n  [8]: http://jandan.net/ooxx\n\n<br><br>\n> **这个打赏二维码好像没什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/shakalaka_ailipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\n\n","slug":"关于Python入门以及爬虫的一些想法","published":1,"updated":"2017-01-18T21:14:49.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv5dy09000npoogkyo81i44","content":"<h3 id=\"在这之前请认真看看这篇文章\"><a href=\"#在这之前请认真看看这篇文章\" class=\"headerlink\" title=\"在这之前请认真看看这篇文章\"></a><a href=\"http://mp.weixin.qq.com/s/XLP6K4Z4UwX8bLYeglTA_g\" target=\"_blank\" rel=\"external\">在这之前请认真看看这篇文章</a></h3><p>其中一句我很赞同：<strong>遗憾地是，很多初学者的问题是：想对一门技术快速入门，却使用了系统学习的方法，还未入门，便倒在了艰苦修行的路上</strong><br><br></p>\n<a id=\"more\"></a>\n<h3 id=\"？？？\"><a href=\"#？？？\" class=\"headerlink\" title=\"？？？\"></a>？？？</h3><blockquote>\n<p>为什么C语言的书貌似翻了几次下来，还是从入门到放弃？<br> 为什么学了xx跟没学一样？<br> 我应该去学这个吗？<br> 学这个有什么用？</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"为什么是Python\"><a href=\"#为什么是Python\" class=\"headerlink\" title=\"为什么是Python\"></a>为什么是Python</h3><pre><code>友好，优雅，好学\n</code></pre><p><strong>Life Is Short, U Need Python</strong><br><br></p>\n<h3 id=\"我先看完Python再来写爬虫？\"><a href=\"#我先看完Python再来写爬虫？\" class=\"headerlink\" title=\"我先看完Python再来写爬虫？\"></a>我先看完Python再来写爬虫？</h3><p>如果你只想写一写简单的爬虫，不要炫技不考虑爬虫效率，你只需要掌握：</p>\n<ol>\n<li>数据类型和变量</li>\n<li>字符串和编码</li>\n<li>使用list和tuple</li>\n<li>条件判断、循环</li>\n<li>使用dict和set</li>\n</ol>\n<p><br><br><br><strong>你最大的问题是想得太多，而做得太少</strong></p>\n<ol>\n<li>直奔主题，学了什么用什么</li>\n<li>不懂就查，理解不能就跳过，回来再看</li>\n<li>不要迷失</li>\n<li>动手，反馈，总结</li>\n</ol>\n<blockquote>\n<p>第三点是要注意的：在入门的过程中会遇到越来越多的新知识，而这些新知识或许会令你困惑，或者新奇。一路查下去的结果就是你忘了自己到底要干什么</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"直接动手，看看Python近乎零基础的人稍稍Google之后来写出来的爬虫长什么样\"><a href=\"#直接动手，看看Python近乎零基础的人稍稍Google之后来写出来的爬虫长什么样\" class=\"headerlink\" title=\"直接动手，看看Python近乎零基础的人稍稍Google之后来写出来的爬虫长什么样\"></a>直接动手，看看Python近乎零基础的人稍稍Google之后来写出来的爬虫长什么样</h3><pre><code>import requests  # 导入requests库\nurl = &apos;http://sports.sina.com.cn/nba/&apos;  # 要爬取的地址\nprint(requests.get(url).content)  # 打印出网页源代码\n</code></pre><blockquote>\n<p>这就是最简单的爬虫，3行</p>\n</blockquote>\n<p>这时候你会问：requests库是什么，源代码Chrome右键就有，为什么还要写三行Python代码？<br><br></p>\n<h3 id=\"让我们继续\"><a href=\"#让我们继续\" class=\"headerlink\" title=\"让我们继续\"></a>让我们继续</h3><p>打开源代码大概是这样子的<br><img src=\"https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E6%BA%90%E4%BB%A3%E7%A0%81.png\" alt=\"2\"><br><br><br>Q：假如我们要获取勇士队伍的所有新闻标题和链接，你会一行一行的Ctrl+C然后Ctrl+V么？<br><img src=\"https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4.png\" alt=\"3\"><br><br><br>A：当然不会啊。网页源代码，找到关键字，一排下来全都是，去掉那些标签属性不就可以了<br><br><br>Q：那如果网页有很多新闻呢？如果每一个板块的位置不一样呢？如果文章还有许多图片需要保存呢？<br>A：。。。。。。<br><img src=\"https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E5%8B%87%E5%A3%AB%E9%98%9F.png\" alt=\"4\"><br><br></p>\n<h3 id=\"改进一下代码\"><a href=\"#改进一下代码\" class=\"headerlink\" title=\"改进一下代码\"></a>改进一下代码</h3><pre><code>import requests\nfrom lxml import etree\nurl = &apos;http://sports.sina.com.cn/nba/&apos;\nrsp = etree.HTML(requests.get(url).content)\ntitle = rsp.xpath(&apos;//li[@class=&quot;item&quot;][5]/a/text()&apos;)\nlink = rsp.xpath(&apos;//li[@class=&quot;item&quot;][6]/a/@href&apos;)\nfor key, value in (zip(title, link)):\n    print(key + &apos;: &apos; + value)\n</code></pre><p><img src=\"https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E6%A0%87%E9%A2%98-%E9%93%BE%E6%8E%A5.png\" alt=\"5\"><br><br><br>Q：第二行是什麽？<br>A：导入了新库：lxml，使用了xpath<br><br><br>Q：为什么不用正则表达式？<br>A：正则表达式对新手来说实在是充满恶意。针对复杂的情况，仅靠正则匹配规则会浪费很多时间，而且我实际情况中用的最多还是(.*?)这种基础的用法<br><br><br>Q：Xpath怎么用？zip又是什么？<br>A：不懂？赶紧去查啊<br><br></p>\n<p>通过以上例子，你大概能猜到我想表达什么</p>\n<blockquote>\n<p>我对xx感兴趣，我要解决一个问题，目标有了。好，直接动手</p>\n<p>Python也好，爬虫也好，快速学习编程语言也好，有兴趣只是第一步。当你在解决问题的时候将兴趣持续下来，拥有<strong>很强目的性</strong>的去动手，去实践，去踩坑：踩坑也是一种学习过程。</p>\n<p>这样不断地练习和获取反馈，你会学习的很快。很多非系统的知识和能力（甚至洞见）就是这样通过不断练习和试错在下意识间学到的—-它们来得如此悄无声息，以至于除你之外，别人都将其视为你的一种天赋。</p>\n<p>最后总结：做好分类，用Markdown记录动手过程，OneNote收集你在动手过程无法解决的问题，如果你还能尝试去写出教程，去跟别人讲明白你学的东西，那么再回头看看一开始没能解决的问题：似乎又没有这么难理解了<br><br></p>\n</blockquote>\n<h3 id=\"兴趣\"><a href=\"#兴趣\" class=\"headerlink\" title=\"兴趣?\"></a>兴趣?</h3><p><em>如果是妹纸的话请自行查询感兴趣内容，…⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄….不要点开，不要打我</em></p>\n<p><a href=\"http://meizitu.com/\" target=\"_blank\" rel=\"external\">妹子图</a><br><a href=\"http://www.mzitu.com\" target=\"_blank\" rel=\"external\">Mzitu</a><br><a href=\"http://jandan.net/ooxx\" target=\"_blank\" rel=\"external\">煎蛋网ooxx</a></p>\n<blockquote>\n<p>有动力了没？目的性够强了没？这下不难了吧？</p>\n</blockquote>\n<p>下一篇文章我再详细讲Python爬虫，你先动手写个文本爬虫，学得快的话或许你已经能用urllib.urlretrieve()模块下载图片了，但还不够。。。</p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像没什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/shakalaka_ailipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>\n","excerpt":"<h3 id=\"在这之前请认真看看这篇文章\"><a href=\"#在这之前请认真看看这篇文章\" class=\"headerlink\" title=\"在这之前请认真看看这篇文章\"></a><a href=\"http://mp.weixin.qq.com/s/XLP6K4Z4UwX8bLYeglTA_g\">在这之前请认真看看这篇文章</a></h3><p>其中一句我很赞同：<strong>遗憾地是，很多初学者的问题是：想对一门技术快速入门，却使用了系统学习的方法，还未入门，便倒在了艰苦修行的路上</strong><br><br></p>","more":"<h3 id=\"？？？\"><a href=\"#？？？\" class=\"headerlink\" title=\"？？？\"></a>？？？</h3><blockquote>\n<p>为什么C语言的书貌似翻了几次下来，还是从入门到放弃？<br> 为什么学了xx跟没学一样？<br> 我应该去学这个吗？<br> 学这个有什么用？</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"为什么是Python\"><a href=\"#为什么是Python\" class=\"headerlink\" title=\"为什么是Python\"></a>为什么是Python</h3><pre><code>友好，优雅，好学\n</code></pre><p><strong>Life Is Short, U Need Python</strong><br><br></p>\n<h3 id=\"我先看完Python再来写爬虫？\"><a href=\"#我先看完Python再来写爬虫？\" class=\"headerlink\" title=\"我先看完Python再来写爬虫？\"></a>我先看完Python再来写爬虫？</h3><p>如果你只想写一写简单的爬虫，不要炫技不考虑爬虫效率，你只需要掌握：</p>\n<ol>\n<li>数据类型和变量</li>\n<li>字符串和编码</li>\n<li>使用list和tuple</li>\n<li>条件判断、循环</li>\n<li>使用dict和set</li>\n</ol>\n<p><br><br><br><strong>你最大的问题是想得太多，而做得太少</strong></p>\n<ol>\n<li>直奔主题，学了什么用什么</li>\n<li>不懂就查，理解不能就跳过，回来再看</li>\n<li>不要迷失</li>\n<li>动手，反馈，总结</li>\n</ol>\n<blockquote>\n<p>第三点是要注意的：在入门的过程中会遇到越来越多的新知识，而这些新知识或许会令你困惑，或者新奇。一路查下去的结果就是你忘了自己到底要干什么</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"直接动手，看看Python近乎零基础的人稍稍Google之后来写出来的爬虫长什么样\"><a href=\"#直接动手，看看Python近乎零基础的人稍稍Google之后来写出来的爬虫长什么样\" class=\"headerlink\" title=\"直接动手，看看Python近乎零基础的人稍稍Google之后来写出来的爬虫长什么样\"></a>直接动手，看看Python近乎零基础的人稍稍Google之后来写出来的爬虫长什么样</h3><pre><code>import requests  # 导入requests库\nurl = &apos;http://sports.sina.com.cn/nba/&apos;  # 要爬取的地址\nprint(requests.get(url).content)  # 打印出网页源代码\n</code></pre><blockquote>\n<p>这就是最简单的爬虫，3行</p>\n</blockquote>\n<p>这时候你会问：requests库是什么，源代码Chrome右键就有，为什么还要写三行Python代码？<br><br></p>\n<h3 id=\"让我们继续\"><a href=\"#让我们继续\" class=\"headerlink\" title=\"让我们继续\"></a>让我们继续</h3><p>打开源代码大概是这样子的<br><img src=\"https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E6%BA%90%E4%BB%A3%E7%A0%81.png\" alt=\"2\"><br><br><br>Q：假如我们要获取勇士队伍的所有新闻标题和链接，你会一行一行的Ctrl+C然后Ctrl+V么？<br><img src=\"https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4.png\" alt=\"3\"><br><br><br>A：当然不会啊。网页源代码，找到关键字，一排下来全都是，去掉那些标签属性不就可以了<br><br><br>Q：那如果网页有很多新闻呢？如果每一个板块的位置不一样呢？如果文章还有许多图片需要保存呢？<br>A：。。。。。。<br><img src=\"https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E5%8B%87%E5%A3%AB%E9%98%9F.png\" alt=\"4\"><br><br></p>\n<h3 id=\"改进一下代码\"><a href=\"#改进一下代码\" class=\"headerlink\" title=\"改进一下代码\"></a>改进一下代码</h3><pre><code>import requests\nfrom lxml import etree\nurl = &apos;http://sports.sina.com.cn/nba/&apos;\nrsp = etree.HTML(requests.get(url).content)\ntitle = rsp.xpath(&apos;//li[@class=&quot;item&quot;][5]/a/text()&apos;)\nlink = rsp.xpath(&apos;//li[@class=&quot;item&quot;][6]/a/@href&apos;)\nfor key, value in (zip(title, link)):\n    print(key + &apos;: &apos; + value)\n</code></pre><p><img src=\"https://of4jd0bcc.qnssl.com/python%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/%E6%A0%87%E9%A2%98-%E9%93%BE%E6%8E%A5.png\" alt=\"5\"><br><br><br>Q：第二行是什麽？<br>A：导入了新库：lxml，使用了xpath<br><br><br>Q：为什么不用正则表达式？<br>A：正则表达式对新手来说实在是充满恶意。针对复杂的情况，仅靠正则匹配规则会浪费很多时间，而且我实际情况中用的最多还是(.*?)这种基础的用法<br><br><br>Q：Xpath怎么用？zip又是什么？<br>A：不懂？赶紧去查啊<br><br></p>\n<p>通过以上例子，你大概能猜到我想表达什么</p>\n<blockquote>\n<p>我对xx感兴趣，我要解决一个问题，目标有了。好，直接动手</p>\n<p>Python也好，爬虫也好，快速学习编程语言也好，有兴趣只是第一步。当你在解决问题的时候将兴趣持续下来，拥有<strong>很强目的性</strong>的去动手，去实践，去踩坑：踩坑也是一种学习过程。</p>\n<p>这样不断地练习和获取反馈，你会学习的很快。很多非系统的知识和能力（甚至洞见）就是这样通过不断练习和试错在下意识间学到的—-它们来得如此悄无声息，以至于除你之外，别人都将其视为你的一种天赋。</p>\n<p>最后总结：做好分类，用Markdown记录动手过程，OneNote收集你在动手过程无法解决的问题，如果你还能尝试去写出教程，去跟别人讲明白你学的东西，那么再回头看看一开始没能解决的问题：似乎又没有这么难理解了<br><br></p>\n</blockquote>\n<h3 id=\"兴趣\"><a href=\"#兴趣\" class=\"headerlink\" title=\"兴趣?\"></a>兴趣?</h3><p><em>如果是妹纸的话请自行查询感兴趣内容，…⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄….不要点开，不要打我</em></p>\n<p><a href=\"http://meizitu.com/\">妹子图</a><br><a href=\"http://www.mzitu.com\">Mzitu</a><br><a href=\"http://jandan.net/ooxx\">煎蛋网ooxx</a></p>\n<blockquote>\n<p>有动力了没？目的性够强了没？这下不难了吧？</p>\n</blockquote>\n<p>下一篇文章我再详细讲Python爬虫，你先动手写个文本爬虫，学得快的话或许你已经能用urllib.urlretrieve()模块下载图片了，但还不够。。。</p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像没什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/shakalaka_ailipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>"},{"title":"视频下载神器:You-Get","date":"2017-01-16T07:00:10.000Z","_content":"\n#### [项目地址][1]\n<br>\n#### [安装FFPEG][2]\n<br>\n\n<!--more-->\n\n> xpath获取我推荐一个Chrome的插件: **Xpath Finder**\n\n#### 效果\n![Xpath-title][3]\n<br>\n![Xpath-link][4]\n<br>\n\n#### 用Python实战下\n\n    # !/usr/bin/env python\n    # -*- coding:utf-8 -*-\n    \n    import os\n    import multiprocessing\n    \n    links = []\n    for x in open('F:\\\\Aria2_Data\\\\you-get\\\\大神岛出云\\\\download.txt', 'r'):\n        links.append(x.strip('\\n'))\n    \n    \n    def get(url):\n        command ='you-get ' + url\n        # print(command)\n        os.system(command)\n    \n    \n    def run():  # 多进程\n        multiprocessing.freeze_support()\n        pool = multiprocessing.Pool(multiprocessing.cpu_count())\n        results = pool.map_async(get, links)\n        pool.close()\n        pool.join()\n    \n    \n    if __name__ == '__main__':\n        run()\n<br>\n\n#### Result\n![Result][5]\n\n\n  [1]: https://github.com/soimort/you-get\n  [2]: http://adaptivesamples.com/how-to-install-ffmpeg-on-windows/\n  [3]: https://of4jd0bcc.qnssl.com/Xpath/xpath-title.png\n  [4]: https://of4jd0bcc.qnssl.com/Xpath/xpath-link.png\n  [5]: https://of4jd0bcc.qnssl.com/Xpath/finished.png\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E7%86%8A%E6%9C%AC%E7%86%8A%E6%89%93%E9%BC%93_alipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200\n","source":"_posts/视频下载神器-You-Get.md","raw":"---\ntitle: '视频下载神器:You-Get'\ndate: 2017-01-16 15:00:10\ntags: 爬虫\n---\n\n#### [项目地址][1]\n<br>\n#### [安装FFPEG][2]\n<br>\n\n<!--more-->\n\n> xpath获取我推荐一个Chrome的插件: **Xpath Finder**\n\n#### 效果\n![Xpath-title][3]\n<br>\n![Xpath-link][4]\n<br>\n\n#### 用Python实战下\n\n    # !/usr/bin/env python\n    # -*- coding:utf-8 -*-\n    \n    import os\n    import multiprocessing\n    \n    links = []\n    for x in open('F:\\\\Aria2_Data\\\\you-get\\\\大神岛出云\\\\download.txt', 'r'):\n        links.append(x.strip('\\n'))\n    \n    \n    def get(url):\n        command ='you-get ' + url\n        # print(command)\n        os.system(command)\n    \n    \n    def run():  # 多进程\n        multiprocessing.freeze_support()\n        pool = multiprocessing.Pool(multiprocessing.cpu_count())\n        results = pool.map_async(get, links)\n        pool.close()\n        pool.join()\n    \n    \n    if __name__ == '__main__':\n        run()\n<br>\n\n#### Result\n![Result][5]\n\n\n  [1]: https://github.com/soimort/you-get\n  [2]: http://adaptivesamples.com/how-to-install-ffmpeg-on-windows/\n  [3]: https://of4jd0bcc.qnssl.com/Xpath/xpath-title.png\n  [4]: https://of4jd0bcc.qnssl.com/Xpath/xpath-link.png\n  [5]: https://of4jd0bcc.qnssl.com/Xpath/finished.png\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E7%86%8A%E6%9C%AC%E7%86%8A%E6%89%93%E9%BC%93_alipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200\n","slug":"视频下载神器-You-Get","published":1,"updated":"2017-01-31T10:18:19.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv5dy0a000ppoog6x73rjtt","content":"<h4 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a><a href=\"https://github.com/soimort/you-get\" target=\"_blank\" rel=\"external\">项目地址</a></h4><p><br></p>\n<h4 id=\"安装FFPEG\"><a href=\"#安装FFPEG\" class=\"headerlink\" title=\"安装FFPEG\"></a><a href=\"http://adaptivesamples.com/how-to-install-ffmpeg-on-windows/\" target=\"_blank\" rel=\"external\">安装FFPEG</a></h4><p><br></p>\n<a id=\"more\"></a>\n<blockquote>\n<p>xpath获取我推荐一个Chrome的插件: <strong>Xpath Finder</strong></p>\n</blockquote>\n<h4 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h4><p><img src=\"https://of4jd0bcc.qnssl.com/Xpath/xpath-title.png\" alt=\"Xpath-title\"><br><br><br><img src=\"https://of4jd0bcc.qnssl.com/Xpath/xpath-link.png\" alt=\"Xpath-link\"><br><br></p>\n<h4 id=\"用Python实战下\"><a href=\"#用Python实战下\" class=\"headerlink\" title=\"用Python实战下\"></a>用Python实战下</h4><pre><code># !/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nimport os\nimport multiprocessing\n\nlinks = []\nfor x in open(&apos;F:\\\\Aria2_Data\\\\you-get\\\\大神岛出云\\\\download.txt&apos;, &apos;r&apos;):\n    links.append(x.strip(&apos;\\n&apos;))\n\n\ndef get(url):\n    command =&apos;you-get &apos; + url\n    # print(command)\n    os.system(command)\n\n\ndef run():  # 多进程\n    multiprocessing.freeze_support()\n    pool = multiprocessing.Pool(multiprocessing.cpu_count())\n    results = pool.map_async(get, links)\n    pool.close()\n    pool.join()\n\n\nif __name__ == &apos;__main__&apos;:\n    run()\n</code></pre><p><br></p>\n<h4 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h4><p><img src=\"https://of4jd0bcc.qnssl.com/Xpath/finished.png\" alt=\"Result\"></p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E7%86%8A%E6%9C%AC%E7%86%8A%E6%89%93%E9%BC%93_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>\n","excerpt":"<h4 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a><a href=\"https://github.com/soimort/you-get\">项目地址</a></h4><p><br></p>\n<h4 id=\"安装FFPEG\"><a href=\"#安装FFPEG\" class=\"headerlink\" title=\"安装FFPEG\"></a><a href=\"http://adaptivesamples.com/how-to-install-ffmpeg-on-windows/\">安装FFPEG</a></h4><p><br></p>","more":"<blockquote>\n<p>xpath获取我推荐一个Chrome的插件: <strong>Xpath Finder</strong></p>\n</blockquote>\n<h4 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h4><p><img src=\"https://of4jd0bcc.qnssl.com/Xpath/xpath-title.png\" alt=\"Xpath-title\"><br><br><br><img src=\"https://of4jd0bcc.qnssl.com/Xpath/xpath-link.png\" alt=\"Xpath-link\"><br><br></p>\n<h4 id=\"用Python实战下\"><a href=\"#用Python实战下\" class=\"headerlink\" title=\"用Python实战下\"></a>用Python实战下</h4><pre><code># !/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nimport os\nimport multiprocessing\n\nlinks = []\nfor x in open(&apos;F:\\\\Aria2_Data\\\\you-get\\\\大神岛出云\\\\download.txt&apos;, &apos;r&apos;):\n    links.append(x.strip(&apos;\\n&apos;))\n\n\ndef get(url):\n    command =&apos;you-get &apos; + url\n    # print(command)\n    os.system(command)\n\n\ndef run():  # 多进程\n    multiprocessing.freeze_support()\n    pool = multiprocessing.Pool(multiprocessing.cpu_count())\n    results = pool.map_async(get, links)\n    pool.close()\n    pool.join()\n\n\nif __name__ == &apos;__main__&apos;:\n    run()\n</code></pre><p><br></p>\n<h4 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h4><p><img src=\"https://of4jd0bcc.qnssl.com/Xpath/finished.png\" alt=\"Result\"></p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E7%86%8A%E6%9C%AC%E7%86%8A%E6%89%93%E9%BC%93_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/%E9%85%9A%E9%85%9E%E7%93%9C_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>"},{"title":"在CentOS下配置ngrok","date":"2017-01-24T16:54:58.000Z","_content":"\n![1][1]\n\n<!--more-->\n\n### Require\n#### 域名设置主机记录\n![主机记录][2]\n如果没有**`*`**记录的话会被重定向至主机，无法打开隧道页面\n<br>\n#### Git\n\n    yum install git\n<br>    \n#### Go\n如果之前安装过旧版本的Go请先卸载\n\n    yum remove golang\n    \n下载go1.4.2源码包\n\n    wget https://storage.googleapis.com/golang/go1.7.linux-amd64.tar.gz\n    \n解压到/usr/local/\n\n    tar -C /usr/local/ -zxf go1.7.linux-amd64.tar.gz\n    \n添加环境变量\n\n    vim /etc/profile\n    \n在最后面添加以下两句保存并退出：\n\n    export GOROOT=/usr/local/go\n    export PATH=$GOROOT/bin:$PATH\n    \n使之前的配置生效\n\n    source /etc/profile\n    \n<br>\n### Server\n\n    git clone https://github.com/inconshreveable/ngrok.git\n\n在使用官方服务的时候，我们使用的是官方的 SSL 证书，所以如果直接编译的话，默认的链接地址会到官方的 ngrok.com 去，所以我们需要自己生成证书。\n\n**NGROK_DOMAIN这里修改为自己的域名**\n\n    cd /root/ngrok \n    NGROK_DOMAIN=\"evilmass.cc\"\n    \n    openssl genrsa -out rootCA.key 2048\n    openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem\n    openssl genrsa -out device.key 2048\n    openssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csr\n    openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000\n \n openssl 就是生成 SSL 证书文件的过程，之后会在 ngrok 目录下生成 root，device 等六个文件。 然后需要拷贝到配置的目录中，在编译的时候会使用这些文件。\n \n    \\cp rootCA.pem assets/client/tls/ngrokroot.crt -f\n    \\cp device.crt assets/server/tls/snakeoil.crt  -f\n    \\cp device.key assets/server/tls/snakeoil.key -f\n`\\cp` 命令可强制覆盖\n\n\n编译ngrokd\n\n    cd /root/ngrok\n    make release-server\n    \n> 如果安装的时候卡在了**gopkg.in/inconshreveable/go-update.v0 (download)**或者卡在**gopkg.in/yaml.v1 (download)**，则代表需要安装新的git\n注意git版本应大于1.7.9.5\n源码编译安装请参考：[安装Git][3]\n\nCentOS下Git安装的一个坑：\n\n    Can't locate ExtUtils/MakeMaker.pm in @INC (@INC contains: /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at Makefile.PL line 3.\n\n    BEGIN failed--compilation aborted at Makefile.PL line 3.\n\n    make[1]: *** [perl.mak] Error 2\n\n    make: *** [perl/perl.mak] Error 2\n\n解决:\n\n    yum install perl-ExtUtils-MakeMaker\n\n\n构建完成以后可以在bin目录下看到**ngrokd**，这个文件，这个就是我们后面要开启的服务器端(Server)\n\n<br>\n### Client\n\ngo开发环境为我们提供了强大的跨平台交叉编译功能，在Linux下即可完成Windows版的编译。\n\n    cd /root/ngrok\n    \n执行如下命令编译Windows 64位客户端\n\n    GOOS=windows GOARCH=amd64 make release-client\n    \n**GOOS**：当前编译的操作系统 (windows，linux，darwin) \n**GOARCH**：go编译出来的应用构架 (386，amd64，arm)\n\n> Linux 平台 32 位系统：GOOS=linux GOARCH=386\n  Linux 平台 64 位系统：GOOS=linux GOARCH=amd64\n  Windows 平台 32 位系统：GOOS=windows GOARCH=386\n  Windows 平台 64 位系统：GOOS=windows GOARCH=amd64\n  MAC 平台 32 位系统：GOOS=darwin GOARCH=386\n  MAC 平台 64 位系统：GOOS=darwin GOARCH=amd64\n  ARM 平台：GOOS=linux GOARCH=arm\n  \n通过前面的步骤，就会在bin目录里面生成所有的客户端文件，客户端平台是文件夹的名字（windows_amd64），客户端放在对应的目录下。\n没有错误的话，Windows客户端ngrok就编译成功了，我们可以在./bin/windows_amd64/目录下找到执行文件ngrok.exe。将其下载到Windows上。\n<br>\n\n### 运行测试\n#### 服务器端\n    cd /root/ngrok\n    NGROK_DOMAIN=\"evilmass.cc\"\n    #http\n    bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":6060\" -httpsAddr=\":6061\" -tunnelAddr=\":6062\" \n    \n    #https设置了tls\n    #bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":6060\" -httpsAddr=\":6061\" -tunnelAddr=\":6062\" -tlsKey=./device.key -tlsCrt=./device.crt\n    \n\n**httpAddr**：访问普通的http使用的端口号，用后面用`子域名.evilmass.cc:6060` 来访问服务\n**httpsAddr**：访问的https使用的端口号，同上，只不过是需要https的服务访问才用这个端口\n**tunnelAddr**：通道的端口号，**这个端口是Ngrok用来通信的，所以这个端口在服务器上和客户端上设置必须要对应才可以正常的链接**，默认不填写是4433\n\n    \n##### 验证端口是否打开\n\n    nc -v -w 10 -z 127.0.0.1 6060-6062\n    \n如果显示的3个端口都有响应（都显示了succeeded就是正常）\n\n##### 打开防火墙\n如果是centOS的系统，防火墙应该是 firewall-cmd 来控制。对应的命令就是，其中端口号要写自己的：\n\n    firewall-cmd --permanent --zone=public --add-port=6060-6062/tcp  //永久\n    #firewall-cmd  --zone=public --add-port=6060-6062/tcp   //临时\n    \n如果是ubuntu之类的系统，防火墙一般是iptables来控制，对应的命令就是，也要修改自己的端口号才可以：\n\n    iptables -A INPUT -p tcp --dport 6060-6062 -j ACCEPT\n    iptables -A OUTPUT -p tcp --sport 6060-6062 -j ACCEPT\n\n\n#### 客户端\n建立一个文件ngrok.cfg，与刚才编译好的windows客户端放在一起。写入如下内容：\n\n    server_addr: \"evilmass.cc:6062\"  #6062是服务器端的通信端口\n    trust_host_root_certs: \"true\"\n    #http_proxy: \"http://user:password@proxy-ip:port\"  #代理设置\n    tunnels:\n        router:\n            auth: \"username:password\"  #打开此页面需要先验证\n            proto:\n            http: 192.168.1.1:80  #or https\n        ssh:\n            proto:\n                tcp: 22\n        mhp:\n            proto:\n                tcp: 182.168.1.149:3000\n\n在客户端目录下运行\n\n    ngrok.exe -log=\"ngrok_log.txt\" -config=\"ngrok.cfg\" start router mhp\n日志： `-log=ngrok_log.txt`是记录ngrok的日志，如果不能访问就可以查看到底是什么问题\n\n启动服务： start `router` `mhp`\n\n如果显示了tunnel status: online就是服务器和客户端是正常链接的\n![多隧道设置][多隧道设置]\n<br>\n如果设定了`auth`，则开启页面需要填写`username`和`password`：\n![两步认证][两步认证]\n<br>\n通过浏览器访问`http://router.evilmass.cc:6060`就可以链接到现在的内网主机`192.168.1.1:80`上的服务。\n![测试隧道][测试隧道]\n\n<br>\n### 配置 raspberry pi 客户端\n\n先在需要的地方建立一个目录，然后建立一个和window下一样的ngrok.cfg的文件，内容也相同\n\n将arm版本的ngrok上传到树莓派上对应的目录\n\n进入这个目录以后，通过 chmod +x ngrok 将ngrok设置成可执行文件\n\n执行命令 \n\n    ./ngrok -config=\"ngrok.cfg\" start raspberry\n\n这样就可以通过`raspberry.evilmass.cc:6062`访问树莓派上的80端口对应的服务。（树莓派可以直接安装一个nginx， `apt-get install nginx` 然后默认80端口就可以显示nginx默认的页面）\n\n### 拿Python写个MHP Tunnel Server脚本来玩一下\n今天找到了`mhptunnel_unixsv4.zip`，Unix下的MHP Tunnel，make之后执行./sv 30000 &就可以启动服务器端。**But！**连上去之后不停的重新登录-掉线-登录-掉线。。。估计是版本太旧了\n如果你们仔细找找的话，在MHP Tunnel目录下面是有个服务端启动工具的，长这样：\n![1][4]\n打开之后有如下参数：\n\n    MHP Tunnel Server Ver0.8.7.5 by Pensil\n    Protocol Ver0.8.7 by Pensil\n    Usage: TunnelSVR port [adminid] [announce] [name] [desc] [hr] [maxuser] [lcid]\n    \n    port:        port number\n    adminid:     admin uuid (default: NULL)\n    export:      set 1 to announce (default: 0)\n    name:        admin nickname (default: read from TunnelSVR.ini)\n    desc:        server description (default: read from TunnelSVR.ini)\n    hr:          hunter rank (default: read from TunnelSVR.ini)\n    maxuser:     max users (default: read from TunnelSVR.ini)\n    lcid:        default lcid (default: read from TunnelSVR.ini)\n\n也就是说只要一台有Windows系统且有公网ip的服务器运行了这个程序，设定好了port、export=1，别人就可以看到你的服务器了，跑偏了。。。\n\nServer.py\n\n    # !/usr/bin/env python3\n    # -*- coding:utf-8 -*-\n\n    import os\n    import subprocess\n\n    command1 = \"tunnelsvr.exe\"\n    command2 = \"ngrok.exe -log=\\\"ngrok_log.txt\\\" -config=\\\"ngrok.cfg\\\" start mhp\"\n    \n    os.chdir(\"C:\\\\Users\\\\Evilmass1ve\\\\Desktop\\\\RaspberryPi\\\\PSPTunnel\\\\PSPTunnel大陆修改版[5-4SSID增加版本]\\\\\")\n    subprocess.Popen(command1, shell = True)\n    \n    os.chdir(\"C:\\\\Users\\\\Evilmass1ve\\\\Desktop\\\\RaspberryPi\\\\Software\\\\ngrok\\\\cc\")\n    subprocess.Popen(command2, shell = True)\n\n\nPopen使用时shell参数的设，一般情况下，需要加上shell = True\n最后`pyinstaller Server.py`，一键什么的，整个世界都美好了\n**懒才是推动科技发展的动力啊**\n\n\n### 待补充的内容\n后面准备补充一下使用supervisor来保持服务一直运行，在服务端和客户端都需要配置一下，维持服务稳定。\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][5]\n\n**微信**  \n![wechat][6]\n\n\n  [1]: https://of4jd0bcc.qnssl.com/ngrok/ngrok.png\n  [2]: https://of4jd0bcc.qnssl.com/ngrok/%E4%B8%BB%E6%9C%BA%E8%AE%B0%E5%BD%95.png\n  [3]: https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\n  [4]: https://of4jd0bcc.qnssl.com/ngrok/tunnelsvr.png\n  [5]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/dmc.gif?imageView2/1/w/200/h/200\n  [6]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\n  [多隧道设置]: https://of4jd0bcc.qnssl.com/ngrok/%E5%A4%9A%E9%9A%A7%E9%81%93%E8%AE%BE%E7%BD%AE.png\n  [两步认证]: https://of4jd0bcc.qnssl.com/ngrok/%E4%B8%A4%E6%AD%A5%E9%AA%8C%E8%AF%81.png\n  [测试隧道]: https://of4jd0bcc.qnssl.com/ngrok/%E6%B5%8B%E8%AF%95%E9%9A%A7%E9%81%93.png","source":"_posts/在CentOS下配置ngrok.md","raw":"---\ntitle: 在CentOS下配置ngrok\ndate: 2017-01-25 00:54:58\ntags: Linux\n---\n\n![1][1]\n\n<!--more-->\n\n### Require\n#### 域名设置主机记录\n![主机记录][2]\n如果没有**`*`**记录的话会被重定向至主机，无法打开隧道页面\n<br>\n#### Git\n\n    yum install git\n<br>    \n#### Go\n如果之前安装过旧版本的Go请先卸载\n\n    yum remove golang\n    \n下载go1.4.2源码包\n\n    wget https://storage.googleapis.com/golang/go1.7.linux-amd64.tar.gz\n    \n解压到/usr/local/\n\n    tar -C /usr/local/ -zxf go1.7.linux-amd64.tar.gz\n    \n添加环境变量\n\n    vim /etc/profile\n    \n在最后面添加以下两句保存并退出：\n\n    export GOROOT=/usr/local/go\n    export PATH=$GOROOT/bin:$PATH\n    \n使之前的配置生效\n\n    source /etc/profile\n    \n<br>\n### Server\n\n    git clone https://github.com/inconshreveable/ngrok.git\n\n在使用官方服务的时候，我们使用的是官方的 SSL 证书，所以如果直接编译的话，默认的链接地址会到官方的 ngrok.com 去，所以我们需要自己生成证书。\n\n**NGROK_DOMAIN这里修改为自己的域名**\n\n    cd /root/ngrok \n    NGROK_DOMAIN=\"evilmass.cc\"\n    \n    openssl genrsa -out rootCA.key 2048\n    openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem\n    openssl genrsa -out device.key 2048\n    openssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csr\n    openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000\n \n openssl 就是生成 SSL 证书文件的过程，之后会在 ngrok 目录下生成 root，device 等六个文件。 然后需要拷贝到配置的目录中，在编译的时候会使用这些文件。\n \n    \\cp rootCA.pem assets/client/tls/ngrokroot.crt -f\n    \\cp device.crt assets/server/tls/snakeoil.crt  -f\n    \\cp device.key assets/server/tls/snakeoil.key -f\n`\\cp` 命令可强制覆盖\n\n\n编译ngrokd\n\n    cd /root/ngrok\n    make release-server\n    \n> 如果安装的时候卡在了**gopkg.in/inconshreveable/go-update.v0 (download)**或者卡在**gopkg.in/yaml.v1 (download)**，则代表需要安装新的git\n注意git版本应大于1.7.9.5\n源码编译安装请参考：[安装Git][3]\n\nCentOS下Git安装的一个坑：\n\n    Can't locate ExtUtils/MakeMaker.pm in @INC (@INC contains: /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at Makefile.PL line 3.\n\n    BEGIN failed--compilation aborted at Makefile.PL line 3.\n\n    make[1]: *** [perl.mak] Error 2\n\n    make: *** [perl/perl.mak] Error 2\n\n解决:\n\n    yum install perl-ExtUtils-MakeMaker\n\n\n构建完成以后可以在bin目录下看到**ngrokd**，这个文件，这个就是我们后面要开启的服务器端(Server)\n\n<br>\n### Client\n\ngo开发环境为我们提供了强大的跨平台交叉编译功能，在Linux下即可完成Windows版的编译。\n\n    cd /root/ngrok\n    \n执行如下命令编译Windows 64位客户端\n\n    GOOS=windows GOARCH=amd64 make release-client\n    \n**GOOS**：当前编译的操作系统 (windows，linux，darwin) \n**GOARCH**：go编译出来的应用构架 (386，amd64，arm)\n\n> Linux 平台 32 位系统：GOOS=linux GOARCH=386\n  Linux 平台 64 位系统：GOOS=linux GOARCH=amd64\n  Windows 平台 32 位系统：GOOS=windows GOARCH=386\n  Windows 平台 64 位系统：GOOS=windows GOARCH=amd64\n  MAC 平台 32 位系统：GOOS=darwin GOARCH=386\n  MAC 平台 64 位系统：GOOS=darwin GOARCH=amd64\n  ARM 平台：GOOS=linux GOARCH=arm\n  \n通过前面的步骤，就会在bin目录里面生成所有的客户端文件，客户端平台是文件夹的名字（windows_amd64），客户端放在对应的目录下。\n没有错误的话，Windows客户端ngrok就编译成功了，我们可以在./bin/windows_amd64/目录下找到执行文件ngrok.exe。将其下载到Windows上。\n<br>\n\n### 运行测试\n#### 服务器端\n    cd /root/ngrok\n    NGROK_DOMAIN=\"evilmass.cc\"\n    #http\n    bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":6060\" -httpsAddr=\":6061\" -tunnelAddr=\":6062\" \n    \n    #https设置了tls\n    #bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":6060\" -httpsAddr=\":6061\" -tunnelAddr=\":6062\" -tlsKey=./device.key -tlsCrt=./device.crt\n    \n\n**httpAddr**：访问普通的http使用的端口号，用后面用`子域名.evilmass.cc:6060` 来访问服务\n**httpsAddr**：访问的https使用的端口号，同上，只不过是需要https的服务访问才用这个端口\n**tunnelAddr**：通道的端口号，**这个端口是Ngrok用来通信的，所以这个端口在服务器上和客户端上设置必须要对应才可以正常的链接**，默认不填写是4433\n\n    \n##### 验证端口是否打开\n\n    nc -v -w 10 -z 127.0.0.1 6060-6062\n    \n如果显示的3个端口都有响应（都显示了succeeded就是正常）\n\n##### 打开防火墙\n如果是centOS的系统，防火墙应该是 firewall-cmd 来控制。对应的命令就是，其中端口号要写自己的：\n\n    firewall-cmd --permanent --zone=public --add-port=6060-6062/tcp  //永久\n    #firewall-cmd  --zone=public --add-port=6060-6062/tcp   //临时\n    \n如果是ubuntu之类的系统，防火墙一般是iptables来控制，对应的命令就是，也要修改自己的端口号才可以：\n\n    iptables -A INPUT -p tcp --dport 6060-6062 -j ACCEPT\n    iptables -A OUTPUT -p tcp --sport 6060-6062 -j ACCEPT\n\n\n#### 客户端\n建立一个文件ngrok.cfg，与刚才编译好的windows客户端放在一起。写入如下内容：\n\n    server_addr: \"evilmass.cc:6062\"  #6062是服务器端的通信端口\n    trust_host_root_certs: \"true\"\n    #http_proxy: \"http://user:password@proxy-ip:port\"  #代理设置\n    tunnels:\n        router:\n            auth: \"username:password\"  #打开此页面需要先验证\n            proto:\n            http: 192.168.1.1:80  #or https\n        ssh:\n            proto:\n                tcp: 22\n        mhp:\n            proto:\n                tcp: 182.168.1.149:3000\n\n在客户端目录下运行\n\n    ngrok.exe -log=\"ngrok_log.txt\" -config=\"ngrok.cfg\" start router mhp\n日志： `-log=ngrok_log.txt`是记录ngrok的日志，如果不能访问就可以查看到底是什么问题\n\n启动服务： start `router` `mhp`\n\n如果显示了tunnel status: online就是服务器和客户端是正常链接的\n![多隧道设置][多隧道设置]\n<br>\n如果设定了`auth`，则开启页面需要填写`username`和`password`：\n![两步认证][两步认证]\n<br>\n通过浏览器访问`http://router.evilmass.cc:6060`就可以链接到现在的内网主机`192.168.1.1:80`上的服务。\n![测试隧道][测试隧道]\n\n<br>\n### 配置 raspberry pi 客户端\n\n先在需要的地方建立一个目录，然后建立一个和window下一样的ngrok.cfg的文件，内容也相同\n\n将arm版本的ngrok上传到树莓派上对应的目录\n\n进入这个目录以后，通过 chmod +x ngrok 将ngrok设置成可执行文件\n\n执行命令 \n\n    ./ngrok -config=\"ngrok.cfg\" start raspberry\n\n这样就可以通过`raspberry.evilmass.cc:6062`访问树莓派上的80端口对应的服务。（树莓派可以直接安装一个nginx， `apt-get install nginx` 然后默认80端口就可以显示nginx默认的页面）\n\n### 拿Python写个MHP Tunnel Server脚本来玩一下\n今天找到了`mhptunnel_unixsv4.zip`，Unix下的MHP Tunnel，make之后执行./sv 30000 &就可以启动服务器端。**But！**连上去之后不停的重新登录-掉线-登录-掉线。。。估计是版本太旧了\n如果你们仔细找找的话，在MHP Tunnel目录下面是有个服务端启动工具的，长这样：\n![1][4]\n打开之后有如下参数：\n\n    MHP Tunnel Server Ver0.8.7.5 by Pensil\n    Protocol Ver0.8.7 by Pensil\n    Usage: TunnelSVR port [adminid] [announce] [name] [desc] [hr] [maxuser] [lcid]\n    \n    port:        port number\n    adminid:     admin uuid (default: NULL)\n    export:      set 1 to announce (default: 0)\n    name:        admin nickname (default: read from TunnelSVR.ini)\n    desc:        server description (default: read from TunnelSVR.ini)\n    hr:          hunter rank (default: read from TunnelSVR.ini)\n    maxuser:     max users (default: read from TunnelSVR.ini)\n    lcid:        default lcid (default: read from TunnelSVR.ini)\n\n也就是说只要一台有Windows系统且有公网ip的服务器运行了这个程序，设定好了port、export=1，别人就可以看到你的服务器了，跑偏了。。。\n\nServer.py\n\n    # !/usr/bin/env python3\n    # -*- coding:utf-8 -*-\n\n    import os\n    import subprocess\n\n    command1 = \"tunnelsvr.exe\"\n    command2 = \"ngrok.exe -log=\\\"ngrok_log.txt\\\" -config=\\\"ngrok.cfg\\\" start mhp\"\n    \n    os.chdir(\"C:\\\\Users\\\\Evilmass1ve\\\\Desktop\\\\RaspberryPi\\\\PSPTunnel\\\\PSPTunnel大陆修改版[5-4SSID增加版本]\\\\\")\n    subprocess.Popen(command1, shell = True)\n    \n    os.chdir(\"C:\\\\Users\\\\Evilmass1ve\\\\Desktop\\\\RaspberryPi\\\\Software\\\\ngrok\\\\cc\")\n    subprocess.Popen(command2, shell = True)\n\n\nPopen使用时shell参数的设，一般情况下，需要加上shell = True\n最后`pyinstaller Server.py`，一键什么的，整个世界都美好了\n**懒才是推动科技发展的动力啊**\n\n\n### 待补充的内容\n后面准备补充一下使用supervisor来保持服务一直运行，在服务端和客户端都需要配置一下，维持服务稳定。\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][5]\n\n**微信**  \n![wechat][6]\n\n\n  [1]: https://of4jd0bcc.qnssl.com/ngrok/ngrok.png\n  [2]: https://of4jd0bcc.qnssl.com/ngrok/%E4%B8%BB%E6%9C%BA%E8%AE%B0%E5%BD%95.png\n  [3]: https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\n  [4]: https://of4jd0bcc.qnssl.com/ngrok/tunnelsvr.png\n  [5]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/dmc.gif?imageView2/1/w/200/h/200\n  [6]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\n  [多隧道设置]: https://of4jd0bcc.qnssl.com/ngrok/%E5%A4%9A%E9%9A%A7%E9%81%93%E8%AE%BE%E7%BD%AE.png\n  [两步认证]: https://of4jd0bcc.qnssl.com/ngrok/%E4%B8%A4%E6%AD%A5%E9%AA%8C%E8%AF%81.png\n  [测试隧道]: https://of4jd0bcc.qnssl.com/ngrok/%E6%B5%8B%E8%AF%95%E9%9A%A7%E9%81%93.png","slug":"在CentOS下配置ngrok","published":1,"updated":"2017-02-06T07:11:23.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv5dy0c000spoogv4ep4460","content":"<p><img src=\"https://of4jd0bcc.qnssl.com/ngrok/ngrok.png\" alt=\"1\"></p>\n<a id=\"more\"></a>\n<h3 id=\"Require\"><a href=\"#Require\" class=\"headerlink\" title=\"Require\"></a>Require</h3><h4 id=\"域名设置主机记录\"><a href=\"#域名设置主机记录\" class=\"headerlink\" title=\"域名设置主机记录\"></a>域名设置主机记录</h4><p><img src=\"https://of4jd0bcc.qnssl.com/ngrok/%E4%B8%BB%E6%9C%BA%E8%AE%B0%E5%BD%95.png\" alt=\"主机记录\"><br>如果没有<strong><code>*</code></strong>记录的话会被重定向至主机，无法打开隧道页面<br><br></p>\n<h4 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h4><pre><code>yum install git\n</code></pre><p><br>    </p>\n<h4 id=\"Go\"><a href=\"#Go\" class=\"headerlink\" title=\"Go\"></a>Go</h4><p>如果之前安装过旧版本的Go请先卸载</p>\n<pre><code>yum remove golang\n</code></pre><p>下载go1.4.2源码包</p>\n<pre><code>wget https://storage.googleapis.com/golang/go1.7.linux-amd64.tar.gz\n</code></pre><p>解压到/usr/local/</p>\n<pre><code>tar -C /usr/local/ -zxf go1.7.linux-amd64.tar.gz\n</code></pre><p>添加环境变量</p>\n<pre><code>vim /etc/profile\n</code></pre><p>在最后面添加以下两句保存并退出：</p>\n<pre><code>export GOROOT=/usr/local/go\nexport PATH=$GOROOT/bin:$PATH\n</code></pre><p>使之前的配置生效</p>\n<pre><code>source /etc/profile\n</code></pre><p><br></p>\n<h3 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h3><pre><code>git clone https://github.com/inconshreveable/ngrok.git\n</code></pre><p>在使用官方服务的时候，我们使用的是官方的 SSL 证书，所以如果直接编译的话，默认的链接地址会到官方的 ngrok.com 去，所以我们需要自己生成证书。</p>\n<p><strong>NGROK_DOMAIN这里修改为自己的域名</strong></p>\n<pre><code>cd /root/ngrok \nNGROK_DOMAIN=&quot;evilmass.cc&quot;\n\nopenssl genrsa -out rootCA.key 2048\nopenssl req -x509 -new -nodes -key rootCA.key -subj &quot;/CN=$NGROK_DOMAIN&quot; -days 5000 -out rootCA.pem\nopenssl genrsa -out device.key 2048\nopenssl req -new -key device.key -subj &quot;/CN=$NGROK_DOMAIN&quot; -out device.csr\nopenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000\n</code></pre><p> openssl 就是生成 SSL 证书文件的过程，之后会在 ngrok 目录下生成 root，device 等六个文件。 然后需要拷贝到配置的目录中，在编译的时候会使用这些文件。</p>\n<pre><code>\\cp rootCA.pem assets/client/tls/ngrokroot.crt -f\n\\cp device.crt assets/server/tls/snakeoil.crt  -f\n\\cp device.key assets/server/tls/snakeoil.key -f\n</code></pre><p><code>\\cp</code> 命令可强制覆盖</p>\n<p>编译ngrokd</p>\n<pre><code>cd /root/ngrok\nmake release-server\n</code></pre><blockquote>\n<p>如果安装的时候卡在了<strong>gopkg.in/inconshreveable/go-update.v0 (download)</strong>或者卡在<strong>gopkg.in/yaml.v1 (download)</strong>，则代表需要安装新的git<br>注意git版本应大于1.7.9.5<br>源码编译安装请参考：<a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\" target=\"_blank\" rel=\"external\">安装Git</a></p>\n</blockquote>\n<p>CentOS下Git安装的一个坑：</p>\n<pre><code>Can&apos;t locate ExtUtils/MakeMaker.pm in @INC (@INC contains: /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at Makefile.PL line 3.\n\nBEGIN failed--compilation aborted at Makefile.PL line 3.\n\nmake[1]: *** [perl.mak] Error 2\n\nmake: *** [perl/perl.mak] Error 2\n</code></pre><p>解决:</p>\n<pre><code>yum install perl-ExtUtils-MakeMaker\n</code></pre><p>构建完成以后可以在bin目录下看到<strong>ngrokd</strong>，这个文件，这个就是我们后面要开启的服务器端(Server)</p>\n<p><br></p>\n<h3 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h3><p>go开发环境为我们提供了强大的跨平台交叉编译功能，在Linux下即可完成Windows版的编译。</p>\n<pre><code>cd /root/ngrok\n</code></pre><p>执行如下命令编译Windows 64位客户端</p>\n<pre><code>GOOS=windows GOARCH=amd64 make release-client\n</code></pre><p><strong>GOOS</strong>：当前编译的操作系统 (windows，linux，darwin)<br><strong>GOARCH</strong>：go编译出来的应用构架 (386，amd64，arm)</p>\n<blockquote>\n<p>Linux 平台 32 位系统：GOOS=linux GOARCH=386<br>  Linux 平台 64 位系统：GOOS=linux GOARCH=amd64<br>  Windows 平台 32 位系统：GOOS=windows GOARCH=386<br>  Windows 平台 64 位系统：GOOS=windows GOARCH=amd64<br>  MAC 平台 32 位系统：GOOS=darwin GOARCH=386<br>  MAC 平台 64 位系统：GOOS=darwin GOARCH=amd64<br>  ARM 平台：GOOS=linux GOARCH=arm</p>\n</blockquote>\n<p>通过前面的步骤，就会在bin目录里面生成所有的客户端文件，客户端平台是文件夹的名字（windows_amd64），客户端放在对应的目录下。<br>没有错误的话，Windows客户端ngrok就编译成功了，我们可以在./bin/windows_amd64/目录下找到执行文件ngrok.exe。将其下载到Windows上。<br><br></p>\n<h3 id=\"运行测试\"><a href=\"#运行测试\" class=\"headerlink\" title=\"运行测试\"></a>运行测试</h3><h4 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h4><pre><code>cd /root/ngrok\nNGROK_DOMAIN=&quot;evilmass.cc&quot;\n#http\nbin/ngrokd -domain=&quot;$NGROK_DOMAIN&quot; -httpAddr=&quot;:6060&quot; -httpsAddr=&quot;:6061&quot; -tunnelAddr=&quot;:6062&quot; \n\n#https设置了tls\n#bin/ngrokd -domain=&quot;$NGROK_DOMAIN&quot; -httpAddr=&quot;:6060&quot; -httpsAddr=&quot;:6061&quot; -tunnelAddr=&quot;:6062&quot; -tlsKey=./device.key -tlsCrt=./device.crt\n</code></pre><p><strong>httpAddr</strong>：访问普通的http使用的端口号，用后面用<code>子域名.evilmass.cc:6060</code> 来访问服务<br><strong>httpsAddr</strong>：访问的https使用的端口号，同上，只不过是需要https的服务访问才用这个端口<br><strong>tunnelAddr</strong>：通道的端口号，<strong>这个端口是Ngrok用来通信的，所以这个端口在服务器上和客户端上设置必须要对应才可以正常的链接</strong>，默认不填写是4433</p>\n<h5 id=\"验证端口是否打开\"><a href=\"#验证端口是否打开\" class=\"headerlink\" title=\"验证端口是否打开\"></a>验证端口是否打开</h5><pre><code>nc -v -w 10 -z 127.0.0.1 6060-6062\n</code></pre><p>如果显示的3个端口都有响应（都显示了succeeded就是正常）</p>\n<h5 id=\"打开防火墙\"><a href=\"#打开防火墙\" class=\"headerlink\" title=\"打开防火墙\"></a>打开防火墙</h5><p>如果是centOS的系统，防火墙应该是 firewall-cmd 来控制。对应的命令就是，其中端口号要写自己的：</p>\n<pre><code>firewall-cmd --permanent --zone=public --add-port=6060-6062/tcp  //永久\n#firewall-cmd  --zone=public --add-port=6060-6062/tcp   //临时\n</code></pre><p>如果是ubuntu之类的系统，防火墙一般是iptables来控制，对应的命令就是，也要修改自己的端口号才可以：</p>\n<pre><code>iptables -A INPUT -p tcp --dport 6060-6062 -j ACCEPT\niptables -A OUTPUT -p tcp --sport 6060-6062 -j ACCEPT\n</code></pre><h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><p>建立一个文件ngrok.cfg，与刚才编译好的windows客户端放在一起。写入如下内容：</p>\n<pre><code>server_addr: &quot;evilmass.cc:6062&quot;  #6062是服务器端的通信端口\ntrust_host_root_certs: &quot;true&quot;\n#http_proxy: &quot;http://user:password@proxy-ip:port&quot;  #代理设置\ntunnels:\n    router:\n        auth: &quot;username:password&quot;  #打开此页面需要先验证\n        proto:\n        http: 192.168.1.1:80  #or https\n    ssh:\n        proto:\n            tcp: 22\n    mhp:\n        proto:\n            tcp: 182.168.1.149:3000\n</code></pre><p>在客户端目录下运行</p>\n<pre><code>ngrok.exe -log=&quot;ngrok_log.txt&quot; -config=&quot;ngrok.cfg&quot; start router mhp\n</code></pre><p>日志： <code>-log=ngrok_log.txt</code>是记录ngrok的日志，如果不能访问就可以查看到底是什么问题</p>\n<p>启动服务： start <code>router</code> <code>mhp</code></p>\n<p>如果显示了tunnel status: online就是服务器和客户端是正常链接的<br><img src=\"https://of4jd0bcc.qnssl.com/ngrok/%E5%A4%9A%E9%9A%A7%E9%81%93%E8%AE%BE%E7%BD%AE.png\" alt=\"多隧道设置\"><br><br><br>如果设定了<code>auth</code>，则开启页面需要填写<code>username</code>和<code>password</code>：<br><img src=\"https://of4jd0bcc.qnssl.com/ngrok/%E4%B8%A4%E6%AD%A5%E9%AA%8C%E8%AF%81.png\" alt=\"两步认证\"><br><br><br>通过浏览器访问<code>http://router.evilmass.cc:6060</code>就可以链接到现在的内网主机<code>192.168.1.1:80</code>上的服务。<br><img src=\"https://of4jd0bcc.qnssl.com/ngrok/%E6%B5%8B%E8%AF%95%E9%9A%A7%E9%81%93.png\" alt=\"测试隧道\"></p>\n<p><br></p>\n<h3 id=\"配置-raspberry-pi-客户端\"><a href=\"#配置-raspberry-pi-客户端\" class=\"headerlink\" title=\"配置 raspberry pi 客户端\"></a>配置 raspberry pi 客户端</h3><p>先在需要的地方建立一个目录，然后建立一个和window下一样的ngrok.cfg的文件，内容也相同</p>\n<p>将arm版本的ngrok上传到树莓派上对应的目录</p>\n<p>进入这个目录以后，通过 chmod +x ngrok 将ngrok设置成可执行文件</p>\n<p>执行命令 </p>\n<pre><code>./ngrok -config=&quot;ngrok.cfg&quot; start raspberry\n</code></pre><p>这样就可以通过<code>raspberry.evilmass.cc:6062</code>访问树莓派上的80端口对应的服务。（树莓派可以直接安装一个nginx， <code>apt-get install nginx</code> 然后默认80端口就可以显示nginx默认的页面）</p>\n<h3 id=\"拿Python写个MHP-Tunnel-Server脚本来玩一下\"><a href=\"#拿Python写个MHP-Tunnel-Server脚本来玩一下\" class=\"headerlink\" title=\"拿Python写个MHP Tunnel Server脚本来玩一下\"></a>拿Python写个MHP Tunnel Server脚本来玩一下</h3><p>今天找到了<code>mhptunnel_unixsv4.zip</code>，Unix下的MHP Tunnel，make之后执行./sv 30000 &amp;就可以启动服务器端。<strong>But！</strong>连上去之后不停的重新登录-掉线-登录-掉线。。。估计是版本太旧了<br>如果你们仔细找找的话，在MHP Tunnel目录下面是有个服务端启动工具的，长这样：<br><img src=\"https://of4jd0bcc.qnssl.com/ngrok/tunnelsvr.png\" alt=\"1\"><br>打开之后有如下参数：</p>\n<pre><code>MHP Tunnel Server Ver0.8.7.5 by Pensil\nProtocol Ver0.8.7 by Pensil\nUsage: TunnelSVR port [adminid] [announce] [name] [desc] [hr] [maxuser] [lcid]\n\nport:        port number\nadminid:     admin uuid (default: NULL)\nexport:      set 1 to announce (default: 0)\nname:        admin nickname (default: read from TunnelSVR.ini)\ndesc:        server description (default: read from TunnelSVR.ini)\nhr:          hunter rank (default: read from TunnelSVR.ini)\nmaxuser:     max users (default: read from TunnelSVR.ini)\nlcid:        default lcid (default: read from TunnelSVR.ini)\n</code></pre><p>也就是说只要一台有Windows系统且有公网ip的服务器运行了这个程序，设定好了port、export=1，别人就可以看到你的服务器了，跑偏了。。。</p>\n<p>Server.py</p>\n<pre><code># !/usr/bin/env python3\n# -*- coding:utf-8 -*-\n\nimport os\nimport subprocess\n\ncommand1 = &quot;tunnelsvr.exe&quot;\ncommand2 = &quot;ngrok.exe -log=\\&quot;ngrok_log.txt\\&quot; -config=\\&quot;ngrok.cfg\\&quot; start mhp&quot;\n\nos.chdir(&quot;C:\\\\Users\\\\Evilmass1ve\\\\Desktop\\\\RaspberryPi\\\\PSPTunnel\\\\PSPTunnel大陆修改版[5-4SSID增加版本]\\\\&quot;)\nsubprocess.Popen(command1, shell = True)\n\nos.chdir(&quot;C:\\\\Users\\\\Evilmass1ve\\\\Desktop\\\\RaspberryPi\\\\Software\\\\ngrok\\\\cc&quot;)\nsubprocess.Popen(command2, shell = True)\n</code></pre><p>Popen使用时shell参数的设，一般情况下，需要加上shell = True<br>最后<code>pyinstaller Server.py</code>，一键什么的，整个世界都美好了<br><strong>懒才是推动科技发展的动力啊</strong></p>\n<h3 id=\"待补充的内容\"><a href=\"#待补充的内容\" class=\"headerlink\" title=\"待补充的内容\"></a>待补充的内容</h3><p>后面准备补充一下使用supervisor来保持服务一直运行，在服务端和客户端都需要配置一下，维持服务稳定。</p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/dmc.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>\n","excerpt":"<p><img src=\"https://of4jd0bcc.qnssl.com/ngrok/ngrok.png\" alt=\"1\"></p>","more":"<h3 id=\"Require\"><a href=\"#Require\" class=\"headerlink\" title=\"Require\"></a>Require</h3><h4 id=\"域名设置主机记录\"><a href=\"#域名设置主机记录\" class=\"headerlink\" title=\"域名设置主机记录\"></a>域名设置主机记录</h4><p><img src=\"https://of4jd0bcc.qnssl.com/ngrok/%E4%B8%BB%E6%9C%BA%E8%AE%B0%E5%BD%95.png\" alt=\"主机记录\"><br>如果没有<strong><code>*</code></strong>记录的话会被重定向至主机，无法打开隧道页面<br><br></p>\n<h4 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h4><pre><code>yum install git\n</code></pre><p><br>    </p>\n<h4 id=\"Go\"><a href=\"#Go\" class=\"headerlink\" title=\"Go\"></a>Go</h4><p>如果之前安装过旧版本的Go请先卸载</p>\n<pre><code>yum remove golang\n</code></pre><p>下载go1.4.2源码包</p>\n<pre><code>wget https://storage.googleapis.com/golang/go1.7.linux-amd64.tar.gz\n</code></pre><p>解压到/usr/local/</p>\n<pre><code>tar -C /usr/local/ -zxf go1.7.linux-amd64.tar.gz\n</code></pre><p>添加环境变量</p>\n<pre><code>vim /etc/profile\n</code></pre><p>在最后面添加以下两句保存并退出：</p>\n<pre><code>export GOROOT=/usr/local/go\nexport PATH=$GOROOT/bin:$PATH\n</code></pre><p>使之前的配置生效</p>\n<pre><code>source /etc/profile\n</code></pre><p><br></p>\n<h3 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h3><pre><code>git clone https://github.com/inconshreveable/ngrok.git\n</code></pre><p>在使用官方服务的时候，我们使用的是官方的 SSL 证书，所以如果直接编译的话，默认的链接地址会到官方的 ngrok.com 去，所以我们需要自己生成证书。</p>\n<p><strong>NGROK_DOMAIN这里修改为自己的域名</strong></p>\n<pre><code>cd /root/ngrok \nNGROK_DOMAIN=&quot;evilmass.cc&quot;\n\nopenssl genrsa -out rootCA.key 2048\nopenssl req -x509 -new -nodes -key rootCA.key -subj &quot;/CN=$NGROK_DOMAIN&quot; -days 5000 -out rootCA.pem\nopenssl genrsa -out device.key 2048\nopenssl req -new -key device.key -subj &quot;/CN=$NGROK_DOMAIN&quot; -out device.csr\nopenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000\n</code></pre><p> openssl 就是生成 SSL 证书文件的过程，之后会在 ngrok 目录下生成 root，device 等六个文件。 然后需要拷贝到配置的目录中，在编译的时候会使用这些文件。</p>\n<pre><code>\\cp rootCA.pem assets/client/tls/ngrokroot.crt -f\n\\cp device.crt assets/server/tls/snakeoil.crt  -f\n\\cp device.key assets/server/tls/snakeoil.key -f\n</code></pre><p><code>\\cp</code> 命令可强制覆盖</p>\n<p>编译ngrokd</p>\n<pre><code>cd /root/ngrok\nmake release-server\n</code></pre><blockquote>\n<p>如果安装的时候卡在了<strong>gopkg.in/inconshreveable/go-update.v0 (download)</strong>或者卡在<strong>gopkg.in/yaml.v1 (download)</strong>，则代表需要安装新的git<br>注意git版本应大于1.7.9.5<br>源码编译安装请参考：<a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\">安装Git</a></p>\n</blockquote>\n<p>CentOS下Git安装的一个坑：</p>\n<pre><code>Can&apos;t locate ExtUtils/MakeMaker.pm in @INC (@INC contains: /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at Makefile.PL line 3.\n\nBEGIN failed--compilation aborted at Makefile.PL line 3.\n\nmake[1]: *** [perl.mak] Error 2\n\nmake: *** [perl/perl.mak] Error 2\n</code></pre><p>解决:</p>\n<pre><code>yum install perl-ExtUtils-MakeMaker\n</code></pre><p>构建完成以后可以在bin目录下看到<strong>ngrokd</strong>，这个文件，这个就是我们后面要开启的服务器端(Server)</p>\n<p><br></p>\n<h3 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h3><p>go开发环境为我们提供了强大的跨平台交叉编译功能，在Linux下即可完成Windows版的编译。</p>\n<pre><code>cd /root/ngrok\n</code></pre><p>执行如下命令编译Windows 64位客户端</p>\n<pre><code>GOOS=windows GOARCH=amd64 make release-client\n</code></pre><p><strong>GOOS</strong>：当前编译的操作系统 (windows，linux，darwin)<br><strong>GOARCH</strong>：go编译出来的应用构架 (386，amd64，arm)</p>\n<blockquote>\n<p>Linux 平台 32 位系统：GOOS=linux GOARCH=386<br>  Linux 平台 64 位系统：GOOS=linux GOARCH=amd64<br>  Windows 平台 32 位系统：GOOS=windows GOARCH=386<br>  Windows 平台 64 位系统：GOOS=windows GOARCH=amd64<br>  MAC 平台 32 位系统：GOOS=darwin GOARCH=386<br>  MAC 平台 64 位系统：GOOS=darwin GOARCH=amd64<br>  ARM 平台：GOOS=linux GOARCH=arm</p>\n</blockquote>\n<p>通过前面的步骤，就会在bin目录里面生成所有的客户端文件，客户端平台是文件夹的名字（windows_amd64），客户端放在对应的目录下。<br>没有错误的话，Windows客户端ngrok就编译成功了，我们可以在./bin/windows_amd64/目录下找到执行文件ngrok.exe。将其下载到Windows上。<br><br></p>\n<h3 id=\"运行测试\"><a href=\"#运行测试\" class=\"headerlink\" title=\"运行测试\"></a>运行测试</h3><h4 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h4><pre><code>cd /root/ngrok\nNGROK_DOMAIN=&quot;evilmass.cc&quot;\n#http\nbin/ngrokd -domain=&quot;$NGROK_DOMAIN&quot; -httpAddr=&quot;:6060&quot; -httpsAddr=&quot;:6061&quot; -tunnelAddr=&quot;:6062&quot; \n\n#https设置了tls\n#bin/ngrokd -domain=&quot;$NGROK_DOMAIN&quot; -httpAddr=&quot;:6060&quot; -httpsAddr=&quot;:6061&quot; -tunnelAddr=&quot;:6062&quot; -tlsKey=./device.key -tlsCrt=./device.crt\n</code></pre><p><strong>httpAddr</strong>：访问普通的http使用的端口号，用后面用<code>子域名.evilmass.cc:6060</code> 来访问服务<br><strong>httpsAddr</strong>：访问的https使用的端口号，同上，只不过是需要https的服务访问才用这个端口<br><strong>tunnelAddr</strong>：通道的端口号，<strong>这个端口是Ngrok用来通信的，所以这个端口在服务器上和客户端上设置必须要对应才可以正常的链接</strong>，默认不填写是4433</p>\n<h5 id=\"验证端口是否打开\"><a href=\"#验证端口是否打开\" class=\"headerlink\" title=\"验证端口是否打开\"></a>验证端口是否打开</h5><pre><code>nc -v -w 10 -z 127.0.0.1 6060-6062\n</code></pre><p>如果显示的3个端口都有响应（都显示了succeeded就是正常）</p>\n<h5 id=\"打开防火墙\"><a href=\"#打开防火墙\" class=\"headerlink\" title=\"打开防火墙\"></a>打开防火墙</h5><p>如果是centOS的系统，防火墙应该是 firewall-cmd 来控制。对应的命令就是，其中端口号要写自己的：</p>\n<pre><code>firewall-cmd --permanent --zone=public --add-port=6060-6062/tcp  //永久\n#firewall-cmd  --zone=public --add-port=6060-6062/tcp   //临时\n</code></pre><p>如果是ubuntu之类的系统，防火墙一般是iptables来控制，对应的命令就是，也要修改自己的端口号才可以：</p>\n<pre><code>iptables -A INPUT -p tcp --dport 6060-6062 -j ACCEPT\niptables -A OUTPUT -p tcp --sport 6060-6062 -j ACCEPT\n</code></pre><h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><p>建立一个文件ngrok.cfg，与刚才编译好的windows客户端放在一起。写入如下内容：</p>\n<pre><code>server_addr: &quot;evilmass.cc:6062&quot;  #6062是服务器端的通信端口\ntrust_host_root_certs: &quot;true&quot;\n#http_proxy: &quot;http://user:password@proxy-ip:port&quot;  #代理设置\ntunnels:\n    router:\n        auth: &quot;username:password&quot;  #打开此页面需要先验证\n        proto:\n        http: 192.168.1.1:80  #or https\n    ssh:\n        proto:\n            tcp: 22\n    mhp:\n        proto:\n            tcp: 182.168.1.149:3000\n</code></pre><p>在客户端目录下运行</p>\n<pre><code>ngrok.exe -log=&quot;ngrok_log.txt&quot; -config=&quot;ngrok.cfg&quot; start router mhp\n</code></pre><p>日志： <code>-log=ngrok_log.txt</code>是记录ngrok的日志，如果不能访问就可以查看到底是什么问题</p>\n<p>启动服务： start <code>router</code> <code>mhp</code></p>\n<p>如果显示了tunnel status: online就是服务器和客户端是正常链接的<br><img src=\"https://of4jd0bcc.qnssl.com/ngrok/%E5%A4%9A%E9%9A%A7%E9%81%93%E8%AE%BE%E7%BD%AE.png\" alt=\"多隧道设置\"><br><br><br>如果设定了<code>auth</code>，则开启页面需要填写<code>username</code>和<code>password</code>：<br><img src=\"https://of4jd0bcc.qnssl.com/ngrok/%E4%B8%A4%E6%AD%A5%E9%AA%8C%E8%AF%81.png\" alt=\"两步认证\"><br><br><br>通过浏览器访问<code>http://router.evilmass.cc:6060</code>就可以链接到现在的内网主机<code>192.168.1.1:80</code>上的服务。<br><img src=\"https://of4jd0bcc.qnssl.com/ngrok/%E6%B5%8B%E8%AF%95%E9%9A%A7%E9%81%93.png\" alt=\"测试隧道\"></p>\n<p><br></p>\n<h3 id=\"配置-raspberry-pi-客户端\"><a href=\"#配置-raspberry-pi-客户端\" class=\"headerlink\" title=\"配置 raspberry pi 客户端\"></a>配置 raspberry pi 客户端</h3><p>先在需要的地方建立一个目录，然后建立一个和window下一样的ngrok.cfg的文件，内容也相同</p>\n<p>将arm版本的ngrok上传到树莓派上对应的目录</p>\n<p>进入这个目录以后，通过 chmod +x ngrok 将ngrok设置成可执行文件</p>\n<p>执行命令 </p>\n<pre><code>./ngrok -config=&quot;ngrok.cfg&quot; start raspberry\n</code></pre><p>这样就可以通过<code>raspberry.evilmass.cc:6062</code>访问树莓派上的80端口对应的服务。（树莓派可以直接安装一个nginx， <code>apt-get install nginx</code> 然后默认80端口就可以显示nginx默认的页面）</p>\n<h3 id=\"拿Python写个MHP-Tunnel-Server脚本来玩一下\"><a href=\"#拿Python写个MHP-Tunnel-Server脚本来玩一下\" class=\"headerlink\" title=\"拿Python写个MHP Tunnel Server脚本来玩一下\"></a>拿Python写个MHP Tunnel Server脚本来玩一下</h3><p>今天找到了<code>mhptunnel_unixsv4.zip</code>，Unix下的MHP Tunnel，make之后执行./sv 30000 &amp;就可以启动服务器端。<strong>But！</strong>连上去之后不停的重新登录-掉线-登录-掉线。。。估计是版本太旧了<br>如果你们仔细找找的话，在MHP Tunnel目录下面是有个服务端启动工具的，长这样：<br><img src=\"https://of4jd0bcc.qnssl.com/ngrok/tunnelsvr.png\" alt=\"1\"><br>打开之后有如下参数：</p>\n<pre><code>MHP Tunnel Server Ver0.8.7.5 by Pensil\nProtocol Ver0.8.7 by Pensil\nUsage: TunnelSVR port [adminid] [announce] [name] [desc] [hr] [maxuser] [lcid]\n\nport:        port number\nadminid:     admin uuid (default: NULL)\nexport:      set 1 to announce (default: 0)\nname:        admin nickname (default: read from TunnelSVR.ini)\ndesc:        server description (default: read from TunnelSVR.ini)\nhr:          hunter rank (default: read from TunnelSVR.ini)\nmaxuser:     max users (default: read from TunnelSVR.ini)\nlcid:        default lcid (default: read from TunnelSVR.ini)\n</code></pre><p>也就是说只要一台有Windows系统且有公网ip的服务器运行了这个程序，设定好了port、export=1，别人就可以看到你的服务器了，跑偏了。。。</p>\n<p>Server.py</p>\n<pre><code># !/usr/bin/env python3\n# -*- coding:utf-8 -*-\n\nimport os\nimport subprocess\n\ncommand1 = &quot;tunnelsvr.exe&quot;\ncommand2 = &quot;ngrok.exe -log=\\&quot;ngrok_log.txt\\&quot; -config=\\&quot;ngrok.cfg\\&quot; start mhp&quot;\n\nos.chdir(&quot;C:\\\\Users\\\\Evilmass1ve\\\\Desktop\\\\RaspberryPi\\\\PSPTunnel\\\\PSPTunnel大陆修改版[5-4SSID增加版本]\\\\&quot;)\nsubprocess.Popen(command1, shell = True)\n\nos.chdir(&quot;C:\\\\Users\\\\Evilmass1ve\\\\Desktop\\\\RaspberryPi\\\\Software\\\\ngrok\\\\cc&quot;)\nsubprocess.Popen(command2, shell = True)\n</code></pre><p>Popen使用时shell参数的设，一般情况下，需要加上shell = True<br>最后<code>pyinstaller Server.py</code>，一键什么的，整个世界都美好了<br><strong>懒才是推动科技发展的动力啊</strong></p>\n<h3 id=\"待补充的内容\"><a href=\"#待补充的内容\" class=\"headerlink\" title=\"待补充的内容\"></a>待补充的内容</h3><p>后面准备补充一下使用supervisor来保持服务一直运行，在服务端和客户端都需要配置一下，维持服务稳定。</p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/dmc.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/girl_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>"},{"title":"利用proxychains在终端使用socks5代理","date":"2017-01-18T04:09:59.000Z","_content":"\n**配置测试环境没有梯子怎么行= w =**\n\n<!--more-->\n\n### proxychains安装\n\n    git clone https://github.com/rofl0r/proxychains-ng.git\n    cd proxychains-ng\n    ./configure –prefix=/usr –sysconfdir=/etc\n    make\n    sudo make install\n    sudo make install-config\n\n### 编辑proxychains配置\n\n    vim /etc/proxychains.conf\n\n\n### 将socks4 127.0.0.1 9095改为\n\n    socks5 127.0.0.1 1080 //1080改为你自己的端口\n\n\n### 使用方法\n\n在需要代理的命令前加上 proxychains4\n    \n    proxychains4 wget http://xxx.com/xxx.zip\n\n这样用每次都要在命令前输入proxychains4，比较麻烦，可以用proxychains4代理一个shell，在shell中执行的命令就会自动使用代理了\n\n    proxychains4 -q /bin/bash\n可以把上面的命令加入到用户的.bashrc或者.bash_profile中,用户登录后自动代理一个bash shell,这就有点像全局代理了\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E6%B3%A2%E5%B0%94%E5%BE%B3_alipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/patapon_wechat.gif?imageView2/1/w/200/h/200","source":"_posts/利用proxychains在终端使用socks5代理.md","raw":"---\ntitle: 利用proxychains在终端使用socks5代理\ndate: 2017-01-18 12:09:59\ntags: Linux\n---\n\n**配置测试环境没有梯子怎么行= w =**\n\n<!--more-->\n\n### proxychains安装\n\n    git clone https://github.com/rofl0r/proxychains-ng.git\n    cd proxychains-ng\n    ./configure –prefix=/usr –sysconfdir=/etc\n    make\n    sudo make install\n    sudo make install-config\n\n### 编辑proxychains配置\n\n    vim /etc/proxychains.conf\n\n\n### 将socks4 127.0.0.1 9095改为\n\n    socks5 127.0.0.1 1080 //1080改为你自己的端口\n\n\n### 使用方法\n\n在需要代理的命令前加上 proxychains4\n    \n    proxychains4 wget http://xxx.com/xxx.zip\n\n这样用每次都要在命令前输入proxychains4，比较麻烦，可以用proxychains4代理一个shell，在shell中执行的命令就会自动使用代理了\n\n    proxychains4 -q /bin/bash\n可以把上面的命令加入到用户的.bashrc或者.bash_profile中,用户登录后自动代理一个bash shell,这就有点像全局代理了\n\n<br><br>\n> **这个打赏二维码好像有什么不对**\n\n**支付宝** \n![alipay][99]\n\n**微信**  \n![wechat][100]\n\n\n  [99]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E6%B3%A2%E5%B0%94%E5%BE%B3_alipay.gif?imageView2/1/w/200/h/200\n  [100]: https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/patapon_wechat.gif?imageView2/1/w/200/h/200","slug":"利用proxychains在终端使用socks5代理","published":1,"updated":"2017-02-05T19:45:26.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv5dy0h000upoogyda5y22g","content":"<p><strong>配置测试环境没有梯子怎么行= w =</strong></p>\n<a id=\"more\"></a>\n<h3 id=\"proxychains安装\"><a href=\"#proxychains安装\" class=\"headerlink\" title=\"proxychains安装\"></a>proxychains安装</h3><pre><code>git clone https://github.com/rofl0r/proxychains-ng.git\ncd proxychains-ng\n./configure –prefix=/usr –sysconfdir=/etc\nmake\nsudo make install\nsudo make install-config\n</code></pre><h3 id=\"编辑proxychains配置\"><a href=\"#编辑proxychains配置\" class=\"headerlink\" title=\"编辑proxychains配置\"></a>编辑proxychains配置</h3><pre><code>vim /etc/proxychains.conf\n</code></pre><h3 id=\"将socks4-127-0-0-1-9095改为\"><a href=\"#将socks4-127-0-0-1-9095改为\" class=\"headerlink\" title=\"将socks4 127.0.0.1 9095改为\"></a>将socks4 127.0.0.1 9095改为</h3><pre><code>socks5 127.0.0.1 1080 //1080改为你自己的端口\n</code></pre><h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>在需要代理的命令前加上 proxychains4</p>\n<pre><code>proxychains4 wget http://xxx.com/xxx.zip\n</code></pre><p>这样用每次都要在命令前输入proxychains4，比较麻烦，可以用proxychains4代理一个shell，在shell中执行的命令就会自动使用代理了</p>\n<pre><code>proxychains4 -q /bin/bash\n</code></pre><p>可以把上面的命令加入到用户的.bashrc或者.bash_profile中,用户登录后自动代理一个bash shell,这就有点像全局代理了</p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E6%B3%A2%E5%B0%94%E5%BE%B3_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/patapon_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>\n","excerpt":"<p><strong>配置测试环境没有梯子怎么行= w =</strong></p>","more":"<h3 id=\"proxychains安装\"><a href=\"#proxychains安装\" class=\"headerlink\" title=\"proxychains安装\"></a>proxychains安装</h3><pre><code>git clone https://github.com/rofl0r/proxychains-ng.git\ncd proxychains-ng\n./configure –prefix=/usr –sysconfdir=/etc\nmake\nsudo make install\nsudo make install-config\n</code></pre><h3 id=\"编辑proxychains配置\"><a href=\"#编辑proxychains配置\" class=\"headerlink\" title=\"编辑proxychains配置\"></a>编辑proxychains配置</h3><pre><code>vim /etc/proxychains.conf\n</code></pre><h3 id=\"将socks4-127-0-0-1-9095改为\"><a href=\"#将socks4-127-0-0-1-9095改为\" class=\"headerlink\" title=\"将socks4 127.0.0.1 9095改为\"></a>将socks4 127.0.0.1 9095改为</h3><pre><code>socks5 127.0.0.1 1080 //1080改为你自己的端口\n</code></pre><h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>在需要代理的命令前加上 proxychains4</p>\n<pre><code>proxychains4 wget http://xxx.com/xxx.zip\n</code></pre><p>这样用每次都要在命令前输入proxychains4，比较麻烦，可以用proxychains4代理一个shell，在shell中执行的命令就会自动使用代理了</p>\n<pre><code>proxychains4 -q /bin/bash\n</code></pre><p>可以把上面的命令加入到用户的.bashrc或者.bash_profile中,用户登录后自动代理一个bash shell,这就有点像全局代理了</p>\n<p><br><br></p>\n<blockquote>\n<p><strong>这个打赏二维码好像有什么不对</strong></p>\n</blockquote>\n<p><strong>支付宝</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/alipay/%E6%B3%A2%E5%B0%94%E5%BE%B3_alipay.gif?imageView2/1/w/200/h/200\" alt=\"alipay\"></p>\n<p><strong>微信</strong><br><img src=\"https://of4jd0bcc.qnssl.com/Blog/%E6%89%93%E8%B5%8F/wechat/patapon_wechat.gif?imageView2/1/w/200/h/200\" alt=\"wechat\"></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciyv5dxzs0005poog06yjpckn","category_id":"ciyv5dxzx0009pooga7lwapw5","_id":"ciyv5dy06000kpoogjf1p8i6t"}],"PostTag":[{"post_id":"ciyv5dxzd0000poogcse77tj6","tag_id":"ciyv5dxzm0002poog22vwur9l","_id":"ciyv5dxzv0007poogtkbvzr6i"},{"post_id":"ciyv5dxzv0008poogivdhluvt","tag_id":"ciyv5dxzu0006poogi3qcwyi9","_id":"ciyv5dy00000cpoog6jnpj8v3"},{"post_id":"ciyv5dxzj0001poogncnbypur","tag_id":"ciyv5dxzu0006poogi3qcwyi9","_id":"ciyv5dy01000epoogyiy2w1tz"},{"post_id":"ciyv5dy00000dpoog0gwj3gkq","tag_id":"ciyv5dxzm0002poog22vwur9l","_id":"ciyv5dy03000hpoogndtifrga"},{"post_id":"ciyv5dxzp0003poogb4lq9bx6","tag_id":"ciyv5dxzz000bpoogzympx2mw","_id":"ciyv5dy06000jpoogf4ojl6wo"},{"post_id":"ciyv5dxzq0004poog7di3i43e","tag_id":"ciyv5dxzz000bpoogzympx2mw","_id":"ciyv5dy0a000opoogvl823skm"},{"post_id":"ciyv5dy07000lpoogroikfm1x","tag_id":"ciyv5dxzm0002poog22vwur9l","_id":"ciyv5dy0b000qpoog7vxvbpzb"},{"post_id":"ciyv5dy09000npoogkyo81i44","tag_id":"ciyv5dy08000mpooga61d8o0f","_id":"ciyv5dy0g000tpoogen1f5amm"},{"post_id":"ciyv5dxzx000apoogez0dn4xx","tag_id":"ciyv5dy08000mpooga61d8o0f","_id":"ciyv5dy0h000vpoog6dzzux7x"},{"post_id":"ciyv5dy0a000ppoog6x73rjtt","tag_id":"ciyv5dy08000mpooga61d8o0f","_id":"ciyv5dy0j000xpoogx2770d69"},{"post_id":"ciyv5dy0h000upoogyda5y22g","tag_id":"ciyv5dy0c000rpooghg9liuwl","_id":"ciyv5dy0j000ypoogh9ybeeca"},{"post_id":"ciyv5dy01000fpoog6hcgc6cc","tag_id":"ciyv5dy0c000rpooghg9liuwl","_id":"ciyv5dy0k0010poogig1w6szf"},{"post_id":"ciyv5dy04000ipoogctpl93st","tag_id":"ciyv5dy08000mpooga61d8o0f","_id":"ciyv5dy0l0011poog9zq5et8c"},{"post_id":"ciyv5dy0c000spoogv4ep4460","tag_id":"ciyv5dy0c000rpooghg9liuwl","_id":"ciyv5dy0n0012poogax2mbgbz"}],"Tag":[{"name":"杂","_id":"ciyv5dxzm0002poog22vwur9l"},{"name":"Hack","_id":"ciyv5dxzu0006poogi3qcwyi9"},{"name":"Video Game","_id":"ciyv5dxzz000bpoogzympx2mw"},{"name":"爬虫","_id":"ciyv5dy08000mpooga61d8o0f"},{"name":"Linux","_id":"ciyv5dy0c000rpooghg9liuwl"}]}}